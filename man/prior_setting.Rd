% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set_priors.R
\name{prior_setting}
\alias{prior_setting}
\alias{make_priors}
\alias{set_priors}
\title{Setting priors}
\usage{
make_priors(
  model,
  alphas = NA,
  distribution = NA,
  alter_at = NA,
  node = NA,
  nodal_type = NA,
  label = NA,
  param_set = NA,
  given = NA,
  statement = NA,
  param_names = NA
)

set_priors(
  model,
  alphas = NA,
  distribution = NA,
  alter_at = NA,
  node = NA,
  nodal_type = NA,
  label = NA,
  param_set = NA,
  given = NA,
  statement = NA,
  param_names = NA
)
}
\arguments{
\item{model}{model created with \code{make_model}}

\item{alphas}{Real positive numbers giving hyperparameters of the Dirichlet distribution}

\item{distribution}{string indicating a common prior distribution (uniform, jeffreys or certainty)}

\item{alter_at}{string specifying filtering operations to be applied to parameters_df, yielding a logical vector indicating parameters for which values should be altered. (see examples)}

\item{node}{string indicating nodes for which v are to be altered}

\item{nodal_type}{string. Label for nodal type indicating nodal types for which values are to be altered}

\item{param_set}{string indicating  the name of the set of parameters to be altered}

\item{given}{string indicates the node on which the parameter to be altered depends}

\item{statement}{causal query that determines nodal types for which values are to be altered}

\item{param_names}{string. The name of specific parameter in the form of, for example, 'X.1', 'Y.01'}
}
\value{
A vector indicating the hyperparameters of the prior distribution of the nodal types.

An object of class \code{causal_model}. It essentially returns a list containing the elements comprising
a model (e.g. 'statement', 'nodal_types' and 'DAG') with the `priors` attached to it.
}
\description{
Seven arguments govern *which* parameters should be altered. The default is 'all' but this can be reduced by specifying

A flexible function to generate priors for a model.

A flexible function to add priors to a model.
}
\details{
* \code{alter_at} String specifying filtering operations to be applied to parameters_df, yielding a logical vector indicating parameters for which values should be altered. "node == 'X' & nodal_type %in% c('00','01')"

* \code{node}, which restricts for example to parameters associated with node 'X'

* \code{label} or \code{nodal_type} The label of a particular nodal type, written either in the form Y0000 or Y.Y0000

* \code{param_set} The param_set of a parameter.

* \code{given} Given parameter set of a parameter.

* \code{statement}, which restricts for example to nodal types that satisfy the statement 'Y[X=1] > Y[X=0]'

* \code{param_names}, which restricts in specific parameters by naming them

Two arguments govern what values to apply:

* \code{alphas} is one or more non negative numbers and

* \code{distribution} indicates one of a common class: uniform, jeffreys, or 'certain'

Forbidden statements include:
\itemize{
  \item Setting \code{distribution} and \code{values} at the same time.
  \item Setting a \code{distribution} other than uniform, jeffreys or certainty.
  \item Setting negative values.
  \item specifying \code{alter_at} with any of \code{node}, \code{nodal_type},\code{param_set},\code{given},\code{statement} or \code{param_names}
  \item specifying \code{param_names} with any of \code{node},\code{nodal_type},\code{param_set},\code{given},\code{statement} or \code{alter_at}
  \item specifying \code{statement} with any of \code{node} or \code{nodal_type}
}
}
\examples{

model <- CausalQueries::make_model("X -> M -> Y; X <-> Y")

#passing alphas to all parameters
make_priors(model = model, alphas = 0.5)
make_priors(model = model, distribution = "jeffreys")

#altering values using \code{alter_at}
make_priors(model = model, alphas = c(0.5,0.25), alter_at = "node == 'Y' & nodal_type \%in\% c('00','01') & given == 'X.0'")

#altering values using \code{param_names}
make_priors(model = model, alphas = c(0.5,0.25), param_names = c("Y.10_X.0","Y.10_X.1"))

#altering values using \code{statement}
make_priors(model = model, alphas = c(0.5,0.25), statement = "Y[X=1] > Y[X=0]")

#altering values using a combination of other arguments
make_priors(model = model, alphas = c(0.5,0.25), node = "Y", nodal_type = c("00","01"), given = "X.0")

model <- CausalQueries::make_model("X -> M -> Y; X <-> Y")

#passing alphas to all parameters
set_priors(model = model, alphas = 0.5)
set_priors(model = model, distribution = "jeffreys")

#altering values using \code{alter_at}
set_priors(model = model, alphas = c(0.5,0.25), alter_at = "node == 'Y' & nodal_type \%in\% c('00','01') & given == 'X.0'")

#altering values using \code{param_names}
set_priors(model = model, alphas = c(0.5,0.25), param_names = c("Y.10_X.0","Y.10_X.1"))

#altering values using \code{statement}
set_priors(model = model, alphas = c(0.5,0.25), statement = "Y[X=1] > Y[X=0]")

#altering values using a combination of other arguments
set_priors(model = model, alphas = c(0.5,0.25), node = "Y", nodal_type = c("00","01"), given = "X.0")#' model <- CausalQueries::make_model("X -> M -> Y; X <-> Y")

#passing alphas to all parameters
set_priors(model = model, alphas = 0.5)
set_priors(model = model, distribution = "jeffreys")

#altering values using \code{alter_at}
set_priors(model = model, alphas = c(0.5,0.25), alter_at = "node == 'Y' & nodal_type \%in\% c('00','01') & given == 'X.0'")

#altering values using \code{param_names}
set_priors(model = model, alphas = c(0.5,0.25), param_names = c("Y.10_X.0","Y.10_X.1"))

#altering values using \code{statement}
set_priors(model = model, alphas = c(0.5,0.25), statement = "Y[X=1] > Y[X=0]")

#altering values using a combination of other arguments
set_priors(model = model, alphas = c(0.5,0.25), node = "Y", nodal_type = c("00","01"), given = "X.0")
}
\seealso{
Other priors: 
\code{\link{get_priors}()}

Other priors: 
\code{\link{get_priors}()}
}
\concept{priors}
