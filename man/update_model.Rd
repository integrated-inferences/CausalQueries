% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update_model.R
\name{update_model}
\alias{update_model}
\title{Fit causal model using 'stan'}
\usage{
update_model(
  model,
  data = NULL,
  data_type = "long",
  keep_fit = FALSE,
  keep_transformed = TRUE,
  censored_types = NULL,
  ...
)
}
\arguments{
\item{model}{A \code{causal_model}. A model object generated by \code{\link{make_model}}.}

\item{data}{A \code{data.frame}.  Data of nodes that can take three values: 0, 1, and NA. In long form as generated by \code{\link{make_events}}}

\item{data_type}{Either 'long' (as made by  \code{\link{simulate_data}}) or 'compact' (as made by \code{\link{collapse_data}}).
Compact data must have entries for each member of each strategy family to produce a valid simplex.}

\item{keep_fit}{Logical. Whether to append the  \code{\link[rstan]{stanfit}} object to the model. Defaults to `FALSE`}

\item{keep_transformed}{Logical. Whether to keep transformed parameters, prob_of_types, P_lambdas, w, w_full}

\item{censored_types}{vector of data types that are selected out of the data, eg c("X0Y0")}

\item{...}{Options passed onto \code{\link[rstan]{stan}} call.}
}
\value{
An object of class \code{causal_model}. It essentially returns a list containing the elements comprising
a model (e.g. 'statement', 'nodal_types' and 'DAG') with the `posterior_distribution` returned by \code{\link[rstan]{stan}} attached to it.
}
\description{
Takes a model and data and returns a model object with data attached and a posterior model
}
\examples{

model <- make_model('X->Y')
data_long   <- simulate_data(model, n = 4)
data_short  <- collapse_data(data_long, model)
\donttest{
model_1 <- update_model(model, data_long)
}
\donttest{
model_2 <- update_model(model, data_long, keep_transformed = FALSE)
}
\dontrun{
# Throws error unless compact data indicated:

model_3 <- update_model(model, data_short)
model_4 <- update_model(model, data_short, data_type = 'compact')

# It is possible to implement updating without data, in which
# case the posterior is a stan object that reflects the prior
model_5 <- update_model(model)


# Censored data types
make_model("X->Y") \%>\%
  update_model(data.frame(X=c(1,1), Y=c(1,1)),
  censored_types = c("X1Y0"),
  init_r = 1) \%>\%
  query_model(te("X", "Y"), using = "posteriors")

# Censored data: Learning nothing
make_model("X->Y") \%>\%
  update_model(data.frame(X=c(1,1), Y=c(1,1)),
  censored_types = c("X1Y0", "X0Y0", "X0Y1"),
  init_r = 1) \%>\%
  query_model(te("X", "Y"), using = "posteriors")
}
}
