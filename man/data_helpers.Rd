% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_helpers.R
\name{data_helpers}
\alias{data_helpers}
\alias{collapse_data}
\alias{expand_data}
\title{Data helpers}
\usage{
collapse_data(
  data,
  model,
  drop_NA = TRUE,
  drop_family = FALSE,
  summary = FALSE
)

expand_data(data_events = NULL, model)
}
\arguments{
\item{data}{A \code{data.frame}.  Data of nodes that can take three values:
0, 1, and NA. In long form as generated by \code{\link{make_events}}}

\item{model}{A \code{causal_model}. A model object generated by
\code{\link{make_model}}.}

\item{drop_NA}{Logical. Whether to exclude strategy families that contain
no observed data. Exceptionally if no data is provided, minimal data on
data on first node is returned. Defaults to `TRUE`}

\item{drop_family}{Logical. Whether to remove column \code{strategy} from
the output. Defaults to `FALSE`.}

\item{summary}{Logical. Whether to return summary of the data. See details.
Defaults to `FALSE`.}

\item{data_events}{A \code{data.frame}. It must be compatible with nodes in
\code{model}. The default columns are
\code{event}, \code{strategy} and \code{count}.}
}
\value{
A vector of data events

If \code{summary = TRUE} `collapse_data` returns a list containing the
  following components:
\item{data_events}{A compact data.frame of event types and strategies.}
   \item{observed_events}{A vector of character strings specifying the events
     observed in the data}
   \item{unobserved_events}{A vector of character strings specifying the
     events not observed in the data}

A \code{data.frame} with rows as data observation
}
\description{
Various helpers to simulate data and to manipulate data types between compact and long forms.

Take a `data.frame` and return compact `data.frame`
of event types and strategies.
}
\examples{
\donttest{

model <- make_model('X -> Y')

df <- data.frame(X = c(0,1,NA), Y = c(0,0,1))

df |> collapse_data(model)

# Illustrating options

df |> collapse_data(model, drop_NA = FALSE)

df |> collapse_data(model, drop_family = TRUE)

df |> collapse_data(model, summary = TRUE)

# Appropriate behavior given restricted models

model <- make_model('X -> Y') |>
  set_restrictions('X[]==1')
df <- make_data(model, n = 10)
df[1,1] <- ''
df |> collapse_data(model)

df <- data.frame(X = 0:1)
df |> collapse_data(model)

}

\donttest{
model <- make_model('X->M->Y')
make_events(model, n = 5) |>
  expand_data(model)
make_events(model, n = 0) |>
  expand_data(model)
 }

}
