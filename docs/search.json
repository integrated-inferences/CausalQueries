[{"path":"/articles/front-door.html","id":"try-it","dir":"Articles","previous_headings":"","what":"Try it","title":"Through the front door","text":"Say X, M, Y perfectly correlated. average treatment effect identified?","code":""},{"path":"/articles/getting-started.html","id":"make-a-model","dir":"Articles","previous_headings":"","what":"Make a model","title":"Getting started","text":"Generating: make model need provide DAG statement make_model. instance \"X->Y\" \"X -> M -> Y <- X\" \"Z -> X -> Y <-> X\". Graphing: made model can inspect DAG:  Inspecting: model set parameters default distribution . Tailoring: features can edited using set_restrictions, set_priors set_parameters. Simulation: Data can drawn model like :","code":"# examples of models xy_model <- make_model(\"X -> Y\") iv_model <- make_model(\"Z -> X -> Y <-> X\") plot(iv_model) xy_model$parameters_df |> kable() iv_model <-    iv_model |> set_restrictions(decreasing('Z', 'X')) data <- make_data(iv_model, n = 4)   data |> kable()"},{"path":"/articles/getting-started.html","id":"model-updating","dir":"Articles","previous_headings":"","what":"Model updating","title":"Getting started","text":"Updating: Update using update_model. can pass rstan arguments update_model. Inspecting: can access posterior distribution model parameters directly thus: row draw parameters.","code":"df <- fabricate(N = 100, X = rbinom(N, 1, .5), Y = rbinom(N, 1, .25 + X*.5))  xy_model <-    xy_model |>    update_model(df, refresh = 0) xy_model$posterior_distribution |>    head() |> kable()"},{"path":"/articles/getting-started.html","id":"query-model","dir":"Articles","previous_headings":"","what":"Query model","title":"Getting started","text":"Querying: ask arbitrary causal queries model. Examples unconditional queries: Examples conditional queries: Queries can even conditional counterfactual quantities. probability positive effect given effect:","code":"xy_model |>    query_model(\"Y[X=1] > Y[X=0]\", using = c(\"priors\", \"posteriors\")) |>   kable() xy_model |>    query_model(\"Y[X=1] > Y[X=0]\", using = c(\"priors\", \"posteriors\"),               given = \"X==1 & Y == 1\") |>   kable() xy_model |>    query_model(\"Y[X=1] > Y[X=0]\", using = c(\"priors\", \"posteriors\"),               given = \"Y[X=1] != Y[X=0]\") |>   kable()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Clara Bicalho. Contributor. Jasper Cooper. Contributor. Macartan Humphreys. Author. Till Tietz. Author, maintainer. Alan Jacobs. Author. Merlin Heidemanns. Contributor. Lily Medina. Author. Julio Solis. Contributor. Georgiy Syunyaev. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Humphreys M, Tietz T, Jacobs , Medina L (2023). CausalQueries: Make, Update, Query Binary Causal Models. R package version 0.1.0.","code":"@Manual{,   title = {CausalQueries: Make, Update, and Query Binary Causal Models},   author = {Macartan Humphreys and Till Tietz and Alan Jacobs and Lily Medina},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"causalqueries","dir":"","previous_headings":"","what":"Make, Update, and Query Binary Causal Models","title":"Make, Update, and Query Binary Causal Models","text":"CausalQueries package lets declare binary causal models, update beliefs causal types given data calculate arbitrary estimands. Model definition makes use dagitty functionality. Updating implemented stan. See vignettes guide getting started. See guide using CausalQueries along many examples causal models","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Make, Update, and Query Binary Causal Models","text":"install latest stable release CausalQueries: install latest development release :","code":"install.packages(\"CausalQueries\") install.packages(\"remotes\") remotes::install_github(\"macartan/CausalQueries\")"},{"path":"/index.html","id":"causal-models","dir":"","previous_headings":"","what":"Causal models","title":"Make, Update, and Query Binary Causal Models","text":"Causal models defined : directed acyclic graph (DAG), provides set variables, causal ordering , set assumptions regarding conditional independence. arrow B change never induces change B. Functional forms. Functional forms describe causal relationships nodes. often make strong assumptions specify functional form; fortunately however variables categorical need functional forms usual sense. DAG implies set “causal types.” Units can classed together causal type respond way variables. instance, type might set units X=1 Y=1 X=1. set causal types grows rapidly number nodes number nodes pointing given node. setting imposing functional forms placing restrictions causal types: restrictions reduce complexity require substantive assumptions. example restriction might “Y monotonic X.” Priors. standard case, DAG plus restrictions imply set parameters combine form causal types. parameters want learn . learn first provide priors parameters. priors specified causal model complete (“probabilistic causal model”) ready inference. wrinkle: possible nodes related ways captured DAG. cases dotted curves sometimes placed nodes graph. possible specify possible unobservable confounding causal model. implications parameter space.","code":""},{"path":"/index.html","id":"inference","dir":"","previous_headings":"","what":"Inference","title":"Make, Update, and Query Binary Causal Models","text":"goal form beliefs parameters also substantive estimands: causal model hand data available nodes, possible make use generic stan model generates posteriors parameter vector. Given updated (prior) beliefs parameters possible calculate causal estimands inference causal model. example “probability X cause Y given X=1, Y=1 Z=1.”","code":""},{"path":"/index.html","id":"credits-etc","dir":"","previous_headings":"","what":"Credits etc","title":"Make, Update, and Query Binary Causal Models","text":"approach used CausalQueries generalization biqq models described “Mixing Methods: Bayesian Approach” (Humphreys Jacobs, 2015, https://doi.org/10.1017/S0003055415000453). conceptual extension makes use work probabilistic causal models described Pearl’s Causality (Pearl, 2009, https://doi.org/10.1017/CBO9780511803161). approach generating generic stan function can take data arbitrary models developed key contributions Jasper Cooper (http://jasper-cooper.com/) Georgiy Syunyaev (http://gsyunyaev.com/). Lily Medina (https://lilymedina.github.io/) magical work pulling together developing approaches characterizing confounding defining estimands. Julio Solis done wonders simplify specification priors.","code":""},{"path":"/reference/add_dots.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to fill in missing do operators in causal expression — add_dots","title":"Helper to fill in missing do operators in causal expression — add_dots","text":"Helper fill missing operators causal expression","code":""},{"path":"/reference/add_dots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to fill in missing do operators in causal expression — add_dots","text":"","code":"add_dots(q, model)"},{"path":"/reference/add_dots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to fill in missing do operators in causal expression — add_dots","text":"q character string. Causal query least one parent node missing operator. model causal_model. model object generated make_model.","code":""},{"path":"/reference/add_dots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to fill in missing do operators in causal expression — add_dots","text":"causal query expression parents nodes set either 0, 1 wildcard '.'.","code":""},{"path":"/reference/add_dots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper to fill in missing do operators in causal expression — add_dots","text":"","code":"# \\donttest{ model <- make_model('X -> Y <- M') CausalQueries:::add_dots('Y[X=1]', model) #> [1] \"Y[X=1, M = . ]\" CausalQueries:::add_dots('Y[]', model) #> [1] \"Y[M = . , X = . ]\" # }"},{"path":"/reference/add_wildcard.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a wildcard for every missing parent — add_wildcard","title":"Adds a wildcard for every missing parent — add_wildcard","text":"Adds wildcard every missing parent","code":""},{"path":"/reference/add_wildcard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a wildcard for every missing parent — add_wildcard","text":"","code":"add_wildcard(node, statement, parents, missing_parents)"},{"path":"/reference/add_wildcard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a wildcard for every missing parent — add_wildcard","text":"node character string. quoted name node. statement character string. quoted causal statement. parents vector characters. node's parents missing_parents vector characters.  node's missing parents","code":""},{"path":"/reference/add_wildcard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a wildcard for every missing parent — add_wildcard","text":"causal query expression parents nodes set either 0, 1 wildcard '.'","code":""},{"path":"/reference/all_data_types.html","id":null,"dir":"Reference","previous_headings":"","what":"All data types — all_data_types","title":"All data types — all_data_types","text":"Creates dataframe data types (including NA types) possible model.","code":""},{"path":"/reference/all_data_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All data types — all_data_types","text":"","code":"all_data_types(   model,   complete_data = FALSE,   possible_data = FALSE,   given = NULL )"},{"path":"/reference/all_data_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All data types — all_data_types","text":"model causal_model. model object generated make_model. complete_data Logical. `TRUE` returns complete data types (NAs). Defaults `FALSE`. possible_data Logical. `TRUE` returns complete data types (NAs) *possible* given model restrictions. Note principle intervention make observationally impossible data types arise. Defaults `FALSE`. given character.  quoted statement evaluates logical. Data conditional specific values.","code":""},{"path":"/reference/all_data_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All data types — all_data_types","text":"data.frame data types (including NA types) possible model.","code":""},{"path":"/reference/all_data_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All data types — all_data_types","text":"","code":"# \\donttest{ all_data_types(make_model('X -> Y')) #>      event  X  Y #> X0Y0  X0Y0  0  0 #> X1Y0  X1Y0  1  0 #> X0Y1  X0Y1  0  1 #> X1Y1  X1Y1  1  1 #> Y0      Y0 NA  0 #> Y1      Y1 NA  1 #> X0      X0  0 NA #> X1      X1  1 NA #> None  None NA NA model <- make_model('X -> Y') %>% set_restrictions(labels = list(Y = '00'), keep = TRUE)   all_data_types(model) #>      event  X  Y #> X0Y0  X0Y0  0  0 #> X1Y0  X1Y0  1  0 #> X0Y1  X0Y1  0  1 #> X1Y1  X1Y1  1  1 #> Y0      Y0 NA  0 #> Y1      Y1 NA  1 #> X0      X0  0 NA #> X1      X1  1 NA #> None  None NA NA   all_data_types(model, complete_data = TRUE) #>      event X Y #> X0Y0  X0Y0 0 0 #> X1Y0  X1Y0 1 0 #> X0Y1  X0Y1 0 1 #> X1Y1  X1Y1 1 1   all_data_types(model, possible_data = TRUE) #>      event X Y #> X0Y0  X0Y0 0 0 #> X1Y0  X1Y0 1 0   all_data_types(model, given  = 'X==1') #>      event X  Y #> X1Y0  X1Y0 1  0 #> X1Y1  X1Y1 1  1 #> X1      X1 1 NA   all_data_types(model, given  = 'X==1 & Y==1') #>      event X Y #> X1Y1  X1Y1 1 1 # }"},{"path":"/reference/CausalQueries-package.html","id":null,"dir":"Reference","previous_headings":"","what":"'CausalQueries' — CausalQueries-package","title":"'CausalQueries' — CausalQueries-package","text":"'CausalQueries' package lets generate binary causal models, update models given data calculate arbitrary causal queries. Model definition makes use dagitty syntax. Updating implemented 'stan'.","code":""},{"path":"/reference/CausalQueries_internal_inherit_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Create parameter documentation to inherit — CausalQueries_internal_inherit_params","title":"Create parameter documentation to inherit — CausalQueries_internal_inherit_params","text":"Create parameter documentation inherit","code":""},{"path":"/reference/CausalQueries_internal_inherit_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create parameter documentation to inherit — CausalQueries_internal_inherit_params","text":"","code":"CausalQueries_internal_inherit_params(   model,   query,   join_by,   parameters,   P,   A,   data,   data_events,   node,   statement,   using,   n_draws )"},{"path":"/reference/CausalQueries_internal_inherit_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create parameter documentation to inherit — CausalQueries_internal_inherit_params","text":"model causal_model. model object generated make_model. query character string. expression defining nodal types interrogate realise_outcomes join_by logical operator. Used connect causal statements: ('&') ('|'). Defaults '|'. parameters vector real numbers [0,1]. Values parameters specify (optional). default, parameters drawn model$parameters_df. P data.frame. Parameter matrix. required may provided avoid repeated computation simulations. data.frame. Ambiguity matrix. required may provided avoid repeated computation simulations. data data.frame.  Data nodes can take three values: 0, 1, NA. long form generated make_events data_events data.frame. must compatible nodes model. default columns event, strategy count. node character string. quoted name node. statement character string. quoted causal statement. using character string. indicates whether use `priors`, `posteriors` `parameters`. n_draws integer. prior distribution provided, generate prior distribution n_draws number draws.","code":""},{"path":"/reference/CausalQueries_internal_inherit_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create parameter documentation to inherit — CausalQueries_internal_inherit_params","text":"function return anything. used inherit roxygen documentation","code":""},{"path":"/reference/causal_type_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Names for causal types — causal_type_names","title":"Names for causal types — causal_type_names","text":"Names causal types","code":""},{"path":"/reference/causal_type_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names for causal types — causal_type_names","text":"","code":"causal_type_names(causal_types)"},{"path":"/reference/causal_type_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Names for causal types — causal_type_names","text":"causal_types data.frame whose rows containing 0-1 digits conform causal types.","code":""},{"path":"/reference/causal_type_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Names for causal types — causal_type_names","text":"data.frame whose rows contain character values conform causal type model.","code":""},{"path":"/reference/causal_type_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Names for causal types — causal_type_names","text":"","code":"# \\donttest{ model <- make_model('X -> Y') possible_types <- get_nodal_types(model) df <- data.frame(expand.grid(possible_types, stringsAsFactors = FALSE)) CausalQueries:::causal_type_names(df) #>    X   Y #> 1 X0 Y00 #> 2 X1 Y00 #> 3 X0 Y10 #> 4 X1 Y10 #> 5 X0 Y01 #> 6 X1 Y01 #> 7 X0 Y11 #> 8 X1 Y11 # }"},{"path":"/reference/check_string_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Check string_input — check_string_input","title":"Check string_input — check_string_input","text":"Check string_input","code":""},{"path":"/reference/check_string_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check string_input — check_string_input","text":"","code":"check_string_input(param_list = list(), call_name = NULL)"},{"path":"/reference/check_string_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check string_input — check_string_input","text":"param_list List parameters call_name Name call.","code":""},{"path":"/reference/check_string_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check string_input — check_string_input","text":"appropriate, returns error message.","code":""},{"path":"/reference/clean_condition.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean condition — clean_condition","title":"Clean condition — clean_condition","text":"Takes string specifying condition returns properly spaced string.","code":""},{"path":"/reference/clean_condition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean condition — clean_condition","text":"","code":"clean_condition(condition)"},{"path":"/reference/clean_condition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean condition — clean_condition","text":"condition character string. Condition refers unique position (possible outcome) nodal type.","code":""},{"path":"/reference/clean_condition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean condition — clean_condition","text":"properly spaced string.","code":""},{"path":"/reference/clean_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Check parameters sum to 1 in param_set; normalize if needed; add names if needed — clean_params","title":"Check parameters sum to 1 in param_set; normalize if needed; add names if needed — clean_params","text":"Check parameters sum 1 param_set; normalize needed; add names needed","code":""},{"path":"/reference/clean_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check parameters sum to 1 in param_set; normalize if needed; add names if needed — clean_params","text":"","code":"clean_params(parameters_df, warning = TRUE)"},{"path":"/reference/clean_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check parameters sum to 1 in param_set; normalize if needed; add names if needed — clean_params","text":"parameters_df data.frame. object first generated  make_model. warning Logical. Whether print warning () console. Defaults TRUE","code":""},{"path":"/reference/clean_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check parameters sum to 1 in param_set; normalize if needed; add names if needed — clean_params","text":"parameters data.frame  names parameters sum 1.","code":""},{"path":"/reference/clean_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check parameters sum to 1 in param_set; normalize if needed; add names if needed — clean_params","text":"","code":"# \\donttest{ model <- make_model('X->Y') model$parameters_df$param_value <- 1:6 CausalQueries:::clean_params(model$parameters_df, warning = TRUE) #> Parameters in set X do not sum to 1. Using normalized parameters #> Parameters in set Y do not sum to 1. Using normalized parameters #> # A tibble: 6 × 8 #>   param_names node    gen param_set nodal_type given param_value priors #>   <chr>       <chr> <int> <chr>     <chr>      <chr>       <dbl>  <dbl> #> 1 X.0         X         1 X         0          \"\"          0.333      1 #> 2 X.1         X         1 X         1          \"\"          0.667      1 #> 3 Y.00        Y         2 Y         00         \"\"          0.167      1 #> 4 Y.10        Y         2 Y         10         \"\"          0.222      1 #> 5 Y.01        Y         2 Y         01         \"\"          0.278      1 #> 6 Y.11        Y         2 Y         11         \"\"          0.333      1 # }"},{"path":"/reference/clean_param_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean parameter vector — clean_param_vector","title":"Clean parameter vector — clean_param_vector","text":"Clean parameter vector","code":""},{"path":"/reference/clean_param_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean parameter vector — clean_param_vector","text":"","code":"clean_param_vector(model, parameters)"},{"path":"/reference/clean_param_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean parameter vector — clean_param_vector","text":"model causal_model. model object generated make_model. parameters vector real numbers [0,1]. Values parameters specify (optional). default, parameters drawn model$parameters_df.","code":""},{"path":"/reference/clean_param_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean parameter vector — clean_param_vector","text":"vector named parameters summing 1.","code":""},{"path":"/reference/collapse_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Make compact data with data strategies — collapse_data","title":"Make compact data with data strategies — collapse_data","text":"Take `data.frame` return compact `data.frame`  event types strategies.","code":""},{"path":"/reference/collapse_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make compact data with data strategies — collapse_data","text":"","code":"collapse_data(   data,   model,   drop_NA = TRUE,   drop_family = FALSE,   summary = FALSE )"},{"path":"/reference/collapse_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make compact data with data strategies — collapse_data","text":"data data.frame.  Data nodes can take three values: 0, 1, NA. long form generated make_events model causal_model. model object generated make_model. drop_NA Logical. Whether exclude strategy families contain observed data. Exceptionally data provided, minimal data data first node returned. Defaults `TRUE` drop_family Logical. Whether remove column strategy output. Defaults `FALSE`. summary Logical. Whether return summary data. See details.  Defaults `FALSE`.","code":""},{"path":"/reference/collapse_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make compact data with data strategies — collapse_data","text":"vector data events summary = TRUE `collapse_data` returns list containing following components: data_events compact data.frame event types strategies. observed_events vector character strings specifying events observed data unobserved_events vector character strings specifying events observed data","code":""},{"path":"/reference/collapse_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make compact data with data strategies — collapse_data","text":"","code":"# \\donttest{  model <- make_model('X -> Y')  df <- data.frame(X = c(0,1,NA), Y = c(0,0,1))  df %>% collapse_data(model) #>   event strategy count #> 1  X0Y0       XY     1 #> 2  X1Y0       XY     1 #> 3  X0Y1       XY     0 #> 4  X1Y1       XY     0 #> 5    Y0        Y     0 #> 6    Y1        Y     1   collapse_data(df, model, drop_NA = FALSE) #>   event strategy count #> 1  X0Y0       XY     1 #> 2  X1Y0       XY     1 #> 3  X0Y1       XY     0 #> 4  X1Y1       XY     0 #> 5    Y0        Y     0 #> 6    Y1        Y     1 #> 7    X0        X     0 #> 8    X1        X     0  collapse_data(df, model, drop_family = TRUE) #>   event count #> 1  X0Y0     1 #> 2  X1Y0     1 #> 3  X0Y1     0 #> 4  X1Y1     0 #> 5    Y0     0 #> 6    Y1     1  collapse_data(df, model, summary = TRUE) #> $data_events #>   event strategy count #> 1  X0Y0       XY     1 #> 2  X1Y0       XY     1 #> 3  X0Y1       XY     0 #> 4  X1Y1       XY     0 #> 5    Y0        Y     0 #> 6    Y1        Y     1 #>  #> $observed_events #> [1] \"X0Y0\" \"X1Y0\" \"Y1\"   #>  #> $unobserved_events #> [1] \"X0Y1\" \"X1Y1\" \"Y0\"   #>   data <- make_data(model, n = 0) collapse_data(data, model) #>   event strategy count #> 1  X0Y0       XY     0 #> 2  X1Y0       XY     0 #> 3  X0Y1       XY     0 #> 4  X1Y1       XY     0  model <- make_model('X -> Y') %>% set_restrictions('X[]==1') df <- simulate_data(model, n = 10) df[1,1] <- '' collapse_data(df, model) #>   event strategy count #> 1  X0Y0       XY     5 #> 2  X0Y1       XY     4 #> 3    Y0        Y     1 #> 4    Y1        Y     0 data <- data.frame(X= 0:1) collapse_data(data, model) #> X1 data is inconsistent with model and ignored #>   event strategy count #> 1    X0        X     1  # }"},{"path":"/reference/collapse_nodal_types.html","id":null,"dir":"Reference","previous_headings":"","what":"collapse nodal types — collapse_nodal_types","title":"collapse nodal types — collapse_nodal_types","text":"collapse nodal types","code":""},{"path":"/reference/collapse_nodal_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"collapse nodal types — collapse_nodal_types","text":"","code":"collapse_nodal_types(nodal_types, include_node_names = FALSE)"},{"path":"/reference/collapse_nodal_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"collapse nodal types — collapse_nodal_types","text":"nodal_types list nodal types. include_node_names Logical, TRUE returns names X0, X1; otherwise returns 0, 1","code":""},{"path":"/reference/collapse_nodal_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"collapse nodal types — collapse_nodal_types","text":"list containing nodes nodal types vector form.","code":""},{"path":"/reference/collapse_nodal_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"collapse nodal types — collapse_nodal_types","text":"","code":"model <- make_model('X -> K -> Y') (nodal_types <- get_nodal_types(model , collapse = FALSE)) #> $X #>   NA #> 0  0 #> 1  1 #>  #> $K #>    0 1 #> 00 0 0 #> 10 1 0 #> 01 0 1 #> 11 1 1 #>  #> $Y #>    0 1 #> 00 0 0 #> 10 1 0 #> 01 0 1 #> 11 1 1 #>  CausalQueries:::collapse_nodal_types(nodal_types ) #> $X #> [1] \"0\" \"1\" #>  #> $K #> [1] \"00\" \"10\" \"01\" \"11\" #>  #> $Y #> [1] \"00\" \"10\" \"01\" \"11\" #>"},{"path":"/reference/complements.html","id":null,"dir":"Reference","previous_headings":"","what":"Make statement for complements — complements","title":"Make statement for complements — complements","text":"Generate statement X1, X1 complement production Y","code":""},{"path":"/reference/complements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make statement for complements — complements","text":"","code":"complements(X1, X2, Y)"},{"path":"/reference/complements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make statement for complements — complements","text":"X1 character. quoted name input node 1. X2 character. quoted name input node 2. Y character. quoted name outcome node.","code":""},{"path":"/reference/complements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make statement for complements — complements","text":"character statement class statement","code":""},{"path":[]},{"path":"/reference/complements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make statement for complements — complements","text":"","code":"# \\donttest{ complements('A', 'B', 'W') #> [1] \"((W[A =1, B = 1]) - (W[A = 0, B = 1])) > ((W[A =1, B = 0]) - (W[A = 0, B = 0]))\" #> attr(,\"class\") #> [1] \"statement\" # }"},{"path":"/reference/data_to_data.html","id":null,"dir":"Reference","previous_headings":"","what":"helper to generate a matrix mapping from names of M to names of A — data_to_data","title":"helper to generate a matrix mapping from names of M to names of A — data_to_data","text":"helper generate matrix mapping names M names ","code":""},{"path":"/reference/data_to_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper to generate a matrix mapping from names of M to names of A — data_to_data","text":"","code":"data_to_data(M, A)"},{"path":"/reference/data_to_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper to generate a matrix mapping from names of M to names of A — data_to_data","text":"M matrix matrix","code":""},{"path":"/reference/data_to_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"helper to generate a matrix mapping from names of M to names of A — data_to_data","text":"matrix","code":""},{"path":"/reference/data_type_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Data type names — data_type_names","title":"Data type names — data_type_names","text":"Provides names data types","code":""},{"path":"/reference/data_type_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data type names — data_type_names","text":"","code":"data_type_names(model, data)"},{"path":"/reference/data_type_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data type names — data_type_names","text":"model causal_model. model object generated make_model. data data.frame.  Data nodes can take three values: 0, 1, NA. long form generated make_events","code":""},{"path":"/reference/data_type_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data type names — data_type_names","text":"vector strings data types","code":""},{"path":"/reference/data_type_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data type names — data_type_names","text":"","code":"model <- make_model('X -> Y') data <- simulate_data(model, n = 2) data_type_names(model, data) #> [1] \"X0Y1\" \"X1Y1\""},{"path":"/reference/decreasing.html","id":null,"dir":"Reference","previous_headings":"","what":"Make monotonicity statement (negative) — decreasing","title":"Make monotonicity statement (negative) — decreasing","text":"Generate statement Y monotonic (decreasing) X","code":""},{"path":"/reference/decreasing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make monotonicity statement (negative) — decreasing","text":"","code":"decreasing(X, Y)"},{"path":"/reference/decreasing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make monotonicity statement (negative) — decreasing","text":"X character. quoted name input node Y character. quoted name outcome node","code":""},{"path":"/reference/decreasing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make monotonicity statement (negative) — decreasing","text":"character statement class statement","code":""},{"path":[]},{"path":"/reference/decreasing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make monotonicity statement (negative) — decreasing","text":"","code":"# \\donttest{ decreasing('A', 'B') #> [1] \"(B[A=1] < B[A=0])\" #> attr(,\"class\") #> [1] \"statement\" # }"},{"path":"/reference/default_stan_control.html","id":null,"dir":"Reference","previous_headings":"","what":"default_stan_control — default_stan_control","title":"default_stan_control — default_stan_control","text":"default_stan_control","code":""},{"path":"/reference/default_stan_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"default_stan_control — default_stan_control","text":"","code":"default_stan_control(adapt_delta = NULL, max_treedepth = 15L)"},{"path":"/reference/default_stan_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"default_stan_control — default_stan_control","text":"adapt_delta double 0 1. determines adapt_delta max_treedepth positive integer. determines  maximum_tree_depth","code":""},{"path":"/reference/default_stan_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"default_stan_control — default_stan_control","text":"list containing arguments passed stan","code":""},{"path":"/reference/default_stan_control.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"default_stan_control — default_stan_control","text":"Sets controls default unless otherwise specified.","code":""},{"path":"/reference/democracy_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Democracy Data — democracy_data","title":"Democracy Data — democracy_data","text":"dataset containing information inequality, democracy, mobilization, international pressure. Made devtools::use_data(democracy_data, CausalQueries)","code":""},{"path":"/reference/democracy_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Democracy Data — democracy_data","text":"","code":"democracy_data"},{"path":"/reference/democracy_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Democracy Data — democracy_data","text":"data frame 84 rows 5 nodes: Case Case D Democracy Inequality P International Pressure M Mobilization","code":""},{"path":"/reference/democracy_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Democracy Data — democracy_data","text":"https://www.cambridge.org/core/journals/american-political-science-review/article/inequality--regime-change-democratic-transitions---stability--democratic-rule/C39AAF4CF274445555FF41F7CC896AE3#fndtn-supplementary-materials/","code":""},{"path":"/reference/draw_causal_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a single causal type given a parameter vector — draw_causal_type","title":"Draw a single causal type given a parameter vector — draw_causal_type","text":"Output parameter dataframe recording parameters (case level priors) case level causal type.","code":""},{"path":"/reference/draw_causal_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a single causal type given a parameter vector — draw_causal_type","text":"","code":"draw_causal_type(model, ...)"},{"path":"/reference/draw_causal_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a single causal type given a parameter vector — draw_causal_type","text":"model causal_model. model object generated make_model. ... Arguments passed  `set_parameters`","code":""},{"path":"/reference/draw_causal_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a single causal type given a parameter vector — draw_causal_type","text":"","code":"# Simple draw using model's parameter vector make_model(\"X -> M -> Y\") %>% draw_causal_type(.) #> # A tibble: 10 × 9 #>    param_names node    gen param_set nodal_type given param_value priors #>    <chr>       <chr> <int> <chr>     <chr>      <chr>       <dbl>  <dbl> #>  1 X.0         X         1 X         0          \"\"           0.5       1 #>  2 X.1         X         1 X         1          \"\"           0.5       1 #>  3 M.00        M         2 M         00         \"\"           0.25      1 #>  4 M.10        M         2 M         10         \"\"           0.25      1 #>  5 M.01        M         2 M         01         \"\"           0.25      1 #>  6 M.11        M         2 M         11         \"\"           0.25      1 #>  7 Y.00        Y         3 Y         00         \"\"           0.25      1 #>  8 Y.10        Y         3 Y         10         \"\"           0.25      1 #>  9 Y.01        Y         3 Y         01         \"\"           0.25      1 #> 10 Y.11        Y         3 Y         11         \"\"           0.25      1 #> # ℹ 1 more variable: causal_type <int>  # Draw parameters from priors and draw type from parameters make_model(\"X -> M -> Y\") %>% draw_causal_type(., param_type = \"prior_draw\") #> # A tibble: 10 × 9 #>    param_names node    gen param_set nodal_type given param_value priors #>    <chr>       <chr> <int> <chr>     <chr>      <chr>       <dbl>  <dbl> #>  1 X.0         X         1 X         0          \"\"         0.832       1 #>  2 X.1         X         1 X         1          \"\"         0.168       1 #>  3 M.00        M         2 M         00         \"\"         0.675       1 #>  4 M.10        M         2 M         10         \"\"         0.196       1 #>  5 M.01        M         2 M         01         \"\"         0.0591      1 #>  6 M.11        M         2 M         11         \"\"         0.0704      1 #>  7 Y.00        Y         3 Y         00         \"\"         0.375       1 #>  8 Y.10        Y         3 Y         10         \"\"         0.0567      1 #>  9 Y.01        Y         3 Y         01         \"\"         0.0754      1 #> 10 Y.11        Y         3 Y         11         \"\"         0.493       1 #> # ℹ 1 more variable: causal_type <int>  # Draw type given specified parameters make_model(\"X -> M -> Y\") %>% draw_causal_type(., parameters = 1:10) #> # A tibble: 10 × 9 #>    param_names node    gen param_set nodal_type given param_value priors #>    <chr>       <chr> <int> <chr>     <chr>      <chr>       <dbl>  <dbl> #>  1 X.0         X         1 X         0          \"\"          0.333      1 #>  2 X.1         X         1 X         1          \"\"          0.667      1 #>  3 M.00        M         2 M         00         \"\"          0.167      1 #>  4 M.10        M         2 M         10         \"\"          0.222      1 #>  5 M.01        M         2 M         01         \"\"          0.278      1 #>  6 M.11        M         2 M         11         \"\"          0.333      1 #>  7 Y.00        Y         3 Y         00         \"\"          0.206      1 #>  8 Y.10        Y         3 Y         10         \"\"          0.235      1 #>  9 Y.01        Y         3 Y         01         \"\"          0.265      1 #> 10 Y.11        Y         3 Y         11         \"\"          0.294      1 #> # ℹ 1 more variable: causal_type <int>  # Define a causal type and reveal data model <- make_model(\"X -> Y; X <-> Y\") type <- model %>% draw_causal_type() make_data(model, parameters = type$causal_type) #>   X Y #> 1 1 1"},{"path":"/reference/drop_empty_families.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop empty families — drop_empty_families","title":"Drop empty families — drop_empty_families","text":"Drop empty families","code":""},{"path":"/reference/drop_empty_families.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop empty families — drop_empty_families","text":"","code":"drop_empty_families(data_events)"},{"path":"/reference/drop_empty_families.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop empty families — drop_empty_families","text":"data_events data.frame. must compatible nodes model. default columns event, strategy count.","code":""},{"path":"/reference/drop_empty_families.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop empty families — drop_empty_families","text":"Returns data events strategies (excluding  strategy families contain observed data)","code":""},{"path":"/reference/drop_empty_families.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop empty families — drop_empty_families","text":"","code":"# \\donttest{ data_events <- data.frame(event = c('X0Y0', 'Y0'), strategy = c('XY', 'Y'), count = 1:0) CausalQueries:::drop_empty_families(data_events) #>   event strategy count #> 1  X0Y0       XY     1  # }"},{"path":"/reference/expand_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand compact data object to data frame — expand_data","title":"Expand compact data object to data frame — expand_data","text":"Expand compact data object data frame","code":""},{"path":"/reference/expand_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand compact data object to data frame — expand_data","text":"","code":"expand_data(data_events = NULL, model)"},{"path":"/reference/expand_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand compact data object to data frame — expand_data","text":"data_events data.frame. must compatible nodes model. default columns event, strategy count. model causal_model. model object generated make_model.","code":""},{"path":"/reference/expand_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand compact data object to data frame — expand_data","text":"data.frame rows data observation","code":""},{"path":"/reference/expand_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand compact data object to data frame — expand_data","text":"","code":"# \\donttest{ model <- make_model('X->M->Y') make_events(model, n = 5) %>%   expand_data(model) #>   X M Y #> 1 0 0 1 #> 2 0 0 1 #> 3 1 0 0 #> 4 1 0 0 #> 5 1 1 1 make_events(model, n = 0) %>%   expand_data(model) #>    X  M  Y #> 1 NA NA NA  # }"},{"path":"/reference/expand_nodal_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to expand nodal expression — expand_nodal_expression","title":"Helper to expand nodal expression — expand_nodal_expression","text":"Helper expand nodal expression","code":""},{"path":"/reference/expand_nodal_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to expand nodal expression — expand_nodal_expression","text":"","code":"expand_nodal_expression(model, query, node, join_by = \"|\")"},{"path":"/reference/expand_nodal_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to expand nodal expression — expand_nodal_expression","text":"model causal_model. model object generated make_model. query character string. expression defining nodal types interrogate realise_outcomes node character string. quoted name node. join_by logical operator. Used connect causal statements: ('&') ('|'). Defaults '|'.","code":""},{"path":"/reference/expand_nodal_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to expand nodal expression — expand_nodal_expression","text":"nodal expression missing parents","code":""},{"path":"/reference/expand_wildcard.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand wildcard — expand_wildcard","title":"Expand wildcard — expand_wildcard","text":"Expand statement containing wildcard","code":""},{"path":"/reference/expand_wildcard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand wildcard — expand_wildcard","text":"","code":"expand_wildcard(to_expand, join_by = \"|\", verbose = TRUE)"},{"path":"/reference/expand_wildcard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand wildcard — expand_wildcard","text":"to_expand character vector length 1L. join_by logical operator. Used connect causal statements: ('&') ('|'). Defaults '|'. verbose Logical. Whether print expanded query console.","code":""},{"path":"/reference/expand_wildcard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand wildcard — expand_wildcard","text":"character string expanded expression. Wildcard '.' replaced 0 1.","code":""},{"path":"/reference/expand_wildcard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand wildcard — expand_wildcard","text":"","code":"# Position of parentheses matters for type of expansion # In the \"global expansion\" versions of the entire statement are joined expand_wildcard('(Y[X=1, M=.] > Y[X=1, M=.])') #> Generated expanded expression: #> (Y[X=1, M=0] > Y[X=1, M=0] | Y[X=1, M=1] > Y[X=1, M=1]) #> [1] \"(Y[X=1, M=0] > Y[X=1, M=0] | Y[X=1, M=1] > Y[X=1, M=1])\" # In the \"local expansion\" versions of indicated parts are joined expand_wildcard('(Y[X=1, M=.]) > (Y[X=1, M=.])') #> Generated expanded expression: #> (Y[X=1, M=0] | Y[X=1, M=1]) > (Y[X=1, M=0] | Y[X=1, M=1]) #> [1] \"(Y[X=1, M=0] | Y[X=1, M=1]) > (Y[X=1, M=0] | Y[X=1, M=1])\"  # If parentheses are missing global expansion used. expand_wildcard('Y[X=1, M=.] > Y[X=1, M=.]') #> No parentheses indicated. Global expansion assumed. See expand_wildcard. #> Generated expanded expression: #> Y[X=1, M=0] > Y[X=1, M=0] | Y[X=1, M=1] > Y[X=1, M=1] #> [1] \"Y[X=1, M=0] > Y[X=1, M=0] | Y[X=1, M=1] > Y[X=1, M=1]\"  # Expressions not requiring expansion are allowed expand_wildcard('(Y[X=1])') #> Generated expanded expression: #> (Y[X=1]) #> [1] \"(Y[X=1])\""},{"path":"/reference/get_ambiguities_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ambiguities matrix — get_ambiguities_matrix","title":"Get ambiguities matrix — get_ambiguities_matrix","text":"Return ambiguities matrix exists; otherwise calculate assuming confounding. ambiguities matrix maps causal types data types.","code":""},{"path":"/reference/get_ambiguities_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ambiguities matrix — get_ambiguities_matrix","text":"","code":"get_ambiguities_matrix(model)"},{"path":"/reference/get_ambiguities_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ambiguities matrix — get_ambiguities_matrix","text":"model causal_model. model object generated make_model.","code":""},{"path":"/reference/get_ambiguities_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ambiguities matrix — get_ambiguities_matrix","text":"data.frame. Causal types (rows) corresponding possible data realizations (columns).","code":""},{"path":"/reference/get_ambiguities_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ambiguities matrix — get_ambiguities_matrix","text":"","code":"model <- make_model('X -> Y') get_ambiguities_matrix(model = model) #>       X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y00    1    0    0    0 #> X1Y00    0    1    0    0 #> X0Y10    0    0    1    0 #> X1Y10    0    1    0    0 #> X0Y01    1    0    0    0 #> X1Y01    0    0    0    1 #> X0Y11    0    0    1    0 #> X1Y11    0    0    0    1"},{"path":"/reference/get_causal_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get causal types — get_causal_types","title":"Get causal types — get_causal_types","text":"Return data frame types produced combinations possible data produced DAG.","code":""},{"path":"/reference/get_causal_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get causal types — get_causal_types","text":"","code":"get_causal_types(model)"},{"path":"/reference/get_causal_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get causal types — get_causal_types","text":"model causal_model. model object generated make_model.","code":""},{"path":"/reference/get_causal_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get causal types — get_causal_types","text":"data.frame indicating causal types model","code":""},{"path":"/reference/get_causal_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get causal types — get_causal_types","text":"","code":"get_causal_types(make_model('X -> Y')) #>        X  Y #> X0.Y00 0 00 #> X1.Y00 1 00 #> X0.Y10 0 10 #> X1.Y10 1 10 #> X0.Y01 0 01 #> X1.Y01 1 01 #> X0.Y11 0 11 #> X1.Y11 1 11"},{"path":"/reference/get_data_families.html","id":null,"dir":"Reference","previous_headings":"","what":"get_data_families — get_data_families","title":"get_data_families — get_data_families","text":"Get possible data types","code":""},{"path":"/reference/get_data_families.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_data_families — get_data_families","text":"","code":"get_data_families(   model,   drop_impossible = TRUE,   drop_all_NA = TRUE,   mapping_only = FALSE )"},{"path":"/reference/get_data_families.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_data_families — get_data_families","text":"model causal_model. model object generated make_model. drop_impossible Logical. Whether drop data impossible given model restrictions. Defaults `TRUE`. drop_all_NA Logical. Whether drop row `NA`s. Defaults `TRUE` mapping_only Logical. Whether return data mapping matrix . Defaults `FALSE`.","code":""},{"path":"/reference/get_data_families.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_data_families — get_data_families","text":"Returns indices ambiguity matrix","code":""},{"path":"/reference/get_data_families.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_data_families — get_data_families","text":"","code":"# \\donttest{ CausalQueries:::get_data_families(model = make_model('X->Y')) #>      event strategy X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y0  X0Y0       XY    1    0    0    0 #> X1Y0  X1Y0       XY    0    1    0    0 #> X0Y1  X0Y1       XY    0    0    1    0 #> X1Y1  X1Y1       XY    0    0    0    1 #> Y0      Y0        Y    1    1    0    0 #> Y1      Y1        Y    0    0    1    1 #> X0      X0        X    1    0    1    0 #> X1      X1        X    0    1    0    1 CausalQueries:::get_data_families(model = make_model('X->Y'), mapping_only = TRUE) #>      X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y0    1    0    0    0 #> X1Y0    0    1    0    0 #> X0Y1    0    0    1    0 #> X1Y1    0    0    0    1 #> Y0      1    1    0    0 #> Y1      0    0    1    1 #> X0      1    0    1    0 #> X1      0    1    0    1 CausalQueries:::get_data_families(model = make_model('X-> M -> Y')) #>         event strategy X0M0Y0 X1M0Y0 X0M1Y0 X1M1Y0 X0M0Y1 X1M0Y1 X0M1Y1 X1M1Y1 #> X0M0Y0 X0M0Y0      XMY      1      0      0      0      0      0      0      0 #> X1M0Y0 X1M0Y0      XMY      0      1      0      0      0      0      0      0 #> X0M1Y0 X0M1Y0      XMY      0      0      1      0      0      0      0      0 #> X1M1Y0 X1M1Y0      XMY      0      0      0      1      0      0      0      0 #> X0M0Y1 X0M0Y1      XMY      0      0      0      0      1      0      0      0 #> X1M0Y1 X1M0Y1      XMY      0      0      0      0      0      1      0      0 #> X0M1Y1 X0M1Y1      XMY      0      0      0      0      0      0      1      0 #> X1M1Y1 X1M1Y1      XMY      0      0      0      0      0      0      0      1 #> M0Y0     M0Y0       MY      1      1      0      0      0      0      0      0 #> M1Y0     M1Y0       MY      0      0      1      1      0      0      0      0 #> M0Y1     M0Y1       MY      0      0      0      0      1      1      0      0 #> M1Y1     M1Y1       MY      0      0      0      0      0      0      1      1 #> X0Y0     X0Y0       XY      1      0      1      0      0      0      0      0 #> X1Y0     X1Y0       XY      0      1      0      1      0      0      0      0 #> X0Y1     X0Y1       XY      0      0      0      0      1      0      1      0 #> X1Y1     X1Y1       XY      0      0      0      0      0      1      0      1 #> X0M0     X0M0       XM      1      0      0      0      1      0      0      0 #> X1M0     X1M0       XM      0      1      0      0      0      1      0      0 #> X0M1     X0M1       XM      0      0      1      0      0      0      1      0 #> X1M1     X1M1       XM      0      0      0      1      0      0      0      1 #> Y0         Y0        Y      1      1      1      1      0      0      0      0 #> Y1         Y1        Y      0      0      0      0      1      1      1      1 #> M0         M0        M      1      1      0      0      1      1      0      0 #> M1         M1        M      0      0      1      1      0      0      1      1 #> X0         X0        X      1      0      1      0      1      0      1      0 #> X1         X1        X      0      1      0      1      0      1      0      1  # }"},{"path":"/reference/get_event_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw event probabilities — get_event_prob","title":"Draw event probabilities — get_event_prob","text":"Draw event probabilities","code":""},{"path":"/reference/get_event_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw event probabilities — get_event_prob","text":"","code":"get_event_prob(model, parameters = NULL, A = NULL, P = NULL, given = NULL)"},{"path":"/reference/get_event_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw event probabilities — get_event_prob","text":"model causal_model. model object generated make_model. parameters vector real numbers [0,1]. Values parameters specify (optional). default, parameters drawn model$parameters_df. data.frame. Ambiguity matrix. required may provided avoid repeated computation simulations. P data.frame. Parameter matrix. required may provided avoid repeated computation simulations. given string specifying known values nodes, e.g. \"X==1 & Y==1\"","code":""},{"path":"/reference/get_event_prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw event probabilities — get_event_prob","text":"array event probabilities","code":""},{"path":"/reference/get_event_prob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw event probabilities — get_event_prob","text":"","code":"# \\donttest{ model <- make_model('X -> Y') get_event_prob(model = model) #>      [,1] #> X0Y0 0.25 #> X1Y0 0.25 #> X0Y1 0.25 #> X1Y1 0.25 get_event_prob(model = model, parameters = rep(1, 6)) #>      [,1] #> X0Y0 0.25 #> X1Y0 0.25 #> X0Y1 0.25 #> X1Y1 0.25 get_event_prob(model = model, parameters = 1:6) #>           [,1] #> X0Y0 0.1481481 #> X1Y0 0.2592593 #> X0Y1 0.1851852 #> X1Y1 0.4074074 # }"},{"path":"/reference/get_nodal_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of types for nodes in a DAG — get_nodal_types","title":"Get list of types for nodes in a DAG — get_nodal_types","text":"type labels hard interpret large models, type list includes attribute help interpret . See  attr(types, interpret)","code":""},{"path":"/reference/get_nodal_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of types for nodes in a DAG — get_nodal_types","text":"","code":"get_nodal_types(model, collapse = TRUE)"},{"path":"/reference/get_nodal_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get list of types for nodes in a DAG — get_nodal_types","text":"model causal_model. model object generated make_model. collapse Logical. `TRUE`, shows unique nodal types node. `FALSE`, shows node matrix nodal types rows parent types columns, applicable. Defaults `TRUE`.","code":""},{"path":"/reference/get_nodal_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of types for nodes in a DAG — get_nodal_types","text":"named list nodal types parent DAG","code":""},{"path":"/reference/get_nodal_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get list of types for nodes in a DAG — get_nodal_types","text":"","code":"# \\donttest{ model <- make_model('X -> K -> Y') get_nodal_types(model) #> $X #> [1] \"0\" \"1\" #>  #> $K #> [1] \"00\" \"10\" \"01\" \"11\" #>  #> $Y #> [1] \"00\" \"10\" \"01\" \"11\" #>  #> attr(,\"interpret\") #> attr(,\"interpret\")$X #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> attr(,\"interpret\")$K #>   node position display interpretation #> 1    K        1   K[*]*      K | X = 0 #> 2    K        2   K*[*]      K | X = 1 #>  #> attr(,\"interpret\")$Y #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | K = 0 #> 2    Y        2   Y*[*]      Y | K = 1 #>   model <- make_model('X -> K -> Y') %>%    set_restrictions(statement = 'K[X=1]>K[X=0]') %>%    set_confound(list(K = 'Y[K=1]>Y[K=0]')) get_nodal_types(model) #> $X #> [1] \"0\" \"1\" #>  #> $K #> [1] \"00\" \"10\" \"11\" #>  #> $Y #> [1] \"00\" \"10\" \"01\" \"11\" #>  # }"},{"path":"/reference/get_parameter_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parameter matrix — get_parameter_matrix","title":"Get parameter matrix — get_parameter_matrix","text":"Return parameter matrix exists; otherwise calculate assuming confounding. parameter matrix  maps parameters causal types. models without confounding parameters correspond nodal types.","code":""},{"path":"/reference/get_parameter_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parameter matrix — get_parameter_matrix","text":"","code":"get_parameter_matrix(model)"},{"path":"/reference/get_parameter_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parameter matrix — get_parameter_matrix","text":"model model created make_model()","code":""},{"path":"/reference/get_parameter_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parameter matrix — get_parameter_matrix","text":"data.frame, parameter matrix, mapping parameters causal types","code":""},{"path":"/reference/get_parameter_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get parameter matrix — get_parameter_matrix","text":"","code":"model <- make_model('X -> Y') get_parameter_matrix(model) #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>      X0.Y00 X1.Y00 X0.Y10 X1.Y10 X0.Y01 X1.Y01 X0.Y11 X1.Y11 #> X.0       1      0      1      0      1      0      1      0 #> X.1       0      1      0      1      0      1      0      1 #> Y.00      1      1      0      0      0      0      0      0 #> Y.10      0      0      1      1      0      0      0      0 #> Y.01      0      0      0      0      1      1      0      0 #> Y.11      0      0      0      0      0      0      1      1 #>  #>   #>  param_set  (P) #>"},{"path":"/reference/get_parameter_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parameter names — get_parameter_names","title":"Get parameter names — get_parameter_names","text":"Parameter names taken P matrix model P  matrix provided","code":""},{"path":"/reference/get_parameter_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parameter names — get_parameter_names","text":"","code":"get_parameter_names(model, include_paramset = TRUE)"},{"path":"/reference/get_parameter_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parameter names — get_parameter_names","text":"model causal_model. model object generated make_model. include_paramset Logical. Whether include param set prefix part name.","code":""},{"path":"/reference/get_parameter_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parameter names — get_parameter_names","text":"character vector names parameters model","code":""},{"path":"/reference/get_parameter_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get parameter names — get_parameter_names","text":"","code":"get_parameter_names(make_model('X->Y')) #> [1] \"X.0\"  \"X.1\"  \"Y.00\" \"Y.10\" \"Y.01\" \"Y.11\""},{"path":"/reference/get_param_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a distribution of model parameters — get_param_dist","title":"Get a distribution of model parameters — get_param_dist","text":"Using parameters, priors, posteriors","code":""},{"path":"/reference/get_param_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a distribution of model parameters — get_param_dist","text":"","code":"get_param_dist(model, using, n_draws = 4000)"},{"path":"/reference/get_param_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a distribution of model parameters — get_param_dist","text":"model causal_model. model object generated make_model. using character string. indicates whether use `priors`, `posteriors` `parameters`. n_draws integer. prior distribution provided, generate prior distribution n_draws number draws.","code":""},{"path":"/reference/get_param_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a distribution of model parameters — get_param_dist","text":"matrix distribution parameters model","code":""},{"path":"/reference/get_param_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a distribution of model parameters — get_param_dist","text":"","code":"get_param_dist(model = make_model('X->Y'), using = 'priors', n_draws = 4) #> Prior distribution added to model #>            X.0         X.1       Y.00       Y.10       Y.01       Y.11 #> [1,] 0.9041764 0.095823593 0.20880451 0.43453442 0.01875343 0.33790764 #> [2,] 0.3714022 0.628597806 0.43856544 0.07459751 0.23724007 0.24959698 #> [3,] 0.4535682 0.546431803 0.08925218 0.11989902 0.21898265 0.57186616 #> [4,] 0.9978999 0.002100075 0.66586078 0.15122126 0.15526631 0.02765164 get_param_dist(model = make_model('X->Y'), using = 'parameters') #>  X.0  X.1 Y.00 Y.10 Y.01 Y.11  #> 0.50 0.50 0.25 0.25 0.25 0.25"},{"path":"/reference/get_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of parents of all nodes in a model — get_parents","title":"Get list of parents of all nodes in a model — get_parents","text":"Get list parents nodes model","code":""},{"path":"/reference/get_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of parents of all nodes in a model — get_parents","text":"","code":"get_parents(model)"},{"path":"/reference/get_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get list of parents of all nodes in a model — get_parents","text":"model causal_model. model object generated make_model.","code":""},{"path":"/reference/get_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of parents of all nodes in a model — get_parents","text":"list parents DAG","code":""},{"path":"/reference/get_parents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get list of parents of all nodes in a model — get_parents","text":"","code":"model <- make_model('X -> K -> Y') get_parents(model) #> $X #> character(0) #>  #> $K #> [1] \"X\" #>  #> $Y #> [1] \"K\" #>"},{"path":"/reference/get_parmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parmap: a matrix mapping from parameters to data types — get_parmap","title":"Get parmap: a matrix mapping from parameters to data types — get_parmap","text":"Gets parmap model, generates available.","code":""},{"path":"/reference/get_parmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parmap: a matrix mapping from parameters to data types — get_parmap","text":"","code":"get_parmap(model, A = NULL, P = NULL)"},{"path":"/reference/get_parmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parmap: a matrix mapping from parameters to data types — get_parmap","text":"model causal_model. model object generated make_model. data.frame. Ambiguity matrix. required may provided avoid repeated computation simulations. P data.frame. Parameter matrix. required may provided avoid repeated computation simulations.","code":""},{"path":"/reference/get_parmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parmap: a matrix mapping from parameters to data types — get_parmap","text":"matrix","code":""},{"path":"/reference/get_parmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get parmap: a matrix mapping from parameters to data types — get_parmap","text":"","code":"get_parmap(model = make_model('X->Y')) #>      X0Y0 X1Y0 X0Y1 X1Y1 #> X.0     1    0    1    0 #> X.1     0    1    0    1 #> Y.00    1    1    0    0 #> Y.10    0    1    1    0 #> Y.01    1    0    0    1 #> Y.11    0    0    1    1 #> attr(,\"map\") #>      X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y0    1    0    0    0 #> X1Y0    0    1    0    0 #> X0Y1    0    0    1    0 #> X1Y1    0    0    0    1"},{"path":"/reference/get_prior_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a prior distribution from priors — get_prior_distribution","title":"Get a prior distribution from priors — get_prior_distribution","text":"Add model `n_draws x n_param` matrix possible parameters.","code":""},{"path":"/reference/get_prior_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a prior distribution from priors — get_prior_distribution","text":"","code":"get_prior_distribution(model, n_draws = 4000)"},{"path":"/reference/get_prior_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a prior distribution from priors — get_prior_distribution","text":"model causal_model. model object generated make_model. n_draws scalar. Number draws.","code":""},{"path":"/reference/get_prior_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a prior distribution from priors — get_prior_distribution","text":"`data.frame` dimension `n_param`x `n_draws` possible lambda draws","code":""},{"path":[]},{"path":"/reference/get_prior_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a prior distribution from priors — get_prior_distribution","text":"","code":"make_model('X -> Y') %>% set_prior_distribution(n_draws = 5) %>% get_prior_distribution() #>            X.0        X.1      Y.00      Y.10       Y.01       Y.11 #> [1,] 0.5889893 0.41101066 0.2196318 0.3403948 0.37622602 0.06374733 #> [2,] 0.9449283 0.05507168 0.1213597 0.5640918 0.03871389 0.27583456 #> [3,] 0.3037616 0.69623843 0.3723452 0.2297764 0.15510404 0.24277441 #> [4,] 0.5500071 0.44999290 0.2151050 0.2611547 0.45096112 0.07277924 #> [5,] 0.2094106 0.79058936 0.1368863 0.6845503 0.10458618 0.07397717 make_model('X -> Y') %>% get_prior_distribution(3) #> The model does not have an attached prior distribution; generated on the fly #>            X.0        X.1       Y.00       Y.10      Y.01        Y.11 #> [1,] 0.9744537 0.02554631 0.05164694 0.19943934 0.4121551 0.336758573 #> [2,] 0.8252774 0.17472256 0.30562351 0.52557457 0.1685627 0.000239269 #> [3,] 0.9707738 0.02922616 0.13183756 0.02746763 0.6251911 0.215503722"},{"path":"/reference/get_query_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Look up query types — get_query_types","title":"Look up query types — get_query_types","text":"Find nodal causal types satisfied query.","code":""},{"path":"/reference/get_query_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Look up query types — get_query_types","text":"","code":"get_query_types(model, query, map = \"causal_type\", join_by = \"|\")"},{"path":"/reference/get_query_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Look up query types — get_query_types","text":"model causal_model. model object generated make_model. query character string. expression defining nodal types interrogate realise_outcomes map Types query. Either nodal_type causal_type. Default causal_type. join_by logical operator. Used connect causal statements: ('&') ('|'). Defaults '|'.","code":""},{"path":"/reference/get_query_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Look up query types — get_query_types","text":"list containing following elements types named vector logical values indicating whether nodal_type causal_type satisfy `query` query character string specified user expanded_query character string expanded query. differs `query` contains wildcard '.' evaluated_nodes Value nodes take given query node character string node whose nodal types queried type_list List causal types satisfied query","code":""},{"path":"/reference/get_query_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Look up query types — get_query_types","text":"","code":"model <- make_model('X -> M -> Y; X->Y') query <- '(Y[X=0] > Y[X=1])' # \\donttest{ get_query_types(model, query, map=\"nodal_type\") #>  #> Nodal types adding weight to query #>  #>  query :  (Y[X=0,M=0]>Y[X=1,M=0] | Y[X=0,M=1]>Y[X=1,M=1])  #>  #>  1000   0010 #>  1010   0110 #>  1110   1001 #>  1011    #>  #>  #>  Number of nodal types that add weight to query = 7 #>  Total number of nodal types related to Y = 16 get_query_types(model, query, map=\"causal_type\") #>  #> Causal types satisfying query's condition(s)   #>  #>  query =  (Y[X=0] > Y[X=1])  #>  #> X0.M00.Y1000  X1.M00.Y1000 #> X0.M01.Y1000  X1.M01.Y1000 #> X0.M01.Y1100  X1.M01.Y1100 #> X0.M10.Y0010  X1.M10.Y0010 #> X0.M11.Y0010  X1.M11.Y0010 #> X0.M00.Y1010  X1.M00.Y1010 #> X0.M10.Y1010  X1.M10.Y1010 #> X0.M01.Y1010  X1.M01.Y1010 #> X0.M11.Y1010  X1.M11.Y1010 #> X0.M11.Y0110  X1.M11.Y0110 #> X0.M01.Y1110  X1.M01.Y1110 #> X0.M11.Y1110  X1.M11.Y1110 #> X0.M00.Y1001  X1.M00.Y1001 #> X0.M10.Y0011  X1.M10.Y0011 #> X0.M00.Y1011  X1.M00.Y1011 #> X0.M10.Y1011  X1.M10.Y1011 #>  #>  #>  Number of causal types that meet condition(s) =  32 #>  Total number of causal types in model =  128 get_query_types(model, query) #>  #> Causal types satisfying query's condition(s)   #>  #>  query =  (Y[X=0] > Y[X=1])  #>  #> X0.M00.Y1000  X1.M00.Y1000 #> X0.M01.Y1000  X1.M01.Y1000 #> X0.M01.Y1100  X1.M01.Y1100 #> X0.M10.Y0010  X1.M10.Y0010 #> X0.M11.Y0010  X1.M11.Y0010 #> X0.M00.Y1010  X1.M00.Y1010 #> X0.M10.Y1010  X1.M10.Y1010 #> X0.M01.Y1010  X1.M01.Y1010 #> X0.M11.Y1010  X1.M11.Y1010 #> X0.M11.Y0110  X1.M11.Y0110 #> X0.M01.Y1110  X1.M01.Y1110 #> X0.M11.Y1110  X1.M11.Y1110 #> X0.M00.Y1001  X1.M00.Y1001 #> X0.M10.Y0011  X1.M10.Y0011 #> X0.M00.Y1011  X1.M00.Y1011 #> X0.M10.Y1011  X1.M10.Y1011 #>  #>  #>  Number of causal types that meet condition(s) =  32 #>  Total number of causal types in model =  128  # Examples with map = \"nodal_type\"  query <- '(Y[X=0, M = .] > Y[X=1, M = 0])' get_query_types(model, query, map=\"nodal_type\") #>  #> Nodal types adding weight to query #>  #>  query :  (Y[X=0,M=0]>Y[X=1,M=0] | Y[X=0,M=1]>Y[X=1,M=0])  #>  #>  1000   0010 #>  1010   1001 #>  0011   1011 #>  #>  #>  Number of nodal types that add weight to query = 6 #>  Total number of nodal types related to Y = 16  query <- '(Y[] == 1)' get_query_types(model, query, map=\"nodal_type\") #>  #> Nodal types adding weight to query #>  #>  query :  (Y[X=0,M=0]==1 | Y[X=1,M=0]==1 | Y[X=0,M=1]==1 | Y[X=1,M=1]==1)  #>  #>  1000   0100 #>  1100   0010 #>  1010   0110 #>  1110   0001 #>  1001   0101 #>  1101   0011 #>  1011   0111 #>  1111    #>  #>  #>  Number of nodal types that add weight to query = 15 #>  Total number of nodal types related to Y = 16 get_query_types(model, query, map=\"nodal_type\", join_by = '&') #>  #> Nodal types adding weight to query #>  #>  query :  (Y[X=0,M=0]==1 & Y[X=1,M=0]==1 & Y[X=0,M=1]==1 & Y[X=1,M=1]==1)  #>  #>  1111    #>  #>  #>  Number of nodal types that add weight to query = 1 #>  Total number of nodal types related to Y = 16  # Root nodes specified with [] get_query_types(model, '(X[] == 1)', map=\"nodal_type\") #>  #> Nodal types adding weight to query #>  #>  query :  (X[]==1)  #>  #>  1    #>  #>  #>  Number of nodal types that add weight to query = 1 #>  Total number of nodal types related to X = 2  query <- '(M[X=1] == M[X=0])' get_query_types(model, query, map=\"nodal_type\") #>  #> Nodal types adding weight to query #>  #>  query :  (M[X=1]==M[X=0])  #>  #>  00   11 #>  #>  #>  Number of nodal types that add weight to query = 2 #>  Total number of nodal types related to M = 4  # Helpers model <- make_model('M->Y; X->Y') query <- complements('X', 'M', 'Y') get_query_types(model, query, map=\"nodal_type\") #>  #> Nodal types adding weight to query #>  #>  query :  ((Y[X=1,M=1])-(Y[X=0,M=1]))>((Y[X=1,M=0])-(Y[X=0,M=0]))  #>  #>  1000   0001 #>  1001   1101 #>  1011    #>  #>  #>  Number of nodal types that add weight to query = 5 #>  Total number of nodal types related to Y = 16  # Examples with map = \"causal_type\"  model <- make_model('X -> M -> Y; X->Y') query <- 'Y[M=M[X=0], X=1]==1' get_query_types(model, query, map= \"causal_type\") #>  #> Causal types satisfying query's condition(s)   #>  #>  query =  Y[M=M[X=0], X=1]==1  #>  #> X0.M00.Y0100  X1.M00.Y0100 #> X0.M01.Y0100  X1.M01.Y0100 #> X0.M00.Y1100  X1.M00.Y1100 #> X0.M01.Y1100  X1.M01.Y1100 #> X0.M00.Y0110  X1.M00.Y0110 #> X0.M01.Y0110  X1.M01.Y0110 #> X0.M00.Y1110  X1.M00.Y1110 #> X0.M01.Y1110  X1.M01.Y1110 #> X0.M10.Y0001  X1.M10.Y0001 #> X0.M11.Y0001  X1.M11.Y0001 #> X0.M10.Y1001  X1.M10.Y1001 #> X0.M11.Y1001  X1.M11.Y1001 #> X0.M00.Y0101  X1.M00.Y0101 #> X0.M10.Y0101  X1.M10.Y0101 #> X0.M01.Y0101  X1.M01.Y0101 #> X0.M11.Y0101  X1.M11.Y0101 #> X0.M00.Y1101  X1.M00.Y1101 #> X0.M10.Y1101  X1.M10.Y1101 #> X0.M01.Y1101  X1.M01.Y1101 #> X0.M11.Y1101  X1.M11.Y1101 #> X0.M10.Y0011  X1.M10.Y0011 #> X0.M11.Y0011  X1.M11.Y0011 #> X0.M10.Y1011  X1.M10.Y1011 #> X0.M11.Y1011  X1.M11.Y1011 #> X0.M00.Y0111  X1.M00.Y0111 #> X0.M10.Y0111  X1.M10.Y0111 #> X0.M01.Y0111  X1.M01.Y0111 #> X0.M11.Y0111  X1.M11.Y0111 #> X0.M00.Y1111  X1.M00.Y1111 #> X0.M10.Y1111  X1.M10.Y1111 #> X0.M01.Y1111  X1.M01.Y1111 #> X0.M11.Y1111  X1.M11.Y1111 #>  #>  #>  Number of causal types that meet condition(s) =  64 #>  Total number of causal types in model =  128  query <- '(Y[X=1, M = 1] >  Y[X=0, M = 1]) & (Y[X=1, M = 0] >  Y[X=0, M = 0])' get_query_types(model, query, \"causal_type\") #>  #> Causal types satisfying query's condition(s)   #>  #>  query =  (Y[X=1, M = 1] >  Y[X=0, M = 1]) & (Y[X=1, M = 0] >  Y[X=0, M = 0])  #>  #> X0.M00.Y0101  X1.M00.Y0101 #> X0.M10.Y0101  X1.M10.Y0101 #> X0.M01.Y0101  X1.M01.Y0101 #> X0.M11.Y0101  X1.M11.Y0101 #>  #>  #>  Number of causal types that meet condition(s) =  8 #>  Total number of causal types in model =  128  query <- 'Y[X=1] == Y[X=0]' get_query_types(model, query, \"causal_type\") #>  #> Causal types satisfying query's condition(s)   #>  #>  query =  Y[X=1] == Y[X=0]  #>  #> X0.M00.Y0000  X1.M00.Y0000 #> X0.M10.Y0000  X1.M10.Y0000 #> X0.M01.Y0000  X1.M01.Y0000 #> X0.M11.Y0000  X1.M11.Y0000 #> X0.M10.Y1000  X1.M10.Y1000 #> X0.M11.Y1000  X1.M11.Y1000 #> X0.M01.Y0100  X1.M01.Y0100 #> X0.M11.Y0100  X1.M11.Y0100 #> X0.M00.Y1100  X1.M00.Y1100 #> X0.M11.Y1100  X1.M11.Y1100 #> X0.M00.Y0010  X1.M00.Y0010 #> X0.M01.Y0010  X1.M01.Y0010 #> X0.M10.Y0110  X1.M10.Y0110 #> X0.M01.Y0110  X1.M01.Y0110 #> X0.M00.Y1110  X1.M00.Y1110 #> X0.M10.Y1110  X1.M10.Y1110 #> X0.M00.Y0001  X1.M00.Y0001 #> X0.M10.Y0001  X1.M10.Y0001 #> X0.M10.Y1001  X1.M10.Y1001 #> X0.M01.Y1001  X1.M01.Y1001 #> X0.M00.Y1101  X1.M00.Y1101 #> X0.M01.Y1101  X1.M01.Y1101 #> X0.M00.Y0011  X1.M00.Y0011 #> X0.M11.Y0011  X1.M11.Y0011 #> X0.M01.Y1011  X1.M01.Y1011 #> X0.M11.Y1011  X1.M11.Y1011 #> X0.M10.Y0111  X1.M10.Y0111 #> X0.M11.Y0111  X1.M11.Y0111 #> X0.M00.Y1111  X1.M00.Y1111 #> X0.M10.Y1111  X1.M10.Y1111 #> X0.M01.Y1111  X1.M01.Y1111 #> X0.M11.Y1111  X1.M11.Y1111 #>  #>  #>  Number of causal types that meet condition(s) =  64 #>  Total number of causal types in model =  128  query <- '(X == 1) & (M==1) & (Y ==1) & (Y[X=0] ==1)' get_query_types(model, query, \"causal_type\") #>  #> Causal types satisfying query's condition(s)   #>  #>  query =  (X == 1) & (M==1) & (Y ==1) & (Y[X=0] ==1)  #>  #> X1.M01.Y1001  X1.M01.Y1101 #> X1.M11.Y0011  X1.M01.Y1011 #> X1.M11.Y1011  X1.M11.Y0111 #> X1.M01.Y1111  X1.M11.Y1111 #>  #>  #>  Number of causal types that meet condition(s) =  8 #>  Total number of causal types in model =  128  query <- '(Y[X = .]==1)' get_query_types(model, query, \"causal_type\") #> Generated expanded expression: #> (Y[X=0]==1 | Y[X=1]==1) #>  #> Causal types satisfying query's condition(s)   #>  #>  query =  (Y[X=0]==1 | Y[X=1]==1)  #>  #> X0.M00.Y1000  X1.M00.Y1000 #> X0.M01.Y1000  X1.M01.Y1000 #> X0.M00.Y0100  X1.M00.Y0100 #> X0.M10.Y0100  X1.M10.Y0100 #> X0.M00.Y1100  X1.M00.Y1100 #> X0.M10.Y1100  X1.M10.Y1100 #> X0.M01.Y1100  X1.M01.Y1100 #> X0.M10.Y0010  X1.M10.Y0010 #> X0.M11.Y0010  X1.M11.Y0010 #> X0.M00.Y1010  X1.M00.Y1010 #> X0.M10.Y1010  X1.M10.Y1010 #> X0.M01.Y1010  X1.M01.Y1010 #> X0.M11.Y1010  X1.M11.Y1010 #> X0.M00.Y0110  X1.M00.Y0110 #> X0.M10.Y0110  X1.M10.Y0110 #> X0.M11.Y0110  X1.M11.Y0110 #> X0.M00.Y1110  X1.M00.Y1110 #> X0.M10.Y1110  X1.M10.Y1110 #> X0.M01.Y1110  X1.M01.Y1110 #> X0.M11.Y1110  X1.M11.Y1110 #> X0.M01.Y0001  X1.M01.Y0001 #> X0.M11.Y0001  X1.M11.Y0001 #> X0.M00.Y1001  X1.M00.Y1001 #> X0.M01.Y1001  X1.M01.Y1001 #> X0.M11.Y1001  X1.M11.Y1001 #> X0.M00.Y0101  X1.M00.Y0101 #> X0.M10.Y0101  X1.M10.Y0101 #> X0.M01.Y0101  X1.M01.Y0101 #> X0.M11.Y0101  X1.M11.Y0101 #> X0.M00.Y1101  X1.M00.Y1101 #> X0.M10.Y1101  X1.M10.Y1101 #> X0.M01.Y1101  X1.M01.Y1101 #> X0.M11.Y1101  X1.M11.Y1101 #> X0.M10.Y0011  X1.M10.Y0011 #> X0.M01.Y0011  X1.M01.Y0011 #> X0.M11.Y0011  X1.M11.Y0011 #> X0.M00.Y1011  X1.M00.Y1011 #> X0.M10.Y1011  X1.M10.Y1011 #> X0.M01.Y1011  X1.M01.Y1011 #> X0.M11.Y1011  X1.M11.Y1011 #> X0.M00.Y0111  X1.M00.Y0111 #> X0.M10.Y0111  X1.M10.Y0111 #> X0.M01.Y0111  X1.M01.Y0111 #> X0.M11.Y0111  X1.M11.Y0111 #> X0.M00.Y1111  X1.M00.Y1111 #> X0.M10.Y1111  X1.M10.Y1111 #> X0.M01.Y1111  X1.M01.Y1111 #> X0.M11.Y1111  X1.M11.Y1111 #>  #>  #>  Number of causal types that meet condition(s) =  96 #>  Total number of causal types in model =  128 # }"},{"path":"/reference/get_type_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get type names — get_type_names","title":"Get type names — get_type_names","text":"Get type names","code":""},{"path":"/reference/get_type_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get type names — get_type_names","text":"","code":"get_type_names(nodal_types)"},{"path":"/reference/get_type_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get type names — get_type_names","text":"nodal_types Nodal types model. See get_nodal_types.","code":""},{"path":"/reference/get_type_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get type names — get_type_names","text":"vector containing causal type names","code":""},{"path":"/reference/get_type_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get type names — get_type_names","text":"","code":"model <- make_model('A->Y<-B') CausalQueries:::get_type_names(model$nodal_types) #>  [1] \"A.0\"    \"A.1\"    \"B.0\"    \"B.1\"    \"Y.0000\" \"Y.1000\" \"Y.0100\" \"Y.1100\" #>  [9] \"Y.0010\" \"Y.1010\" \"Y.0110\" \"Y.1110\" \"Y.0001\" \"Y.1001\" \"Y.0101\" \"Y.1101\" #> [17] \"Y.0011\" \"Y.1011\" \"Y.0111\" \"Y.1111\""},{"path":"/reference/get_type_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Get type probabilities — get_type_prob","title":"Get type probabilities — get_type_prob","text":"Gets probability vector causal types given single realization parameters, possibly drawn model priors.","code":""},{"path":"/reference/get_type_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get type probabilities — get_type_prob","text":"","code":"get_type_prob(model, P = NULL, parameters = NULL)"},{"path":"/reference/get_type_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get type probabilities — get_type_prob","text":"model causal_model. model object generated make_model. P data.frame. Parameter matrix. required may provided avoid repeated computation simulations. parameters vector real numbers [0,1]. Values parameters specify (optional). default, parameters drawn model$parameters_df.","code":""},{"path":"/reference/get_type_prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get type probabilities — get_type_prob","text":"vector probabilities vector causal types","code":""},{"path":"/reference/get_type_prob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get type probabilities — get_type_prob","text":"default, parameters drawn `using` argument (either priors, posteriors, model$parameters)","code":""},{"path":"/reference/get_type_prob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get type probabilities — get_type_prob","text":"","code":"get_type_prob(model = make_model('X->Y')) #> [1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125 get_type_prob(model = make_model('X->Y'), parameters = 1:6) #> [1] 0.05555556 0.11111111 0.07407407 0.14814815 0.09259259 0.18518519 0.11111111 #> [8] 0.22222222"},{"path":"/reference/get_type_prob_c.html","id":null,"dir":"Reference","previous_headings":"","what":"generates one draw from type probability distribution for each type in P — get_type_prob_c","title":"generates one draw from type probability distribution for each type in P — get_type_prob_c","text":"generates one draw type probability distribution type P","code":""},{"path":"/reference/get_type_prob_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generates one draw from type probability distribution for each type in P — get_type_prob_c","text":"","code":"get_type_prob_c(P, parameters)"},{"path":"/reference/get_type_prob_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generates one draw from type probability distribution for each type in P — get_type_prob_c","text":"P parameter_matrix parameters causal types parameters, priors posteriors","code":""},{"path":"/reference/get_type_prob_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generates one draw from type probability distribution for each type in P — get_type_prob_c","text":"draw type distribution type P","code":""},{"path":"/reference/get_type_prob_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw matrix of type probabilities, before or after estimation — get_type_prob_multiple","title":"Draw matrix of type probabilities, before or after estimation — get_type_prob_multiple","text":"Draw matrix type probabilities, estimation","code":""},{"path":"/reference/get_type_prob_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw matrix of type probabilities, before or after estimation — get_type_prob_multiple","text":"","code":"get_type_prob_multiple(   model,   using = \"priors\",   parameters = NULL,   n_draws = 4000,   param_dist = NULL,   P = NULL )"},{"path":"/reference/get_type_prob_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw matrix of type probabilities, before or after estimation — get_type_prob_multiple","text":"model causal_model. model object generated make_model. using character. indicates whether use `priors`, `posteriors` `parameters`. parameters vector real numbers [0,1]. Values parameters specify (optional). default, parameters drawn model$parameters_df. n_draws integer. prior distribution provided, generate prior distribution n_draws number draws. param_dist matrix.  Distribution parameters. Optional speed. P data.frame. Parameter matrix. required may provided avoid repeated computation simulations.","code":""},{"path":"/reference/get_type_prob_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw matrix of type probabilities, before or after estimation — get_type_prob_multiple","text":"matrix type probabilities.","code":""},{"path":"/reference/get_type_prob_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw matrix of type probabilities, before or after estimation — get_type_prob_multiple","text":"","code":"model <- make_model('X -> Y') get_type_prob_multiple(model, using = 'priors', n_draws = 3) #> Prior distribution added to model #>              [,1]        [,2]        [,3] #> X0.Y00 0.02008388 0.065371593 0.054998005 #> X1.Y00 0.07289497 0.000599481 0.129847040 #> X0.Y10 0.08605129 0.498767050 0.088659259 #> X1.Y10 0.31232546 0.004573873 0.209319271 #> X0.Y01 0.01000331 0.264470591 0.008429823 #> X1.Y01 0.03630728 0.002425291 0.019902315 #> X0.Y11 0.09986632 0.162303738 0.145448641 #> X1.Y11 0.36246750 0.001488384 0.343395646 get_type_prob_multiple(model, using = 'parameters', n_draws = 3) #> [1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125"},{"path":"/reference/get_type_prob_multiple_c.html","id":null,"dir":"Reference","previous_headings":"","what":"generates n draws from type probability distribution for each type in P — get_type_prob_multiple_c","title":"generates n draws from type probability distribution for each type in P — get_type_prob_multiple_c","text":"generates n draws type probability distribution type P","code":""},{"path":"/reference/get_type_prob_multiple_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generates n draws from type probability distribution for each type in P — get_type_prob_multiple_c","text":"","code":"get_type_prob_multiple_c(params, P)"},{"path":"/reference/get_type_prob_multiple_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generates n draws from type probability distribution for each type in P — get_type_prob_multiple_c","text":"params parameters, priors posteriors P parameter_matrix parameters causal types","code":""},{"path":"/reference/get_type_prob_multiple_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generates n draws from type probability distribution for each type in P — get_type_prob_multiple_c","text":"draws type distribution type P","code":""},{"path":"/reference/gsub_many.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursive substitution — gsub_many","title":"Recursive substitution — gsub_many","text":"Applies gsub() multiple patterns multiple replacements 1:1 mapping.","code":""},{"path":"/reference/gsub_many.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursive substitution — gsub_many","text":"","code":"gsub_many(x, pattern_vector, replacement_vector, ...)"},{"path":"/reference/gsub_many.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursive substitution — gsub_many","text":"x character vector. pattern_vector character vector. replacement_vector character vector. ... Options passed onto gsub() call.","code":""},{"path":"/reference/gsub_many.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursive substitution — gsub_many","text":"Returns multiple expression substituted elements","code":""},{"path":"/reference/includes_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Whether a query contains an exact string — includes_var","title":"Whether a query contains an exact string — includes_var","text":"Whether query contains exact string","code":""},{"path":"/reference/includes_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Whether a query contains an exact string — includes_var","text":"","code":"includes_var(var, query)"},{"path":"/reference/includes_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Whether a query contains an exact string — includes_var","text":"var Variable name query expression string format.","code":""},{"path":"/reference/includes_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Whether a query contains an exact string — includes_var","text":"logical expression indicating whether variable included query","code":""},{"path":"/reference/increasing.html","id":null,"dir":"Reference","previous_headings":"","what":"Make monotonicity statement (positive) — increasing","title":"Make monotonicity statement (positive) — increasing","text":"Generate statement Y monotonic (increasing) X","code":""},{"path":"/reference/increasing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make monotonicity statement (positive) — increasing","text":"","code":"increasing(X, Y)"},{"path":"/reference/increasing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make monotonicity statement (positive) — increasing","text":"X character. quoted name input node Y character. quoted name outcome node","code":""},{"path":"/reference/increasing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make monotonicity statement (positive) — increasing","text":"character statement class statement","code":""},{"path":[]},{"path":"/reference/increasing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make monotonicity statement (positive) — increasing","text":"","code":"# \\donttest{ increasing('A', 'B') #> [1] \"(B[A=1] > B[A=0])\" #> attr(,\"class\") #> [1] \"statement\" # }"},{"path":"/reference/interacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Make statement for any interaction — interacts","title":"Make statement for any interaction — interacts","text":"Generate statement X1, X1 interact production Y","code":""},{"path":"/reference/interacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make statement for any interaction — interacts","text":"","code":"interacts(X1, X2, Y)"},{"path":"/reference/interacts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make statement for any interaction — interacts","text":"X1 character. quoted name input node 1. X2 character. quoted name input node 2. Y character. quoted name outcome node.","code":""},{"path":"/reference/interacts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make statement for any interaction — interacts","text":"character statement class statement","code":""},{"path":[]},{"path":"/reference/interacts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make statement for any interaction — interacts","text":"","code":"# \\donttest{ interacts('A', 'B', 'W') #> [1] \"((W[A =1, B = 1]) - (W[A = 0, B = 1])) != ((W[A =1, B = 0]) - (W[A = 0, B = 0]))\" #> attr(,\"class\") #> [1] \"statement\" get_query_types(model = make_model('X-> Y <- W'),          query = interacts('X', 'W', 'Y'), map = \"causal_type\") #>  #> Causal types satisfying query's condition(s)   #>  #>  query =  ((Y[X =1, W = 1]) - (Y[X = 0, W = 1])) != ((Y[X =1, W = 0]) - (Y[X = 0, W = 0]))  #>  #> W0.X0.Y1000  W1.X0.Y1000 #> W0.X1.Y1000  W1.X1.Y1000 #> W0.X0.Y0100  W1.X0.Y0100 #> W0.X1.Y0100  W1.X1.Y0100 #> W0.X0.Y0010  W1.X0.Y0010 #> W0.X1.Y0010  W1.X1.Y0010 #> W0.X0.Y0110  W1.X0.Y0110 #> W0.X1.Y0110  W1.X1.Y0110 #> W0.X0.Y1110  W1.X0.Y1110 #> W0.X1.Y1110  W1.X1.Y1110 #> W0.X0.Y0001  W1.X0.Y0001 #> W0.X1.Y0001  W1.X1.Y0001 #> W0.X0.Y1001  W1.X0.Y1001 #> W0.X1.Y1001  W1.X1.Y1001 #> W0.X0.Y1101  W1.X0.Y1101 #> W0.X1.Y1101  W1.X1.Y1101 #> W0.X0.Y1011  W1.X0.Y1011 #> W0.X1.Y1011  W1.X1.Y1011 #> W0.X0.Y0111  W1.X0.Y0111 #> W0.X1.Y0111  W1.X1.Y0111 #>  #>  #>  Number of causal types that meet condition(s) =  40 #>  Total number of causal types in model =  64 # }"},{"path":"/reference/interpret_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpret or find position in nodal type — interpret_type","title":"Interpret or find position in nodal type — interpret_type","text":"Interprets position one digits (specified position) nodal type. Alternatively returns nodal type digit positions correspond one given condition.","code":""},{"path":"/reference/interpret_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpret or find position in nodal type — interpret_type","text":"","code":"interpret_type(model, condition = NULL, position = NULL)"},{"path":"/reference/interpret_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpret or find position in nodal type — interpret_type","text":"model causal_model. model object generated make_model. condition vector characters. Strings specifying child node, followed '|' (given) values parent nodes model. position named list integers. name name child node model, value vector digit positions node's nodal type interpreted. See `Details`.","code":""},{"path":"/reference/interpret_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpret or find position in nodal type — interpret_type","text":"named list interpretation positions digits nodal type","code":""},{"path":"/reference/interpret_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interpret or find position in nodal type — interpret_type","text":"node child node X k parents nodal type represented X followed 2^k digits. Argument position allows user interpret meaning one digit positions nodal type. example position = list(X = 1:3) return interpretation first three digits causal types X. Argument condition allows users query digit position nodal type providing instead values parent nodes given child. example, condition = 'X | Z=0 & R=1' returns digit position corresponds values X takes Z = 0 R = 1.","code":""},{"path":"/reference/interpret_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpret or find position in nodal type — interpret_type","text":"","code":"model <- make_model('R -> X; Z -> X; X -> Y') #Example using digit position interpret_type(model, position = list(X = c(3,4), Y = 1)) #> $X #>   node position display    interpretation #> 1    X        3 X**[*]* X | R = 0 & Z = 1 #> 2    X        4 X***[*] X | R = 1 & Z = 1 #>  #> $Y #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #>  #Example using condition interpret_type(model, condition = c('X | Z=0 & R=1', 'X | Z=0 & R=0')) #> $X #>   node position display    interpretation #> 1    X        1 X[*]*** X | R = 0 & Z = 0 #> 2    X        2 X*[*]** X | R = 1 & Z = 0 #>  #Return interpretation of all digit positions of all nodes interpret_type(model) #> $R #>   node position display interpretation #> 1    R       NA      R0          R = 0 #> 2    R       NA      R1          R = 1 #>  #> $Z #>   node position display interpretation #> 1    Z       NA      Z0          Z = 0 #> 2    Z       NA      Z1          Z = 1 #>  #> $X #>   node position display    interpretation #> 1    X        1 X[*]*** X | R = 0 & Z = 0 #> 2    X        2 X*[*]** X | R = 1 & Z = 0 #> 3    X        3 X**[*]* X | R = 0 & Z = 1 #> 4    X        4 X***[*] X | R = 1 & Z = 1 #>  #> $Y #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>"},{"path":"/reference/is_a_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether argument is a model — is_a_model","title":"Check whether argument is a model — is_a_model","text":"Check whether argument model","code":""},{"path":"/reference/is_a_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether argument is a model — is_a_model","text":"","code":"is_a_model(model)"},{"path":"/reference/is_a_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether argument is a model — is_a_model","text":"model causal_model. model object generated make_model.","code":""},{"path":"/reference/is_a_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether argument is a model — is_a_model","text":"error message argument model.","code":""},{"path":"/reference/is_improper.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a model is improper — is_improper","title":"Check whether a model is improper — is_improper","text":"Compute sum causal types probabilities. model flagged improper sum different one.","code":""},{"path":"/reference/is_improper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a model is improper — is_improper","text":"","code":"is_improper(model)"},{"path":"/reference/is_improper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a model is improper — is_improper","text":"model causal_model. model object generated make_model.","code":""},{"path":"/reference/is_improper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a model is improper — is_improper","text":"logical expression indicating whether model improper","code":""},{"path":"/reference/list_non_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a list with the nodes that are not directly pointing into a node — list_non_parents","title":"Returns a list with the nodes that are not directly pointing into a node — list_non_parents","text":"Returns list nodes directly pointing node","code":""},{"path":"/reference/list_non_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a list with the nodes that are not directly pointing into a node — list_non_parents","text":"","code":"list_non_parents(model, node)"},{"path":"/reference/list_non_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a list with the nodes that are not directly pointing into a node — list_non_parents","text":"model causal_model. model object generated make_model. node character string. quoted name node.","code":""},{"path":"/reference/list_non_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a list with the nodes that are not directly pointing into a node — list_non_parents","text":"Returns list nodes directly pointing node","code":""},{"path":"/reference/make_ambiguities_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Make ambiguities matrix — make_ambiguities_matrix","title":"Make ambiguities matrix — make_ambiguities_matrix","text":"Make ambiguities matrix. ambiguities matrix maps causal types data types.","code":""},{"path":"/reference/make_ambiguities_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make ambiguities matrix — make_ambiguities_matrix","text":"","code":"make_ambiguities_matrix(model)"},{"path":"/reference/make_ambiguities_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make ambiguities matrix — make_ambiguities_matrix","text":"model causal_model. model object generated make_model.","code":""},{"path":"/reference/make_ambiguities_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make ambiguities matrix — make_ambiguities_matrix","text":"data.frame. Types (rows) corresponding possible data realizations (columns).","code":""},{"path":"/reference/make_ambiguities_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make ambiguities matrix — make_ambiguities_matrix","text":"","code":"model <- make_model('X -> Y') CausalQueries:::make_ambiguities_matrix(model = model) #>       X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y00    1    0    0    0 #> X1Y00    0    1    0    0 #> X0Y10    0    0    1    0 #> X1Y10    0    1    0    0 #> X0Y01    1    0    0    0 #> X1Y01    0    0    0    1 #> X0Y11    0    0    1    0 #> X1Y11    0    0    0    1"},{"path":"/reference/make_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Make data — make_data","title":"Make data — make_data","text":"Make data","code":""},{"path":"/reference/make_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make data — make_data","text":"","code":"make_data(   model,   n = NULL,   parameters = NULL,   param_type = NULL,   nodes = NULL,   n_steps = NULL,   probs = NULL,   subsets = TRUE,   complete_data = NULL,   given = NULL,   verbose = TRUE,   ... )"},{"path":"/reference/make_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make data — make_data","text":"model causal_model. model object generated make_model. n Non negative integer. Number observations. provided inferred  largest n_step. parameters vector real numbers [0,1]. Values parameters specify (optional). default, parameters drawn model$parameters_df. param_type character. String specifying type parameters make (\"flat\", \"prior_mean\", \"posterior_mean\", \"prior_draw\", \"posterior_draw\", \"define\"). param_type set define use arguments passed make_priors; otherwise flat sets equal probabilities nodal type parameter set; prior_mean, prior_draw, posterior_mean, posterior_draw take parameters means draws prior posterior. nodes list. nodes observed step. NULL nodes observed. n_steps list. Number observations observed step probs list. Observation probabilities step subsets list. Strata within observations observed step. TRUE , otherwise expression evaluates logical condition. complete_data data.frame. Dataset complete observations. Optional. given string specifying known values nodes, e.g. \"X==1 & Y==1\" verbose Logical. TRUE prints step schedule. ... additional arguments can passed link{make_parameters}","code":""},{"path":"/reference/make_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make data — make_data","text":"data.frame simulated data.","code":""},{"path":"/reference/make_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make data — make_data","text":"Note default behavior take account whether node already observed determining whether select . One can however specifically request observation nodes previously observed.","code":""},{"path":"/reference/make_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make data — make_data","text":"","code":"# Simple draws model <- make_model(\"X -> M -> Y\") make_data(model) #>   X M Y #> 1 1 1 1 make_data(model, n = 3, nodes = c(\"X\",\"Y\")) #> # A tibble: 1 × 5 #>   node_names nodes     n_steps probs subsets #>   <chr>      <list>      <dbl> <dbl> <lgl>   #> 1 X, Y       <chr [2]>       3     1 TRUE    #>   X  M Y #> 1 0 NA 0 #> 2 1 NA 1 #> 3 1 NA 1 make_data(model, n = 3, param_type = \"prior_draw\") #>   X M Y #> 1 0 0 1 #> 2 0 1 0 #> 3 0 1 0 make_data(model, n = 10, param_type = \"define\", parameters =  0:9) #>    X M Y #> 1  1 0 1 #> 2  1 0 1 #> 3  1 1 0 #> 4  1 1 0 #> 5  1 1 0 #> 6  1 1 1 #> 7  1 1 1 #> 8  1 1 1 #> 9  1 1 1 #> 10 1 1 1  # Data Strategies # A strategy in which X, Y are observed for sure and M is observed # with 50% probability for X=1, Y=0 cases  model <- make_model(\"X -> M -> Y\") make_data(   model,   n = 8,   nodes = list(c(\"X\", \"Y\"), \"M\"),   probs = list(1, .5),   subsets = list(TRUE, \"X==1 & Y==0\")) #> # A tibble: 2 × 5 #>   node_names nodes     n_steps probs subsets     #>   <chr>      <list>    <lgl>   <dbl> <chr>       #> 1 X, Y       <chr [2]> NA        1   TRUE        #> 2 M          <chr [1]> NA        0.5 X==1 & Y==0 #>   X  M Y #> 1 0 NA 0 #> 2 0 NA 1 #> 3 0 NA 1 #> 4 0 NA 1 #> 5 1  0 0 #> 6 1 NA 0 #> 7 1 NA 1 #> 8 1 NA 1  # n not provided but inferred from largest n_step (not from sum of n_steps) make_data(   model,   nodes = list(c(\"X\", \"Y\"), \"M\"),   n_steps = list(5, 2)) #> # A tibble: 2 × 5 #>   node_names nodes     n_steps probs subsets #>   <chr>      <list>      <dbl> <dbl> <lgl>   #> 1 X, Y       <chr [2]>       5     1 TRUE    #> 2 M          <chr [1]>       2     1 TRUE    #>   X  M Y #> 1 0  0 1 #> 2 0 NA 0 #> 3 0  1 1 #> 4 1 NA 1 #> 5 1 NA 0  # Wide then deep   make_data(   model,   n = 8,   nodes = list(c(\"X\", \"Y\"), \"M\"),   subsets = list(TRUE, \"!is.na(X) & !is.na(Y)\"),   n_steps = list(6, 2)) #> # A tibble: 2 × 5 #>   node_names nodes     n_steps probs subsets               #>   <chr>      <list>      <dbl> <dbl> <chr>                 #> 1 X, Y       <chr [2]>       6     1 TRUE                  #> 2 M          <chr [1]>       2     1 !is.na(X) & !is.na(Y) #>    X  M  Y #> 1  0 NA  1 #> 2  0 NA  1 #> 3  0 NA  0 #> 4 NA NA NA #> 5  0 NA  1 #> 6  0  1  1 #> 7  1  0  1 #> 8 NA NA NA   make_data(   model,   n = 8,   nodes = list(c(\"X\", \"Y\"), c(\"X\", \"M\")),   subsets = list(TRUE, \"is.na(X)\"),   n_steps = list(3, 2)) #> # A tibble: 2 × 5 #>   node_names nodes     n_steps probs subsets  #>   <chr>      <list>      <dbl> <dbl> <chr>    #> 1 X, Y       <chr [2]>       3     1 TRUE     #> 2 X, M       <chr [2]>       2     1 is.na(X) #>    X  M  Y #> 1 NA NA NA #> 2  0  0 NA #> 3 NA NA NA #> 4 NA NA NA #> 5  1 NA  0 #> 6  1 NA  0 #> 7  1  1 NA #> 8  1 NA  1  # Example with probabilities at each step  make_data(   model,   n = 8,   nodes = list(c(\"X\", \"Y\"), c(\"X\", \"M\")),   subsets = list(TRUE, \"is.na(X)\"),   probs = list(.5, .2)) #> # A tibble: 2 × 5 #>   node_names nodes     n_steps probs subsets  #>   <chr>      <list>    <lgl>   <dbl> <chr>    #> 1 X, Y       <chr [2]> NA        0.5 TRUE     #> 2 X, M       <chr [2]> NA        0.2 is.na(X) #>    X  M  Y #> 1  0 NA  1 #> 2  0  0 NA #> 3  0 NA  0 #> 4 NA NA NA #> 5 NA NA NA #> 6  1 NA  0 #> 7 NA NA NA #> 8  1 NA  1  # Example with given data make_data(model, given = \"X==1 & Y==1\", n = 5) #>   X M Y #> 1 1 0 1 #> 2 1 0 1 #> 3 1 1 1 #> 4 1 1 1 #> 5 1 1 1"},{"path":"/reference/make_data_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate full dataset — make_data_single","title":"Generate full dataset — make_data_single","text":"Generate full dataset","code":""},{"path":"/reference/make_data_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate full dataset — make_data_single","text":"","code":"make_data_single(   model,   n = 1,   parameters = NULL,   param_type = NULL,   given = NULL,   w = NULL,   P = NULL,   A = NULL )"},{"path":"/reference/make_data_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate full dataset — make_data_single","text":"model causal_model. model object generated make_model. n integer. Number observations. parameters numeric vector. Values parameters may specified. default, parameters drawn priors. param_type character. String specifying type parameters make (\"flat\", \"prior_mean\", \"posterior_mean\", \"prior_draw\", \"posterior_draw\", \"define). param_type set define use arguments passed make_priors; otherwise flat sets equal probabilities nodal type parameter set; prior_mean, prior_draw, posterior_mean, posterior_draw take parameters means draws prior posterior. given string specifying known values nodes, e.g. \"X==1 & Y==1\" w Vector event probabilities can provided directly. useful speed repeated data draws. P matrix. Parameter matrix can used generate w w provided matrix. Ambiguity matrix can used generate w w provided","code":""},{"path":"/reference/make_data_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate full dataset — make_data_single","text":"data.frame simulated data.","code":""},{"path":"/reference/make_data_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate full dataset — make_data_single","text":"","code":"model <- make_model(\"X -> Y\")  # Simplest behavior uses by default the parameter vector contained in model CausalQueries:::make_data_single(model, n = 5) #>   X Y #> 1 0 0 #> 2 0 1 #> 3 1 0 #> 4 1 1 #> 5 1 1  CausalQueries:::make_data_single(model, n = 5, param_type = \"prior_draw\") #>   X Y #> 1 0 0 #> 2 0 0 #> 3 0 1 #> 4 1 0 #> 5 1 0  # Simulate multiple datasets. This is fastest if event probabilities (w) are  provided w <- get_event_prob(model) replicate(5, CausalQueries:::make_data_single(model, n = 5, w = w)) #>   [,1]      [,2]      [,3]      [,4]      [,5]      #> X numeric,5 numeric,5 numeric,5 numeric,5 numeric,5 #> Y numeric,5 numeric,5 numeric,5 numeric,5 numeric,5"},{"path":"/reference/make_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Make data in compact form — make_events","title":"Make data in compact form — make_events","text":"Draw n events given event probabilities. Draws full data . incomplete data see make_data.","code":""},{"path":"/reference/make_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make data in compact form — make_events","text":"","code":"make_events(   model,   n = 1,   w = NULL,   P = NULL,   A = NULL,   parameters = NULL,   param_type = NULL,   include_strategy = FALSE,   ... )"},{"path":"/reference/make_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make data in compact form — make_events","text":"model causal_model. model object generated make_model. n integer. Number observations. w numeric matrix. `n_parameters x 1` matrix event probabilities named rows. P data.frame. Parameter matrix. required may provided avoid repeated computation simulations. data.frame. Ambiguity matrix. required may provided avoid repeated computation simulations. parameters vector real numbers [0,1]. Values parameters specify (optional). default, parameters drawn model$parameters_df. param_type character. String specifying type parameters make ('flat', 'prior_mean', 'posterior_mean', 'prior_draw', 'posterior_draw', 'define). param_type set define use arguments passed make_priors; otherwise flat sets equal probabilities nodal type parameter set; prior_mean, prior_draw, posterior_mean, posterior_draw take parameters means draws prior posterior. include_strategy Logical. Whether include 'strategy' vector. Defaults FALSE. Strategy vector vary full data expected functions. ... Arguments passed make_priors param_type == define","code":""},{"path":"/reference/make_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make data in compact form — make_events","text":"data.frame events","code":""},{"path":"/reference/make_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make data in compact form — make_events","text":"","code":"# \\donttest{ model <- make_model('X -> Y') make_events(model = model) #>   event count #> 1  X0Y0     1 #> 2  X1Y0     0 #> 3  X0Y1     0 #> 4  X1Y1     0 make_events(model = model, param_type = 'prior_draw') #>   event count #> 1  X0Y0     0 #> 2  X1Y0     1 #> 3  X0Y1     0 #> 4  X1Y1     0 make_events(model = model, include_strategy = TRUE) #>   event strategy count #> 1  X0Y0       XY     0 #> 2  X1Y0       XY     0 #> 3  X0Y1       XY     0 #> 4  X1Y1       XY     1 # }"},{"path":"/reference/make_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a model — make_model","title":"Make a model — make_model","text":"make_model uses dagitty syntax functionality specify nodes edges graph. Implied causal types calculated default priors provided assumption confounding. Models can updated specification parameter matrix, P, providing restrictions causal types, /providing informative priors parameters. default setting causal model flat (uniform) priors parameters putting equal weight parameter within parameter set. can adjust set_priors set_parameters","code":""},{"path":"/reference/make_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a model — make_model","text":"","code":"make_model(statement, add_causal_types = TRUE, nodal_types = NULL)"},{"path":"/reference/make_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a model — make_model","text":"statement character. Statement describing causal relations using dagitty syntax. directed relations permitted. instance \"X -> Y\"  \"X1 -> Y <- X2; X1 -> X2\". add_causal_types Logical. Whether create attach causal types model. Defaults `TRUE`. nodal_types List nodal types associated model nodes","code":""},{"path":"/reference/make_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a model — make_model","text":"object class causal_model. object class \"causal_model\" list containing least following components: dag data.frame columns `parent``children` indicating nodes relate . node named list nodes model statement character vector statement defines model nodal_types Optional: named list nodal types model. List ordered according causal ordering nodes. NULL nodal types generated. FALSE, parameters data frame generated. parameters_df data.frame descriptive information parameters model","code":""},{"path":"/reference/make_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a model — make_model","text":"","code":"make_model(statement = \"X -> Y\") #>  #> Statement:  #> [1] \"X -> Y\" #>  #> DAG:  #>   parent children #> 1      X        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>  #>  #> Number of types by node #> X Y  #> 2 4  #>  #> Number of unit types:  8 modelXKY <- make_model(\"X -> K -> Y; X -> Y\")  # Example where cyclicaly dag attempted if (FALSE) {  modelXKX <- make_model(\"X -> K -> X\") }  # Examples with confounding model <- make_model(\"X->Y; X <-> Y\") model$P #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>          X0.Y00 X1.Y00 X0.Y10 X1.Y10 X0.Y01 X1.Y01 X0.Y11 X1.Y11 #> X.0           1      0      1      0      1      0      1      0 #> X.1           0      1      0      1      0      1      0      1 #> Y.00_X.0      1      0      0      0      0      0      0      0 #> Y.10_X.0      0      0      1      0      0      0      0      0 #> Y.01_X.0      0      0      0      0      1      0      0      0 #> Y.11_X.0      0      0      0      0      0      0      1      0 #> Y.00_X.1      0      1      0      0      0      0      0      0 #> Y.10_X.1      0      0      0      1      0      0      0      0 #> Y.01_X.1      0      0      0      0      0      1      0      0 #> Y.11_X.1      0      0      0      0      0      0      0      1 #>  #>   #>  param_set  (P) #>  X  Y.X.0  Y.X.1 model <- make_model(\"Y2 <- X -> Y1; X <-> Y1; X <-> Y2\") dim(model$P) #> [1] 18 32 model$P #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>           X0.Y100.Y200 X1.Y100.Y200 X0.Y110.Y200 X1.Y110.Y200 X0.Y101.Y200 #> X.0                  1            0            1            0            1 #> X.1                  0            1            0            1            0 #> Y1.00_X.0            1            0            0            0            0 #> Y1.10_X.0            0            0            1            0            0 #> Y1.01_X.0            0            0            0            0            1 #> Y1.11_X.0            0            0            0            0            0 #> Y1.00_X.1            0            1            0            0            0 #> Y1.10_X.1            0            0            0            1            0 #> Y1.01_X.1            0            0            0            0            0 #> Y1.11_X.1            0            0            0            0            0 #> Y2.00_X.0            1            0            1            0            1 #> Y2.10_X.0            0            0            0            0            0 #> Y2.01_X.0            0            0            0            0            0 #> Y2.11_X.0            0            0            0            0            0 #> Y2.00_X.1            0            1            0            1            0 #> Y2.10_X.1            0            0            0            0            0 #> Y2.01_X.1            0            0            0            0            0 #> Y2.11_X.1            0            0            0            0            0 #>           X1.Y101.Y200 X0.Y111.Y200 X1.Y111.Y200 X0.Y100.Y210 X1.Y100.Y210 #> X.0                  0            1            0            1            0 #> X.1                  1            0            1            0            1 #> Y1.00_X.0            0            0            0            1            0 #> Y1.10_X.0            0            0            0            0            0 #> Y1.01_X.0            0            0            0            0            0 #> Y1.11_X.0            0            1            0            0            0 #> Y1.00_X.1            0            0            0            0            1 #> Y1.10_X.1            0            0            0            0            0 #> Y1.01_X.1            1            0            0            0            0 #> Y1.11_X.1            0            0            1            0            0 #> Y2.00_X.0            0            1            0            0            0 #> Y2.10_X.0            0            0            0            1            0 #> Y2.01_X.0            0            0            0            0            0 #> Y2.11_X.0            0            0            0            0            0 #> Y2.00_X.1            1            0            1            0            0 #> Y2.10_X.1            0            0            0            0            1 #> Y2.01_X.1            0            0            0            0            0 #> Y2.11_X.1            0            0            0            0            0 #>           X0.Y110.Y210 X1.Y110.Y210 X0.Y101.Y210 X1.Y101.Y210 X0.Y111.Y210 #> X.0                  1            0            1            0            1 #> X.1                  0            1            0            1            0 #> Y1.00_X.0            0            0            0            0            0 #> Y1.10_X.0            1            0            0            0            0 #> Y1.01_X.0            0            0            1            0            0 #> Y1.11_X.0            0            0            0            0            1 #> Y1.00_X.1            0            0            0            0            0 #> Y1.10_X.1            0            1            0            0            0 #> Y1.01_X.1            0            0            0            1            0 #> Y1.11_X.1            0            0            0            0            0 #> Y2.00_X.0            0            0            0            0            0 #> Y2.10_X.0            1            0            1            0            1 #> Y2.01_X.0            0            0            0            0            0 #> Y2.11_X.0            0            0            0            0            0 #> Y2.00_X.1            0            0            0            0            0 #> Y2.10_X.1            0            1            0            1            0 #> Y2.01_X.1            0            0            0            0            0 #> Y2.11_X.1            0            0            0            0            0 #>           X1.Y111.Y210 X0.Y100.Y201 X1.Y100.Y201 X0.Y110.Y201 X1.Y110.Y201 #> X.0                  0            1            0            1            0 #> X.1                  1            0            1            0            1 #> Y1.00_X.0            0            1            0            0            0 #> Y1.10_X.0            0            0            0            1            0 #> Y1.01_X.0            0            0            0            0            0 #> Y1.11_X.0            0            0            0            0            0 #> Y1.00_X.1            0            0            1            0            0 #> Y1.10_X.1            0            0            0            0            1 #> Y1.01_X.1            0            0            0            0            0 #> Y1.11_X.1            1            0            0            0            0 #> Y2.00_X.0            0            0            0            0            0 #> Y2.10_X.0            0            0            0            0            0 #> Y2.01_X.0            0            1            0            1            0 #> Y2.11_X.0            0            0            0            0            0 #> Y2.00_X.1            0            0            0            0            0 #> Y2.10_X.1            1            0            0            0            0 #> Y2.01_X.1            0            0            1            0            1 #> Y2.11_X.1            0            0            0            0            0 #>           X0.Y101.Y201 X1.Y101.Y201 X0.Y111.Y201 X1.Y111.Y201 X0.Y100.Y211 #> X.0                  1            0            1            0            1 #> X.1                  0            1            0            1            0 #> Y1.00_X.0            0            0            0            0            1 #> Y1.10_X.0            0            0            0            0            0 #> Y1.01_X.0            1            0            0            0            0 #> Y1.11_X.0            0            0            1            0            0 #> Y1.00_X.1            0            0            0            0            0 #> Y1.10_X.1            0            0            0            0            0 #> Y1.01_X.1            0            1            0            0            0 #> Y1.11_X.1            0            0            0            1            0 #> Y2.00_X.0            0            0            0            0            0 #> Y2.10_X.0            0            0            0            0            0 #> Y2.01_X.0            1            0            1            0            0 #> Y2.11_X.0            0            0            0            0            1 #> Y2.00_X.1            0            0            0            0            0 #> Y2.10_X.1            0            0            0            0            0 #> Y2.01_X.1            0            1            0            1            0 #> Y2.11_X.1            0            0            0            0            0 #>           X1.Y100.Y211 X0.Y110.Y211 X1.Y110.Y211 X0.Y101.Y211 X1.Y101.Y211 #> X.0                  0            1            0            1            0 #> X.1                  1            0            1            0            1 #> Y1.00_X.0            0            0            0            0            0 #> Y1.10_X.0            0            1            0            0            0 #> Y1.01_X.0            0            0            0            1            0 #> Y1.11_X.0            0            0            0            0            0 #> Y1.00_X.1            1            0            0            0            0 #> Y1.10_X.1            0            0            1            0            0 #> Y1.01_X.1            0            0            0            0            1 #> Y1.11_X.1            0            0            0            0            0 #> Y2.00_X.0            0            0            0            0            0 #> Y2.10_X.0            0            0            0            0            0 #> Y2.01_X.0            0            0            0            0            0 #> Y2.11_X.0            0            1            0            1            0 #> Y2.00_X.1            0            0            0            0            0 #> Y2.10_X.1            0            0            0            0            0 #> Y2.01_X.1            0            0            0            0            0 #> Y2.11_X.1            1            0            1            0            1 #>           X0.Y111.Y211 X1.Y111.Y211 #> X.0                  1            0 #> X.1                  0            1 #> Y1.00_X.0            0            0 #> Y1.10_X.0            0            0 #> Y1.01_X.0            0            0 #> Y1.11_X.0            1            0 #> Y1.00_X.1            0            0 #> Y1.10_X.1            0            0 #> Y1.01_X.1            0            0 #> Y1.11_X.1            0            1 #> Y2.00_X.0            0            0 #> Y2.10_X.0            0            0 #> Y2.01_X.0            0            0 #> Y2.11_X.0            1            0 #> Y2.00_X.1            0            0 #> Y2.10_X.1            0            0 #> Y2.01_X.1            0            0 #> Y2.11_X.1            0            1 #>  #>   #>  param_set  (P) #>  X  Y1.X.0  Y1.X.1  Y2.X.0  Y2.X.1 model <- make_model(\"X1 -> Y <- X2; X1 <-> Y; X2 <-> Y\") dim(model$P) #> [1] 68 64 model$parameters_df #> # A tibble: 68 × 8 #>    param_names      node    gen param_set   nodal_type given  param_value priors #>    <chr>            <chr> <int> <chr>       <chr>      <chr>        <dbl>  <dbl> #>  1 X1.0             X1        1 X1          0          \"\"          0.5         1 #>  2 X1.1             X1        1 X1          1          \"\"          0.5         1 #>  3 X2.0             X2        2 X2          0          \"\"          0.5         1 #>  4 X2.1             X2        2 X2          1          \"\"          0.5         1 #>  5 Y.0000_X1.0_X2.0 Y         3 Y.X1.0.X2.0 0000       \"X1.0…      0.0625      1 #>  6 Y.1000_X1.0_X2.0 Y         3 Y.X1.0.X2.0 1000       \"X1.0…      0.0625      1 #>  7 Y.0100_X1.0_X2.0 Y         3 Y.X1.0.X2.0 0100       \"X1.0…      0.0625      1 #>  8 Y.1100_X1.0_X2.0 Y         3 Y.X1.0.X2.0 1100       \"X1.0…      0.0625      1 #>  9 Y.0010_X1.0_X2.0 Y         3 Y.X1.0.X2.0 0010       \"X1.0…      0.0625      1 #> 10 Y.1010_X1.0_X2.0 Y         3 Y.X1.0.X2.0 1010       \"X1.0…      0.0625      1 #> # ℹ 58 more rows  # A single node graph is also possible model <- make_model(\"X\")  # Unconnected nodes cannot if (FALSE) {  model <- make_model(\"X <-> Y\") }  nodal_types <-   list(     A = c(\"0\",\"1\"),     B = c(\"0\",\"1\"),     C = c(\"0\",\"1\"),     D = c(\"0\",\"1\"),     E = c(\"0\",\"1\"),     Y = c(       \"00000000000000000000000000000000\",       \"01010101010101010101010101010101\",       \"00110011001100110011001100110011\",       \"00001111000011110000111100001111\",       \"00000000111111110000000011111111\",       \"00000000000000001111111111111111\",       \"11111111111111111111111111111111\" ))  make_model(\"A -> Y; B ->Y; C->Y; D->Y; E->Y\",           nodal_types = nodal_types)$parameters_df #> # A tibble: 17 × 8 #>    param_names         node    gen param_set nodal_type given param_value priors #>    <chr>               <chr> <int> <chr>     <chr>      <chr>       <dbl>  <dbl> #>  1 A.0                 A         1 A         0          \"\"          0.5        1 #>  2 A.1                 A         1 A         1          \"\"          0.5        1 #>  3 B.0                 B         2 B         0          \"\"          0.5        1 #>  4 B.1                 B         2 B         1          \"\"          0.5        1 #>  5 C.0                 C         3 C         0          \"\"          0.5        1 #>  6 C.1                 C         3 C         1          \"\"          0.5        1 #>  7 D.0                 D         4 D         0          \"\"          0.5        1 #>  8 D.1                 D         4 D         1          \"\"          0.5        1 #>  9 E.0                 E         5 E         0          \"\"          0.5        1 #> 10 E.1                 E         5 E         1          \"\"          0.5        1 #> 11 Y.0000000000000000… Y         6 Y         000000000… \"\"          0.143      1 #> 12 Y.0101010101010101… Y         6 Y         010101010… \"\"          0.143      1 #> 13 Y.0011001100110011… Y         6 Y         001100110… \"\"          0.143      1 #> 14 Y.0000111100001111… Y         6 Y         000011110… \"\"          0.143      1 #> 15 Y.0000000011111111… Y         6 Y         000000001… \"\"          0.143      1 #> 16 Y.0000000000000000… Y         6 Y         000000000… \"\"          0.143      1 #> 17 Y.1111111111111111… Y         6 Y         111111111… \"\"          0.143      1  nodal_types = list(Y = c(\"01\", \"10\"), Z = c(\"0\", \"1\")) make_model(\"Z -> Y\", nodal_types = nodal_types)$parameters_df #> Ordering of provided nodal types is being altered to match generation #> # A tibble: 4 × 8 #>   param_names node    gen param_set nodal_type given param_value priors #>   <chr>       <chr> <int> <chr>     <chr>      <chr>       <dbl>  <dbl> #> 1 Z.0         Z         1 Z         0          \"\"            0.5      1 #> 2 Z.1         Z         1 Z         1          \"\"            0.5      1 #> 3 Y.01        Y         2 Y         01         \"\"            0.5      1 #> 4 Y.10        Y         2 Y         10         \"\"            0.5      1 make_model(\"Z -> Y\", nodal_types = FALSE)$parents_df #> Model not properly defined: nodal_types should be NULL or specified for all nodes in model:  Z, Y #>   node  root parents #> 1    Z  TRUE       0 #> 2    Y FALSE       1"},{"path":"/reference/make_nodal_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Make nodal types — make_nodal_types","title":"Make nodal types — make_nodal_types","text":"Make nodal types","code":""},{"path":"/reference/make_nodal_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make nodal types — make_nodal_types","text":"","code":"make_nodal_types(model, include_node_names = FALSE)"},{"path":"/reference/make_nodal_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make nodal types — make_nodal_types","text":"model causal_model. model object generated make_model. include_node_names Logical. `TRUE` returns names form X0, X1; otherwise returns 0, 1. Defaults `FALSE`","code":""},{"path":"/reference/make_nodal_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make nodal types — make_nodal_types","text":"named list containing nodal types node","code":""},{"path":"/reference/make_nodal_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make nodal types — make_nodal_types","text":"","code":"# \\donttest{ model <- make_model('X -> K -> Y') CausalQueries:::make_nodal_types(model) #> $X #>     #> 0 0 #> 1 1 #>  #> $K #>    0 1 #> 00 0 0 #> 10 1 0 #> 01 0 1 #> 11 1 1 #>  #> $Y #>    0 1 #> 00 0 0 #> 10 1 0 #> 01 0 1 #> 11 1 1 #>  # }"},{"path":"/reference/make_parameters_df.html","id":null,"dir":"Reference","previous_headings":"","what":"function to make a parameters_df from nodal types — make_parameters_df","title":"function to make a parameters_df from nodal types — make_parameters_df","text":"function make parameters_df nodal types","code":""},{"path":"/reference/make_parameters_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to make a parameters_df from nodal types — make_parameters_df","text":"","code":"make_parameters_df(nodal_types)"},{"path":"/reference/make_parameters_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to make a parameters_df from nodal types — make_parameters_df","text":"nodal_types list nodal types","code":""},{"path":"/reference/make_parameters_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"function to make a parameters_df from nodal types — make_parameters_df","text":"","code":"make_parameters_df(list(X = \"1\", Y = c(\"01\", \"10\"))) #> # A tibble: 3 × 8 #>   param_names node    gen param_set nodal_type given param_value priors #>   <chr>       <chr> <int> <chr>     <chr>      <chr>       <dbl>  <dbl> #> 1 X.1         X         1 X         1          \"\"            1        1 #> 2 Y.01        Y         2 Y         01         \"\"            0.5      1 #> 3 Y.10        Y         2 Y         10         \"\"            0.5      1"},{"path":"/reference/make_parameter_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Make parameter matrix — make_parameter_matrix","title":"Make parameter matrix — make_parameter_matrix","text":"Calculate parameter matrix assuming confounding. parameter matrix maps parameters causal types. models without confounding parameters correspond nodal types.","code":""},{"path":"/reference/make_parameter_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make parameter matrix — make_parameter_matrix","text":"","code":"make_parameter_matrix(model)"},{"path":"/reference/make_parameter_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make parameter matrix — make_parameter_matrix","text":"model causal_model. model object generated make_model.","code":""},{"path":"/reference/make_parameter_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make parameter matrix — make_parameter_matrix","text":"data.frame, parameter matrix, mapping parameters causal types","code":""},{"path":"/reference/make_parameter_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make parameter matrix — make_parameter_matrix","text":"","code":"model <- make_model('X -> Y') make_parameter_matrix(model) #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>      X0.Y00 X1.Y00 X0.Y10 X1.Y10 X0.Y01 X1.Y01 X0.Y11 X1.Y11 #> X.0       1      0      1      0      1      0      1      0 #> X.1       0      1      0      1      0      1      0      1 #> Y.00      1      1      0      0      0      0      0      0 #> Y.10      0      0      1      1      0      0      0      0 #> Y.01      0      0      0      0      1      1      0      0 #> Y.11      0      0      0      0      0      0      1      1 #>  #>   #>  param_set  (P) #>"},{"path":"/reference/make_parmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make parmap: a matrix mapping from parameters to data types — make_parmap","title":"Make parmap: a matrix mapping from parameters to data types — make_parmap","text":"Generates matrix row per parameter column per data type.","code":""},{"path":"/reference/make_parmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make parmap: a matrix mapping from parameters to data types — make_parmap","text":"","code":"make_parmap(model, A = NULL, P = NULL)"},{"path":"/reference/make_parmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make parmap: a matrix mapping from parameters to data types — make_parmap","text":"model causal_model. model object generated make_model. data.frame. Ambiguity matrix. required may provided avoid repeated computation simulations. P data.frame. Parameter matrix. required may provided avoid repeated computation simulations.","code":""},{"path":"/reference/make_parmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make parmap: a matrix mapping from parameters to data types — make_parmap","text":"matrix","code":""},{"path":"/reference/make_parmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make parmap: a matrix mapping from parameters to data types — make_parmap","text":"","code":"make_parmap(model = make_model('X->Y')) #>      X0Y0 X1Y0 X0Y1 X1Y1 #> X.0     1    0    1    0 #> X.1     0    1    0    1 #> Y.00    1    1    0    0 #> Y.10    0    1    1    0 #> Y.01    1    0    0    1 #> Y.11    0    0    1    1 #> attr(,\"map\") #>      X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y0    1    0    0    0 #> X1Y0    0    1    0    0 #> X0Y1    0    0    1    0 #> X1Y1    0    0    0    1 make_parmap(model = make_model('X->Y; X<->Y')) #>          X0Y0 X0Y1 X1Y0 X1Y1 #> X.0         1    1    0    0 #> X.1         0    0    1    1 #> Y.00_X.0    1    0    0    0 #> Y.10_X.0    0    1    0    0 #> Y.01_X.0    1    0    0    0 #> Y.11_X.0    0    1    0    0 #> Y.00_X.1    0    0    1    0 #> Y.10_X.1    0    0    1    0 #> Y.01_X.1    0    0    0    1 #> Y.11_X.1    0    0    0    1 #> attr(,\"map\") #>      X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y0    1    0    0    0 #> X0Y1    0    0    1    0 #> X1Y0    0    1    0    0 #> X1Y1    0    0    0    1 make_parmap(model = make_model('X->Y; X<->Y')) %>% attr(\"map\") #>      X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y0    1    0    0    0 #> X0Y1    0    0    1    0 #> X1Y0    0    1    0    0 #> X1Y1    0    0    0    1 make_parmap(model = make_model('X -> M -> Y; X <-> Y')) #>          X0M0Y0 X0M0Y1 X0M1Y0 X0M1Y1 X1M0Y0 X1M0Y1 X1M1Y0 X1M1Y1 #> X.0           1      1      1      1      0      0      0      0 #> X.1           0      0      0      0      1      1      1      1 #> M.00          1      1      0      0      1      1      0      0 #> M.10          0      0      1      1      1      1      0      0 #> M.01          1      1      0      0      0      0      1      1 #> M.11          0      0      1      1      0      0      1      1 #> Y.00_X.0      1      0      1      0      0      0      0      0 #> Y.10_X.0      0      1      1      0      0      0      0      0 #> Y.01_X.0      1      0      0      1      0      0      0      0 #> Y.11_X.0      0      1      0      1      0      0      0      0 #> Y.00_X.1      0      0      0      0      1      0      1      0 #> Y.10_X.1      0      0      0      0      0      1      1      0 #> Y.01_X.1      0      0      0      0      1      0      0      1 #> Y.11_X.1      0      0      0      0      0      1      0      1 #> attr(,\"map\") #>        X0M0Y0 X1M0Y0 X0M1Y0 X1M1Y0 X0M0Y1 X1M0Y1 X0M1Y1 X1M1Y1 #> X0M0Y0      1      0      0      0      0      0      0      0 #> X0M0Y1      0      0      0      0      1      0      0      0 #> X0M1Y0      0      0      1      0      0      0      0      0 #> X0M1Y1      0      0      0      0      0      0      1      0 #> X1M0Y0      0      1      0      0      0      0      0      0 #> X1M0Y1      0      0      0      0      0      1      0      0 #> X1M1Y0      0      0      0      1      0      0      0      0 #> X1M1Y1      0      0      0      0      0      0      0      1 make_parmap(model = make_model('X -> M -> Y; M <-> Y')) #>           X0M0Y0 X0M0Y0 X0M0Y1 X0M0Y1 X0M1Y0 X0M1Y0 X0M1Y1 X0M1Y1 X1M0Y0 X1M0Y0 #> X.0            1      1      1      1      1      1      1      1      0      0 #> X.1            0      0      0      0      0      0      0      0      1      1 #> M.00           1      0      1      0      0      0      0      0      1      0 #> M.10           0      0      0      0      1      0      1      0      0      1 #> M.01           0      1      0      1      0      0      0      0      0      0 #> M.11           0      0      0      0      0      1      0      1      0      0 #> Y.00_M.00      1      0      0      0      0      0      0      0      1      0 #> Y.10_M.00      0      0      1      0      0      0      0      0      0      0 #> Y.01_M.00      1      0      0      0      0      0      0      0      1      0 #> Y.11_M.00      0      0      1      0      0      0      0      0      0      0 #> Y.00_M.01      0      1      0      0      0      0      0      0      0      0 #> Y.10_M.01      0      0      0      1      0      0      0      0      0      0 #> Y.01_M.01      0      1      0      0      0      0      0      0      0      0 #> Y.11_M.01      0      0      0      1      0      0      0      0      0      0 #> Y.00_M.10      0      0      0      0      1      0      0      0      0      1 #> Y.10_M.10      0      0      0      0      1      0      0      0      0      0 #> Y.01_M.10      0      0      0      0      0      0      1      0      0      1 #> Y.11_M.10      0      0      0      0      0      0      1      0      0      0 #> Y.00_M.11      0      0      0      0      0      1      0      0      0      0 #> Y.10_M.11      0      0      0      0      0      1      0      0      0      0 #> Y.01_M.11      0      0      0      0      0      0      0      1      0      0 #> Y.11_M.11      0      0      0      0      0      0      0      1      0      0 #>           X1M0Y1 X1M0Y1 X1M1Y0 X1M1Y0 X1M1Y1 X1M1Y1 #> X.0            0      0      0      0      0      0 #> X.1            1      1      1      1      1      1 #> M.00           1      0      0      0      0      0 #> M.10           0      1      0      0      0      0 #> M.01           0      0      1      0      1      0 #> M.11           0      0      0      1      0      1 #> Y.00_M.00      0      0      0      0      0      0 #> Y.10_M.00      1      0      0      0      0      0 #> Y.01_M.00      0      0      0      0      0      0 #> Y.11_M.00      1      0      0      0      0      0 #> Y.00_M.01      0      0      1      0      0      0 #> Y.10_M.01      0      0      1      0      0      0 #> Y.01_M.01      0      0      0      0      1      0 #> Y.11_M.01      0      0      0      0      1      0 #> Y.00_M.10      0      0      0      0      0      0 #> Y.10_M.10      0      1      0      0      0      0 #> Y.01_M.10      0      0      0      0      0      0 #> Y.11_M.10      0      1      0      0      0      0 #> Y.00_M.11      0      0      0      1      0      0 #> Y.10_M.11      0      0      0      1      0      0 #> Y.01_M.11      0      0      0      0      0      1 #> Y.11_M.11      0      0      0      0      0      1 #> attr(,\"map\") #>        X0M0Y0 X1M0Y0 X0M1Y0 X1M1Y0 X0M0Y1 X1M0Y1 X0M1Y1 X1M1Y1 #> X0M0Y0      1      0      0      0      0      0      0      0 #> X0M0Y0      1      0      0      0      0      0      0      0 #> X0M0Y1      0      0      0      0      1      0      0      0 #> X0M0Y1      0      0      0      0      1      0      0      0 #> X0M1Y0      0      0      1      0      0      0      0      0 #> X0M1Y0      0      0      1      0      0      0      0      0 #> X0M1Y1      0      0      0      0      0      0      1      0 #> X0M1Y1      0      0      0      0      0      0      1      0 #> X1M0Y0      0      1      0      0      0      0      0      0 #> X1M0Y0      0      1      0      0      0      0      0      0 #> X1M0Y1      0      0      0      0      0      1      0      0 #> X1M0Y1      0      0      0      0      0      1      0      0 #> X1M1Y0      0      0      0      1      0      0      0      0 #> X1M1Y0      0      0      0      1      0      0      0      0 #> X1M1Y1      0      0      0      0      0      0      0      1 #> X1M1Y1      0      0      0      0      0      0      0      1 model <- make_model('X -> M -> Y; M <-> Y; X <-> M') make_parmap(model) #>               X0M0Y0 X0M0Y0 X0M0Y1 X0M0Y1 X0M1Y0 X0M1Y0 X0M1Y1 X0M1Y1 X1M0Y0 #> X.0                1      1      1      1      1      1      1      1      0 #> X.1                0      0      0      0      0      0      0      0      1 #> M.00_X.0           1      0      1      0      0      0      0      0      0 #> M.10_X.0           0      0      0      0      1      0      1      0      0 #> M.01_X.0           0      1      0      1      0      0      0      0      0 #> M.11_X.0           0      0      0      0      0      1      0      1      0 #> M.00_X.1           0      0      0      0      0      0      0      0      1 #> M.10_X.1           0      0      0      0      0      0      0      0      0 #> M.01_X.1           0      0      0      0      0      0      0      0      0 #> M.11_X.1           0      0      0      0      0      0      0      0      0 #> Y.00_M.00_X.0      1      0      0      0      0      0      0      0      0 #> Y.10_M.00_X.0      0      0      1      0      0      0      0      0      0 #> Y.01_M.00_X.0      1      0      0      0      0      0      0      0      0 #> Y.11_M.00_X.0      0      0      1      0      0      0      0      0      0 #> Y.00_M.00_X.1      0      0      0      0      0      0      0      0      1 #> Y.10_M.00_X.1      0      0      0      0      0      0      0      0      0 #> Y.01_M.00_X.1      0      0      0      0      0      0      0      0      1 #> Y.11_M.00_X.1      0      0      0      0      0      0      0      0      0 #> Y.00_M.01_X.0      0      1      0      0      0      0      0      0      0 #> Y.10_M.01_X.0      0      0      0      1      0      0      0      0      0 #> Y.01_M.01_X.0      0      1      0      0      0      0      0      0      0 #> Y.11_M.01_X.0      0      0      0      1      0      0      0      0      0 #> Y.00_M.01_X.1      0      0      0      0      0      0      0      0      0 #> Y.10_M.01_X.1      0      0      0      0      0      0      0      0      0 #> Y.01_M.01_X.1      0      0      0      0      0      0      0      0      0 #> Y.11_M.01_X.1      0      0      0      0      0      0      0      0      0 #> Y.00_M.10_X.0      0      0      0      0      1      0      0      0      0 #> Y.10_M.10_X.0      0      0      0      0      1      0      0      0      0 #> Y.01_M.10_X.0      0      0      0      0      0      0      1      0      0 #> Y.11_M.10_X.0      0      0      0      0      0      0      1      0      0 #> Y.00_M.10_X.1      0      0      0      0      0      0      0      0      0 #> Y.10_M.10_X.1      0      0      0      0      0      0      0      0      0 #> Y.01_M.10_X.1      0      0      0      0      0      0      0      0      0 #> Y.11_M.10_X.1      0      0      0      0      0      0      0      0      0 #> Y.00_M.11_X.0      0      0      0      0      0      1      0      0      0 #> Y.10_M.11_X.0      0      0      0      0      0      1      0      0      0 #> Y.01_M.11_X.0      0      0      0      0      0      0      0      1      0 #> Y.11_M.11_X.0      0      0      0      0      0      0      0      1      0 #> Y.00_M.11_X.1      0      0      0      0      0      0      0      0      0 #> Y.10_M.11_X.1      0      0      0      0      0      0      0      0      0 #> Y.01_M.11_X.1      0      0      0      0      0      0      0      0      0 #> Y.11_M.11_X.1      0      0      0      0      0      0      0      0      0 #>               X1M0Y0 X1M0Y1 X1M0Y1 X1M1Y0 X1M1Y0 X1M1Y1 X1M1Y1 #> X.0                0      0      0      0      0      0      0 #> X.1                1      1      1      1      1      1      1 #> M.00_X.0           0      0      0      0      0      0      0 #> M.10_X.0           0      0      0      0      0      0      0 #> M.01_X.0           0      0      0      0      0      0      0 #> M.11_X.0           0      0      0      0      0      0      0 #> M.00_X.1           0      1      0      0      0      0      0 #> M.10_X.1           1      0      1      0      0      0      0 #> M.01_X.1           0      0      0      1      0      1      0 #> M.11_X.1           0      0      0      0      1      0      1 #> Y.00_M.00_X.0      0      0      0      0      0      0      0 #> Y.10_M.00_X.0      0      0      0      0      0      0      0 #> Y.01_M.00_X.0      0      0      0      0      0      0      0 #> Y.11_M.00_X.0      0      0      0      0      0      0      0 #> Y.00_M.00_X.1      0      0      0      0      0      0      0 #> Y.10_M.00_X.1      0      1      0      0      0      0      0 #> Y.01_M.00_X.1      0      0      0      0      0      0      0 #> Y.11_M.00_X.1      0      1      0      0      0      0      0 #> Y.00_M.01_X.0      0      0      0      0      0      0      0 #> Y.10_M.01_X.0      0      0      0      0      0      0      0 #> Y.01_M.01_X.0      0      0      0      0      0      0      0 #> Y.11_M.01_X.0      0      0      0      0      0      0      0 #> Y.00_M.01_X.1      0      0      0      1      0      0      0 #> Y.10_M.01_X.1      0      0      0      1      0      0      0 #> Y.01_M.01_X.1      0      0      0      0      0      1      0 #> Y.11_M.01_X.1      0      0      0      0      0      1      0 #> Y.00_M.10_X.0      0      0      0      0      0      0      0 #> Y.10_M.10_X.0      0      0      0      0      0      0      0 #> Y.01_M.10_X.0      0      0      0      0      0      0      0 #> Y.11_M.10_X.0      0      0      0      0      0      0      0 #> Y.00_M.10_X.1      1      0      0      0      0      0      0 #> Y.10_M.10_X.1      0      0      1      0      0      0      0 #> Y.01_M.10_X.1      1      0      0      0      0      0      0 #> Y.11_M.10_X.1      0      0      1      0      0      0      0 #> Y.00_M.11_X.0      0      0      0      0      0      0      0 #> Y.10_M.11_X.0      0      0      0      0      0      0      0 #> Y.01_M.11_X.0      0      0      0      0      0      0      0 #> Y.11_M.11_X.0      0      0      0      0      0      0      0 #> Y.00_M.11_X.1      0      0      0      0      1      0      0 #> Y.10_M.11_X.1      0      0      0      0      1      0      0 #> Y.01_M.11_X.1      0      0      0      0      0      0      1 #> Y.11_M.11_X.1      0      0      0      0      0      0      1 #> attr(,\"map\") #>        X0M0Y0 X1M0Y0 X0M1Y0 X1M1Y0 X0M0Y1 X1M0Y1 X0M1Y1 X1M1Y1 #> X0M0Y0      1      0      0      0      0      0      0      0 #> X0M0Y0      1      0      0      0      0      0      0      0 #> X0M0Y1      0      0      0      0      1      0      0      0 #> X0M0Y1      0      0      0      0      1      0      0      0 #> X0M1Y0      0      0      1      0      0      0      0      0 #> X0M1Y0      0      0      1      0      0      0      0      0 #> X0M1Y1      0      0      0      0      0      0      1      0 #> X0M1Y1      0      0      0      0      0      0      1      0 #> X1M0Y0      0      1      0      0      0      0      0      0 #> X1M0Y0      0      1      0      0      0      0      0      0 #> X1M0Y1      0      0      0      0      0      1      0      0 #> X1M0Y1      0      0      0      0      0      1      0      0 #> X1M1Y0      0      0      0      1      0      0      0      0 #> X1M1Y0      0      0      0      1      0      0      0      0 #> X1M1Y1      0      0      0      0      0      0      0      1 #> X1M1Y1      0      0      0      0      0      0      0      1 make_parmap(model) %>% attr(\"map\") #>        X0M0Y0 X1M0Y0 X0M1Y0 X1M1Y0 X0M0Y1 X1M0Y1 X0M1Y1 X1M1Y1 #> X0M0Y0      1      0      0      0      0      0      0      0 #> X0M0Y0      1      0      0      0      0      0      0      0 #> X0M0Y1      0      0      0      0      1      0      0      0 #> X0M0Y1      0      0      0      0      1      0      0      0 #> X0M1Y0      0      0      1      0      0      0      0      0 #> X0M1Y0      0      0      1      0      0      0      0      0 #> X0M1Y1      0      0      0      0      0      0      1      0 #> X0M1Y1      0      0      0      0      0      0      1      0 #> X1M0Y0      0      1      0      0      0      0      0      0 #> X1M0Y0      0      1      0      0      0      0      0      0 #> X1M0Y1      0      0      0      0      0      1      0      0 #> X1M0Y1      0      0      0      0      0      1      0      0 #> X1M1Y0      0      0      0      1      0      0      0      0 #> X1M1Y0      0      0      0      1      0      0      0      0 #> X1M1Y1      0      0      0      0      0      0      0      1 #> X1M1Y1      0      0      0      0      0      0      0      1 # Any ways (without paths splits) make_parmap(model) %*% (make_parmap(model) %>% attr(\"map\")) #>               X0M0Y0 X1M0Y0 X0M1Y0 X1M1Y0 X0M0Y1 X1M0Y1 X0M1Y1 X1M1Y1 #> X.0                2      0      2      0      2      0      2      0 #> X.1                0      2      0      2      0      2      0      2 #> M.00_X.0           1      0      0      0      1      0      0      0 #> M.10_X.0           0      0      1      0      0      0      1      0 #> M.01_X.0           1      0      0      0      1      0      0      0 #> M.11_X.0           0      0      1      0      0      0      1      0 #> M.00_X.1           0      1      0      0      0      1      0      0 #> M.10_X.1           0      1      0      0      0      1      0      0 #> M.01_X.1           0      0      0      1      0      0      0      1 #> M.11_X.1           0      0      0      1      0      0      0      1 #> Y.00_M.00_X.0      1      0      0      0      0      0      0      0 #> Y.10_M.00_X.0      0      0      0      0      1      0      0      0 #> Y.01_M.00_X.0      1      0      0      0      0      0      0      0 #> Y.11_M.00_X.0      0      0      0      0      1      0      0      0 #> Y.00_M.00_X.1      0      1      0      0      0      0      0      0 #> Y.10_M.00_X.1      0      0      0      0      0      1      0      0 #> Y.01_M.00_X.1      0      1      0      0      0      0      0      0 #> Y.11_M.00_X.1      0      0      0      0      0      1      0      0 #> Y.00_M.01_X.0      1      0      0      0      0      0      0      0 #> Y.10_M.01_X.0      0      0      0      0      1      0      0      0 #> Y.01_M.01_X.0      1      0      0      0      0      0      0      0 #> Y.11_M.01_X.0      0      0      0      0      1      0      0      0 #> Y.00_M.01_X.1      0      0      0      1      0      0      0      0 #> Y.10_M.01_X.1      0      0      0      1      0      0      0      0 #> Y.01_M.01_X.1      0      0      0      0      0      0      0      1 #> Y.11_M.01_X.1      0      0      0      0      0      0      0      1 #> Y.00_M.10_X.0      0      0      1      0      0      0      0      0 #> Y.10_M.10_X.0      0      0      1      0      0      0      0      0 #> Y.01_M.10_X.0      0      0      0      0      0      0      1      0 #> Y.11_M.10_X.0      0      0      0      0      0      0      1      0 #> Y.00_M.10_X.1      0      1      0      0      0      0      0      0 #> Y.10_M.10_X.1      0      0      0      0      0      1      0      0 #> Y.01_M.10_X.1      0      1      0      0      0      0      0      0 #> Y.11_M.10_X.1      0      0      0      0      0      1      0      0 #> Y.00_M.11_X.0      0      0      1      0      0      0      0      0 #> Y.10_M.11_X.0      0      0      1      0      0      0      0      0 #> Y.01_M.11_X.0      0      0      0      0      0      0      1      0 #> Y.11_M.11_X.0      0      0      0      0      0      0      1      0 #> Y.00_M.11_X.1      0      0      0      1      0      0      0      0 #> Y.10_M.11_X.1      0      0      0      1      0      0      0      0 #> Y.01_M.11_X.1      0      0      0      0      0      0      0      1 #> Y.11_M.11_X.1      0      0      0      0      0      0      0      1  if (FALSE) { # X1 and X2 are confounded and jointly determine Y1, Y2. # For instance for models in which X and Y take on four values rather than 2. model <- make_model(\"Y2 <- X1 -> Y1; Y2 <- X2 ->Y1; X1 <-> X2; Y1 <-> Y2\") data <- CausalQueries:::minimal_event_data(model) check <- CausalQueries:::prep_stan_data(model, data, keep_transformed = TRUE) check$n_params a <- update_model(model) make_parmap(model) %>% dim }"},{"path":"/reference/make_par_values.html","id":null,"dir":"Reference","previous_headings":"","what":"make_par_values — make_par_values","title":"make_par_values — make_par_values","text":"one step function make_priors make_parameters. See make_priors help.","code":""},{"path":"/reference/make_par_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make_par_values — make_par_values","text":"","code":"make_par_values(   model,   alter = \"priors\",   x = NA,   alter_at = NA,   node = NA,   label = NA,   nodal_type = NA,   param_set = NA,   given = NA,   statement = NA,   join_by = \"|\",   param_names = NA,   distribution = NA,   normalize = FALSE )"},{"path":"/reference/make_par_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make_par_values — make_par_values","text":"model model created make_model alter character vector one \"priors\" \"param_value\" specifying alter x vector real non negative values substituted \"priors\" \"param_value\" alter_at string specifying filtering operations applied parameters_df, yielding logical vector indicating parameters values altered. (see examples) node string indicating nodes altered label string. Label nodal type indicating nodal types values altered. Equivalent nodal_type. nodal_type string. Label nodal type indicating nodal types values altered param_set string indicating  name set parameters altered given string indicates node parameter altered depends statement causal query determines nodal types values altered join_by string specifying logical operator joining expanded types statement contains wildcards. Can take values '&' (logical ) '|' (logical ). param_names string. name specific parameter form , example, 'X.1', 'Y.01' distribution string indicating common prior distribution (uniform, jeffreys certainty) normalize logical. TRUE normalizes param set probabilities sum 1.","code":""},{"path":"/reference/make_par_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make_par_values — make_par_values","text":"","code":"# the below methods can be applied to either priors or # param_values by specifying the desired option in \\code{alter}  model <- CausalQueries::make_model(\"X -> M -> Y; X <-> Y\")  #altering values using \\code{alter_at} CausalQueries:::make_par_values(model = model, x = c(0.5,0.25), alter_at = \"node == 'Y' & nodal_type %in% c('00','01') & given == 'X.0'\") #>  [1] 1.00 1.00 1.00 1.00 1.00 1.00 0.50 1.00 0.25 1.00 1.00 1.00 1.00 1.00  #altering values using \\code{param_names} CausalQueries:::make_par_values(model = model, x = c(0.5,0.25), param_names = c(\"Y.10_X.0\",\"Y.10_X.1\")) #>  [1] 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.50 1.00 1.00 1.00 0.25 1.00 1.00  #altering values using \\code{statement} CausalQueries:::make_par_values(model = model, x = c(0.5,0.25), statement = \"Y[M=1] > Y[M=0]\") #>  [1] 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.50 1.00 1.00 1.00 0.25 1.00  #altering values using a combination of other arguments CausalQueries:::make_par_values(model = model, x = c(0.5,0.25), node = \"Y\", nodal_type = c(\"00\",\"01\"), given = \"X.0\") #>  [1] 1.00 1.00 1.00 1.00 1.00 1.00 0.50 1.00 0.25 1.00 1.00 1.00 1.00 1.00"},{"path":"/reference/make_prior_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a prior distribution from priors — make_prior_distribution","title":"Make a prior distribution from priors — make_prior_distribution","text":"Create `n_param`x `n_draws` database possible lambda draws attached model.","code":""},{"path":"/reference/make_prior_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a prior distribution from priors — make_prior_distribution","text":"","code":"make_prior_distribution(model, n_draws = 4000)"},{"path":"/reference/make_prior_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a prior distribution from priors — make_prior_distribution","text":"model causal_model. model object generated make_model. n_draws scalar. Number draws.","code":""},{"path":"/reference/make_prior_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a prior distribution from priors — make_prior_distribution","text":"`data.frame` dimension `n_param`x `n_draws` possible lambda draws","code":""},{"path":[]},{"path":"/reference/make_prior_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a prior distribution from priors — make_prior_distribution","text":"","code":"make_model('X -> Y') %>% make_prior_distribution(n_draws = 5) #>            X.0       X.1      Y.00       Y.10       Y.01      Y.11 #> [1,] 0.7015890 0.2984110 0.0330107 0.08816921 0.21763966 0.6611804 #> [2,] 0.7875378 0.2124622 0.1832942 0.06319877 0.55107438 0.2024327 #> [3,] 0.8366797 0.1633203 0.4373604 0.11220818 0.24120257 0.2092288 #> [4,] 0.4990508 0.5009492 0.1845242 0.42668006 0.21047197 0.1783237 #> [5,] 0.6913871 0.3086129 0.1922845 0.56297699 0.02397312 0.2207654"},{"path":"/reference/minimal_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a data frame for case with no data — minimal_data","title":"Creates a data frame for case with no data — minimal_data","text":"Creates data frame case data","code":""},{"path":"/reference/minimal_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a data frame for case with no data — minimal_data","text":"","code":"minimal_data(model)"},{"path":"/reference/minimal_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a data frame for case with no data — minimal_data","text":"model causal_model. model object generated make_model.","code":""},{"path":"/reference/minimal_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a data frame for case with no data — minimal_data","text":"data.frame one row NAs columns named according nodes model.","code":""},{"path":"/reference/minimal_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a data frame for case with no data — minimal_data","text":"","code":"# \\donttest{ model <- make_model('X -> K -> Y') CausalQueries:::minimal_data(model) #>    X  K  Y #> 1 NA NA NA # }"},{"path":"/reference/minimal_event_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a compact data frame for case with no data — minimal_event_data","title":"Creates a compact data frame for case with no data — minimal_event_data","text":"Creates compact data frame case data","code":""},{"path":"/reference/minimal_event_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a compact data frame for case with no data — minimal_event_data","text":"","code":"minimal_event_data(model)"},{"path":"/reference/minimal_event_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a compact data frame for case with no data — minimal_event_data","text":"model causal_model. model object generated make_model.","code":""},{"path":"/reference/minimal_event_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a compact data frame for case with no data — minimal_event_data","text":"compact data frame row represents element exhaustive set events model. count event set zero.","code":""},{"path":"/reference/minimal_event_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a compact data frame for case with no data — minimal_event_data","text":"","code":"# \\donttest{ model <- make_model('X -> K -> Y') CausalQueries:::minimal_event_data(model) #>    event strategy count #> 1 X0K0Y0      XKY     0 #> 2 X1K0Y0      XKY     0 #> 3 X0K1Y0      XKY     0 #> 4 X1K1Y0      XKY     0 #> 5 X0K0Y1      XKY     0 #> 6 X1K0Y1      XKY     0 #> 7 X0K1Y1      XKY     0 #> 8 X1K1Y1      XKY     0 # }"},{"path":"/reference/nodes_in_statement.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify nodes in a statement — nodes_in_statement","title":"Identify nodes in a statement — nodes_in_statement","text":"Identify nodes statement","code":""},{"path":"/reference/nodes_in_statement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify nodes in a statement — nodes_in_statement","text":"","code":"nodes_in_statement(nodes, statement)"},{"path":"/reference/nodes_in_statement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify nodes in a statement — nodes_in_statement","text":"nodes vector characters. contain quoted names nodes model statement character. quoted causal statement.","code":""},{"path":"/reference/nodes_in_statement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify nodes in a statement — nodes_in_statement","text":"Returns name nodes present statement","code":""},{"path":"/reference/non_decreasing.html","id":null,"dir":"Reference","previous_headings":"","what":"Make monotonicity statement (non negative) — non_decreasing","title":"Make monotonicity statement (non negative) — non_decreasing","text":"Generate statement Y weakly monotonic (increasing) X","code":""},{"path":"/reference/non_decreasing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make monotonicity statement (non negative) — non_decreasing","text":"","code":"non_decreasing(X, Y)"},{"path":"/reference/non_decreasing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make monotonicity statement (non negative) — non_decreasing","text":"X character. quoted name input node Y character. quoted name outcome node","code":""},{"path":"/reference/non_decreasing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make monotonicity statement (non negative) — non_decreasing","text":"character statement class statement","code":""},{"path":[]},{"path":"/reference/non_decreasing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make monotonicity statement (non negative) — non_decreasing","text":"","code":"# \\donttest{ non_decreasing('A', 'B') #> [1] \"(B[A=1] >= B[A=0])\" #> attr(,\"class\") #> [1] \"statement\" # }"},{"path":"/reference/non_increasing.html","id":null,"dir":"Reference","previous_headings":"","what":"Make monotonicity statement (non positive) — non_increasing","title":"Make monotonicity statement (non positive) — non_increasing","text":"Generate statement Y weakly monotonic (increasing) X","code":""},{"path":"/reference/non_increasing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make monotonicity statement (non positive) — non_increasing","text":"","code":"non_increasing(X, Y)"},{"path":"/reference/non_increasing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make monotonicity statement (non positive) — non_increasing","text":"X character. quoted name input node Y character. quoted name outcome node","code":""},{"path":"/reference/non_increasing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make monotonicity statement (non positive) — non_increasing","text":"character statement class statement","code":""},{"path":[]},{"path":"/reference/non_increasing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make monotonicity statement (non positive) — non_increasing","text":"","code":"# \\donttest{ non_increasing('A', 'B') #> [1] \"(B[A=1] <= B[A=0])\" #> attr(,\"class\") #> [1] \"statement\" # }"},{"path":"/reference/n_check.html","id":null,"dir":"Reference","previous_headings":"","what":"n_check — n_check","title":"n_check — n_check","text":"n_check","code":""},{"path":"/reference/n_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"n_check — n_check","text":"","code":"n_check(n)"},{"path":"/reference/n_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"n_check — n_check","text":"n integer. Sample size argument.","code":""},{"path":"/reference/n_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"n_check — n_check","text":"error message n integer less 0.","code":""},{"path":"/reference/n_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"n_check — n_check","text":"Checks whether input integer greater 0.","code":""},{"path":"/reference/observe_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Observe data, given a strategy — observe_data","title":"Observe data, given a strategy — observe_data","text":"Observe data, given strategy","code":""},{"path":"/reference/observe_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Observe data, given a strategy — observe_data","text":"","code":"observe_data(   complete_data,   observed = NULL,   nodes_to_observe = NULL,   prob = 1,   m = NULL,   subset = TRUE )"},{"path":"/reference/observe_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Observe data, given a strategy — observe_data","text":"complete_data data.frame. Data observed unobserved. observed data.frame. Data observed. nodes_to_observe list. Nodes observe. prob scalar. Observation probability. m integer. Number units observe; specified, m overrides prob. subset character.  Logical statement can applied rows complete data. instance observation nodes might depend observed values nodes; observation may sought data already observed!","code":""},{"path":"/reference/observe_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Observe data, given a strategy — observe_data","text":"data.frame logical values indicating nodes observe row `complete_data`.","code":""},{"path":"/reference/observe_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Observe data, given a strategy — observe_data","text":"","code":"model <- make_model(\"X -> Y\") df <- simulate_data(model, n = 8) # Observe X values only observe_data(complete_data = df, nodes_to_observe = \"X\") #>      X     Y #> 1 TRUE FALSE #> 2 TRUE FALSE #> 3 TRUE FALSE #> 4 TRUE FALSE #> 5 TRUE FALSE #> 6 TRUE FALSE #> 7 TRUE FALSE #> 8 TRUE FALSE # Observe half the Y values for cases with observed X = 1 observe_data(complete_data = df,      observed = observe_data(complete_data = df, nodes_to_observe = \"X\"),      nodes_to_observe = \"Y\", prob = .5,      subset = \"X==1\") #>      X     Y #> 1 TRUE FALSE #> 2 TRUE FALSE #> 3 TRUE FALSE #> 4 TRUE  TRUE #> 5 TRUE FALSE #> 6 TRUE  TRUE #> 7 TRUE FALSE #> 8 TRUE  TRUE"},{"path":"/reference/parameter_setting.html","id":null,"dir":"Reference","previous_headings":"","what":"Setting parameters — parameter_setting","title":"Setting parameters — parameter_setting","text":"Functionality altering parameters: vector 'true' parameters; possibly drawn prior posterior. Add true parameter vector model. Parameters can created using arguments passed make_parameters make_priors. Extracts parameters named vector","code":""},{"path":"/reference/parameter_setting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setting parameters — parameter_setting","text":"","code":"make_parameters(   model,   parameters = NULL,   param_type = NULL,   warning = TRUE,   normalize = TRUE,   ... )  set_parameters(   model,   parameters = NULL,   param_type = NULL,   warning = FALSE,   ... )  get_parameters(model, param_type = NULL)"},{"path":"/reference/parameter_setting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setting parameters — parameter_setting","text":"model causal_model. model object generated make_model. parameters vector real numbers [0,1]. Values parameters specify (optional). default, parameters drawn model$parameters_df. param_type character. String specifying type parameters make (\"flat\", \"prior_mean\", \"posterior_mean\", \"prior_draw\", \"posterior_draw\", \"define). param_type set define use arguments passed make_priors; otherwise flat sets equal probabilities nodal type parameter set; prior_mean, prior_draw, posterior_mean, posterior_draw take parameters means draws prior posterior. warning Logical. Whether warn parameter renormalization. normalize Logical. parameter given subset family residual elements normalized parameters param_set sum 1 provided params unaltered. ... Options passed onto make_priors.","code":""},{"path":"/reference/parameter_setting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setting parameters — parameter_setting","text":"vector draws prior distribution parameters object class causal_model. essentially returns list containing elements comprising model (e.g. 'statement', 'nodal_types' 'DAG') true vector parameters attached . vector draws prior distribution parameters","code":""},{"path":"/reference/parameter_setting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setting parameters — parameter_setting","text":"","code":"# make_parameters examples:  # Simple examples model <- make_model('X -> Y') data  <- simulate_data(model, n = 2) model <- update_model(model, data) #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000175 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.75 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.202 seconds (Warm-up) #> Chain 1:                0.178 seconds (Sampling) #> Chain 1:                0.38 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 3.4e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.34 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.176 seconds (Warm-up) #> Chain 2:                0.153 seconds (Sampling) #> Chain 2:                0.329 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.7e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.17 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.135 seconds (Warm-up) #> Chain 3:                0.143 seconds (Sampling) #> Chain 3:                0.278 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 2e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.2 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.143 seconds (Warm-up) #> Chain 4:                0.164 seconds (Sampling) #> Chain 4:                0.307 seconds (Total) #> Chain 4:  make_parameters(model, parameters = c(.25, .75, 1.25,.25, .25, .25)) #>   X.0   X.1  Y.00  Y.10  Y.01  Y.11  #> 0.250 0.750 0.625 0.125 0.125 0.125  make_parameters(model, param_type = 'flat') #> no specific parameters to alter values for specified. Altering all parameters. #>  X.0  X.1 Y.00 Y.10 Y.01 Y.11  #> 0.50 0.50 0.25 0.25 0.25 0.25  make_parameters(model, param_type = 'prior_draw') #>       X.0       X.1      Y.00      Y.10      Y.01      Y.11  #> 0.3796891 0.6203109 0.4669267 0.2646084 0.1418234 0.1266416  make_parameters(model, param_type = 'prior_mean') #>  X.0  X.1 Y.00 Y.10 Y.01 Y.11  #> 0.50 0.50 0.25 0.25 0.25 0.25  make_parameters(model, param_type = 'posterior_draw') #>       X.0       X.1      Y.00      Y.10      Y.01      Y.11  #> 0.4828587 0.5171413 0.2190732 0.1837518 0.2107026 0.3864725  make_parameters(model, param_type = 'posterior_mean') #>       X.0       X.1      Y.00      Y.10      Y.01      Y.11  #> 0.2519797 0.7480203 0.1625460 0.1668259 0.3372414 0.3333867    # \\donttest{  #altering values using \\code{alter_at} make_model(\"X -> Y\") %>% make_parameters(parameters = c(0.5,0.25), alter_at = \"node == 'Y' & nodal_type %in% c('00','01')\") #>   X.0   X.1  Y.00  Y.10  Y.01  Y.11  #> 0.500 0.500 0.500 0.125 0.250 0.125   #altering values using \\code{param_names} make_model(\"X -> Y\") %>% make_parameters(parameters = c(0.5,0.25), param_names = c(\"Y.10\",\"Y.01\")) #>   X.0   X.1  Y.00  Y.10  Y.01  Y.11  #> 0.500 0.500 0.125 0.500 0.250 0.125   #altering values using \\code{statement} make_model(\"X -> Y\") %>% make_parameters(parameters = c(0.5), statement = \"Y[X=1] > Y[X=0]\") #>       X.0       X.1      Y.00      Y.10      Y.01      Y.11  #> 0.5000000 0.5000000 0.1666667 0.1666667 0.5000000 0.1666667   #altering values using a combination of other arguments make_model(\"X -> Y\") %>% make_parameters(parameters = c(0.5,0.25), node = \"Y\", nodal_type = c(\"00\",\"01\")) #>   X.0   X.1  Y.00  Y.10  Y.01  Y.11  #> 0.500 0.500 0.500 0.125 0.250 0.125   # Normalize renormalizes values not set so that value set is not renomalized make_parameters(make_model('X -> Y'),                statement = 'Y[X=1]>Y[X=0]', parameters = .5) #>       X.0       X.1      Y.00      Y.10      Y.01      Y.11  #> 0.5000000 0.5000000 0.1666667 0.1666667 0.5000000 0.1666667  make_parameters(make_model('X -> Y'),                statement = 'Y[X=1]>Y[X=0]', parameters = .5, normalize = FALSE) #>  X.0  X.1 Y.00 Y.10 Y.01 Y.11  #>  0.5  0.5  0.2  0.2  0.4  0.2     # }  # set_parameters examples:  make_model('X->Y') %>% set_parameters(1:6) %>% get_parameters() #>       X.0       X.1      Y.00      Y.10      Y.01      Y.11  #> 0.3333333 0.6666667 0.1666667 0.2222222 0.2777778 0.3333333   # Simple examples model <- make_model('X -> Y') data  <- simulate_data(model, n = 2) model <- update_model(model, data) #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.8e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.18 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.164 seconds (Warm-up) #> Chain 1:                0.266 seconds (Sampling) #> Chain 1:                0.43 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 4.3e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.43 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.206 seconds (Warm-up) #> Chain 2:                0.166 seconds (Sampling) #> Chain 2:                0.372 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 3e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.3 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.155 seconds (Warm-up) #> Chain 3:                0.105 seconds (Sampling) #> Chain 3:                0.26 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 3.6e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.36 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.142 seconds (Warm-up) #> Chain 4:                0.127 seconds (Sampling) #> Chain 4:                0.269 seconds (Total) #> Chain 4:  set_parameters(model, parameters = c(.25, .75, 1.25,.25, .25, .25)) #>  #> Statement:  #> [1] \"X -> Y\" #>  #> DAG:  #>   parent children #> 1      X        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>  #>  #> Number of types by node #> X Y  #> 2 4  #>  #> Number of unit types:  8 set_parameters(model, param_type = 'flat') #> no specific parameters to alter values for specified. Altering all parameters. #>  #> Statement:  #> [1] \"X -> Y\" #>  #> DAG:  #>   parent children #> 1      X        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>  #>  #> Number of types by node #> X Y  #> 2 4  #>  #> Number of unit types:  8 set_parameters(model, param_type = 'prior_draw') #>  #> Statement:  #> [1] \"X -> Y\" #>  #> DAG:  #>   parent children #> 1      X        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>  #>  #> Number of types by node #> X Y  #> 2 4  #>  #> Number of unit types:  8 set_parameters(model, param_type = 'prior_mean') #>  #> Statement:  #> [1] \"X -> Y\" #>  #> DAG:  #>   parent children #> 1      X        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>  #>  #> Number of types by node #> X Y  #> 2 4  #>  #> Number of unit types:  8 set_parameters(model, param_type = 'posterior_draw') #>  #> Statement:  #> [1] \"X -> Y\" #>  #> DAG:  #>   parent children #> 1      X        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>  #>  #> Number of types by node #> X Y  #> 2 4  #>  #> Number of unit types:  8 set_parameters(model, param_type = 'posterior_mean') #>  #> Statement:  #> [1] \"X -> Y\" #>  #> DAG:  #>   parent children #> 1      X        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>  #>  #> Number of types by node #> X Y  #> 2 4  #>  #> Number of unit types:  8   # \\donttest{  #altering values using \\code{alter_at} make_model(\"X -> Y\") %>% set_parameters(parameters = c(0.5,0.25), alter_at = \"node == 'Y' & nodal_type %in% c('00','01')\") #>  #> Statement:  #> [1] \"X -> Y\" #>  #> DAG:  #>   parent children #> 1      X        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>  #>  #> Number of types by node #> X Y  #> 2 4  #>  #> Number of unit types:  8  #altering values using \\code{param_names} make_model(\"X -> Y\") %>% set_parameters(parameters = c(0.5,0.25), param_names = c(\"Y.10\",\"Y.01\")) #>  #> Statement:  #> [1] \"X -> Y\" #>  #> DAG:  #>   parent children #> 1      X        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>  #>  #> Number of types by node #> X Y  #> 2 4  #>  #> Number of unit types:  8  #altering values using \\code{statement} make_model(\"X -> Y\") %>% set_parameters(parameters = c(0.5), statement = \"Y[X=1] > Y[X=0]\") #>  #> Statement:  #> [1] \"X -> Y\" #>  #> DAG:  #>   parent children #> 1      X        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>  #>  #> Number of types by node #> X Y  #> 2 4  #>  #> Number of unit types:  8  #altering values using a combination of other arguments make_model(\"X -> Y\") %>% set_parameters(parameters = c(0.5,0.25), node = \"Y\", nodal_type = c(\"00\",\"01\")) #>  #> Statement:  #> [1] \"X -> Y\" #>  #> DAG:  #>   parent children #> 1      X        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>  #>  #> Number of types by node #> X Y  #> 2 4  #>  #> Number of unit types:  8     # }  # get_parameters examples:  get_parameters(make_model('X -> Y')) #>  X.0  X.1 Y.00 Y.10 Y.01 Y.11  #> 0.50 0.50 0.25 0.25 0.25 0.25"},{"path":"/reference/perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces the possible permutations of a set of nodes — perm","title":"Produces the possible permutations of a set of nodes — perm","text":"Produces possible permutations set nodes","code":""},{"path":"/reference/perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces the possible permutations of a set of nodes — perm","text":"","code":"perm(max = rep(1, 2))"},{"path":"/reference/perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces the possible permutations of a set of nodes — perm","text":"max vector integers. maximum value integer value starting 0. Defaults 1. number permutation defined max's length","code":""},{"path":"/reference/perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produces the possible permutations of a set of nodes — perm","text":"matrix permutations","code":""},{"path":"/reference/perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produces the possible permutations of a set of nodes — perm","text":"","code":"# \\donttest{ CausalQueries:::perm(3) #>     #> 1 0 #> 2 1 #> 3 2 #> 4 3 # }"},{"path":"/reference/plot_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots a DAG in ggplot style using a causal model input — plot_dag","title":"Plots a DAG in ggplot style using a causal model input — plot_dag","text":"confounds indicated (provided attr(model$P, 'confounds')), represented bidirectional arcs.","code":""},{"path":"/reference/plot_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots a DAG in ggplot style using a causal model input — plot_dag","text":"","code":"plot_dag(   model = NULL,   x_coord = NULL,   y_coord = NULL,   title = \"\",   textcol = \"white\",   textsize = 3.88,   shape = 16,   nodecol = \"black\",   nodesize = 16 )"},{"path":"/reference/plot_dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots a DAG in ggplot style using a causal model input — plot_dag","text":"model causal_model object generated make_model x_coord vector x coordinates DAG nodes. left empty, coordinates randomly generated y_coord vector y coordinates DAG nodes. left empty, coordinates randomly generated title String specifying title graph textcol String specifying color text labels textsize Numeric, size text labels shape Indicates shape node. Defaults circular node. nodesize Size node. nodelcol String indicating color node accepted ggplot's default palette","code":""},{"path":"/reference/plot_dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots a DAG in ggplot style using a causal model input — plot_dag","text":"DAG plot ggplot style.","code":""},{"path":"/reference/plot_dag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots a DAG in ggplot style using a causal model input — plot_dag","text":"","code":"if (FALSE) { make_model('X -> K -> Y; X <-> Y') %>%   CausalQueries:::plot_dag() make_model('X -> K -> Y') %>%   set_confound('X <-> Y') %>%   CausalQueries:::plot_dag() CausalQueries:::plot_dag(model, x_coord = 1:3, y_coord = 1:3) }"},{"path":"/reference/prep_stan_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for 'stan' — prep_stan_data","title":"Prepare data for 'stan' — prep_stan_data","text":"Create list containing data passed 'stan","code":""},{"path":"/reference/prep_stan_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for 'stan' — prep_stan_data","text":"","code":"prep_stan_data(model, data, keep_transformed = TRUE)"},{"path":"/reference/prep_stan_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for 'stan' — prep_stan_data","text":"model causal_model. model object generated make_model. data data.frame.  Data nodes can take three values: 0, 1, NA. long form generated make_events","code":""},{"path":"/reference/prep_stan_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for 'stan' — prep_stan_data","text":"list containing data passed 'stan'","code":""},{"path":"/reference/prep_stan_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for 'stan' — prep_stan_data","text":"","code":"# \\donttest{ model <- make_model('X->Y') data  <-  collapse_data(simulate_data(model, n = 6), model) CausalQueries:::prep_stan_data(model, data) #> $parmap #>      X0Y0 X1Y0 X0Y1 X1Y1 #> X.0     1    0    1    0 #> X.1     0    1    0    1 #> Y.00    1    1    0    0 #> Y.10    0    1    1    0 #> Y.01    1    0    0    1 #> Y.11    0    0    1    1 #> attr(,\"map\") #>      X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y0    1    0    0    0 #> X1Y0    0    1    0    0 #> X0Y1    0    0    1    0 #> X1Y1    0    0    0    1 #>  #> $map #>      X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y0    1    0    0    0 #> X1Y0    0    1    0    0 #> X0Y1    0    0    1    0 #> X1Y1    0    0    0    1 #>  #> $n_paths #> [1] 4 #>  #> $n_params #> [1] 6 #>  #> $n_param_sets #> [1] 2 #>  #> $n_param_each #> X Y  #> 2 4  #>  #> $l_starts #> X Y  #> 1 3  #>  #> $l_ends #> X Y  #> 2 6  #>  #> $node_starts #> X Y  #> 1 3  #>  #> $node_ends #> X Y  #> 2 6  #>  #> $n_nodes #> [1] 2 #>  #> $lambdas_prior #>  X.0  X.1 Y.00 Y.10 Y.01 Y.11  #>    1    1    1    1    1    1  #>  #> $n_data #> [1] 4 #>  #> $n_events #> [1] 4 #>  #> $n_strategies #> [1] 1 #>  #> $strategy_starts #> [1] 1 #>  #> $strategy_ends #> [1] 4 #>  #> $keep_transformed #> [1] 1 #>  #> $E #>      X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y0    1    0    0    0 #> X1Y0    0    1    0    0 #> X0Y1    0    0    1    0 #> X1Y1    0    0    0    1 #>  #> $Y #> [1] 1 2 2 1 #>  #> $P #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>      X0.Y00 X1.Y00 X0.Y10 X1.Y10 X0.Y01 X1.Y01 X0.Y11 X1.Y11 #> X.0       1      0      1      0      1      0      1      0 #> X.1       0      1      0      1      0      1      0      1 #> Y.00      1      1      0      0      0      0      0      0 #> Y.10      0      0      1      1      0      0      0      0 #> Y.01      0      0      0      0      1      1      0      0 #> Y.11      0      0      0      0      0      0      1      1 #>  #>   #>  param_set  (P) #>   #> $n_types #> [1] 8 #>   model <- make_model('X->Y') %>% set_confound(list(X = 'Y[X=1]>Y[X=0]')) data  <-  collapse_data(simulate_data(model, n = 6), model) CausalQueries:::prep_stan_data(model, data) #> $parmap #>      X0Y0 X0Y1 X1Y0 X1Y1 #> Y.00    1    0    1    0 #> Y.10    0    1    1    0 #> Y.01    1    0    0    1 #> Y.11    0    1    0    1 #> attr(,\"map\") #>      X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y0    1    0    0    0 #> X0Y1    0    0    1    0 #> X1Y0    0    1    0    0 #> X1Y1    0    0    0    1 #>  #> $map #>      X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y0    1    0    0    0 #> X0Y1    0    0    1    0 #> X1Y0    0    1    0    0 #> X1Y1    0    0    0    1 #>  #> $n_paths #> [1] 4 #>  #> $n_params #> [1] 4 #>  #> $n_param_sets #> [1] 1 #>  #> $n_param_each #> Y  #> 4  #>  #> $l_starts #> Y  #> 1  #>  #> $l_ends #> Y  #> 4  #>  #> $node_starts #> Y  #> 1  #>  #> $node_ends #> Y  #> 4  #>  #> $n_nodes #> [1] 1 #>  #> $lambdas_prior #> Y.00 Y.10 Y.01 Y.11  #>    1    1    1    1  #>  #> $n_data #> [1] 4 #>  #> $n_events #> [1] 4 #>  #> $n_strategies #> [1] 1 #>  #> $strategy_starts #> [1] 1 #>  #> $strategy_ends #> [1] 4 #>  #> $keep_transformed #> [1] 1 #>  #> $E #>      X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y0    1    0    0    0 #> X1Y0    0    1    0    0 #> X0Y1    0    0    1    0 #> X1Y1    0    0    0    1 #>  #> $Y #> [1] 1 1 2 2 #>  #> $P #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>      X0.Y00 X1.Y00 X0.Y10 X1.Y10 X0.Y01 X1.Y01 X0.Y11 X1.Y11 #> Y.00      1      1      0      0      0      0      0      0 #> Y.10      0      0      1      1      0      0      0      0 #> Y.01      0      0      0      0      1      1      0      0 #> Y.11      0      0      0      0      0      0      1      1 #>  #>   #>  param_set  (P) #>  Y #> $n_types #> [1] 8 #>  # }"},{"path":"/reference/prior_setting.html","id":null,"dir":"Reference","previous_headings":"","what":"Setting priors — prior_setting","title":"Setting priors — prior_setting","text":"Functionality altering priors: make_priors Generates priors model. set_priors  Adds priors model. Extracts priors named vector","code":""},{"path":"/reference/prior_setting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setting priors — prior_setting","text":"","code":"make_priors(   model,   alphas = NA,   distribution = NA,   alter_at = NA,   node = NA,   nodal_type = NA,   label = NA,   param_set = NA,   given = NA,   statement = NA,   join_by = \"|\",   param_names = NA )  set_priors(   model,   alphas = NA,   distribution = NA,   alter_at = NA,   node = NA,   nodal_type = NA,   label = NA,   param_set = NA,   given = NA,   statement = NA,   join_by = \"|\",   param_names = NA )  get_priors(model)"},{"path":"/reference/prior_setting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setting priors — prior_setting","text":"model model object generated make_model(). alphas Real positive numbers giving hyperparameters Dirichlet distribution distribution string indicating common prior distribution (uniform, jeffreys certainty) alter_at string specifying filtering operations applied parameters_df, yielding logical vector indicating parameters values altered. (see examples) node string indicating nodes altered nodal_type string. Label nodal type indicating nodal types values altered label string. Label nodal type indicating nodal types values altered. Equivalent nodal_type. param_set string indicating  name set parameters altered given string indicates node parameter altered depends statement causal query determines nodal types values altered join_by string specifying logical operator joining expanded types statement contains wildcards. Can take values '&' (logical ) '|' (logical ). param_names string. name specific parameter form , example, 'X.1', 'Y.01'","code":""},{"path":"/reference/prior_setting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setting priors — prior_setting","text":"vector indicating hyperparameters prior distribution nodal types. object class causal_model. essentially returns list containing elements comprising model (e.g. 'statement', 'nodal_types' 'DAG') `priors` attached . vector indicating hyperparameters prior distribution nodal types.","code":""},{"path":"/reference/prior_setting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setting priors — prior_setting","text":"Seven arguments govern parameters altered. default '' can reduced specifying * alter_at String specifying filtering operations applied parameters_df, yielding logical vector indicating parameters values altered. \"node == 'X' & nodal_type * node, restricts example parameters associated node 'X' * label nodal_type label particular nodal type, written either form Y0000 Y.Y0000 * param_set param_set parameter. * given Given parameter set parameter. * statement, restricts example nodal types satisfy statement 'Y[X=1] > Y[X=0]' * param_set, given, useful setting confound statements produces several sets parameters Two arguments govern values apply: * alphas one non negative numbers * distribution indicates one common class: uniform, jeffreys, 'certain' Forbidden statements include: Setting distribution values time. Setting distribution uniform, jeffreys certainty. Setting negative values. specifying alter_at node, nodal_type,param_set,given,statement param_names specifying param_names node,nodal_type,param_set,given,statement alter_at specifying statement node nodal_type","code":""},{"path":"/reference/prior_setting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setting priors — prior_setting","text":"","code":"# make_priors examples:  # Pass all nodal types model <- make_model(\"Y <- X\") make_priors(model, alphas = .4) #>  X.0  X.1 Y.00 Y.10 Y.01 Y.11  #>  0.4  0.4  0.4  0.4  0.4  0.4  make_priors(model, distribution = \"jeffreys\") #> no specific parameters to alter values for specified. Altering all parameters. #>  X.0  X.1 Y.00 Y.10 Y.01 Y.11  #>  0.5  0.5  0.5  0.5  0.5  0.5   model <- CausalQueries::make_model(\"X -> M -> Y; X <-> Y\")  #altering values using \\code{alter_at} make_priors(model = model, alphas = c(0.5,0.25), alter_at = \"node == 'Y' & nodal_type %in% c('00','01') & given == 'X.0'\") #>      X.0      X.1     M.00     M.10     M.01     M.11 Y.00_X.0 Y.10_X.0  #>     1.00     1.00     1.00     1.00     1.00     1.00     0.50     1.00  #> Y.01_X.0 Y.11_X.0 Y.00_X.1 Y.10_X.1 Y.01_X.1 Y.11_X.1  #>     0.25     1.00     1.00     1.00     1.00     1.00   #altering values using \\code{param_names} make_priors(model = model, alphas = c(0.5,0.25), param_names = c(\"Y.10_X.0\",\"Y.10_X.1\")) #>      X.0      X.1     M.00     M.10     M.01     M.11 Y.00_X.0 Y.10_X.0  #>     1.00     1.00     1.00     1.00     1.00     1.00     1.00     0.50  #> Y.01_X.0 Y.11_X.0 Y.00_X.1 Y.10_X.1 Y.01_X.1 Y.11_X.1  #>     1.00     1.00     1.00     0.25     1.00     1.00   #altering values using \\code{statement} make_priors(model = model, alphas = c(0.5,0.25), statement = \"Y[M=1] > Y[M=0]\") #>      X.0      X.1     M.00     M.10     M.01     M.11 Y.00_X.0 Y.10_X.0  #>     1.00     1.00     1.00     1.00     1.00     1.00     1.00     1.00  #> Y.01_X.0 Y.11_X.0 Y.00_X.1 Y.10_X.1 Y.01_X.1 Y.11_X.1  #>     0.50     1.00     1.00     1.00     0.25     1.00   #altering values using a combination of other arguments make_priors(model = model, alphas = c(0.5,0.25), node = \"Y\", nodal_type = c(\"00\",\"01\"), given = \"X.0\") #>      X.0      X.1     M.00     M.10     M.01     M.11 Y.00_X.0 Y.10_X.0  #>     1.00     1.00     1.00     1.00     1.00     1.00     0.50     1.00  #> Y.01_X.0 Y.11_X.0 Y.00_X.1 Y.10_X.1 Y.01_X.1 Y.11_X.1  #>     0.25     1.00     1.00     1.00     1.00     1.00   # set_priors examples:  # Pass all nodal types model <- make_model(\"Y <- X\") set_priors(model, alphas = .4) #>  #> Statement:  #> [1] \"Y <- X\" #>  #> DAG:  #>   parent children #> 1      X        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>  #>  #> Number of types by node #> X Y  #> 2 4  #>  #> Number of unit types:  8 set_priors(model, distribution = \"jeffreys\") #> no specific parameters to alter values for specified. Altering all parameters. #>  #> Statement:  #> [1] \"Y <- X\" #>  #> DAG:  #>   parent children #> 1      X        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>  #>  #> Number of types by node #> X Y  #> 2 4  #>  #> Number of unit types:  8  model <- CausalQueries::make_model(\"X -> M -> Y; X <-> Y\")  #altering values using \\code{alter_at} set_priors(model = model, alphas = c(0.5,0.25), alter_at = \"node == 'Y' & nodal_type %in% c('00','01') & given == 'X.0'\") #>  #> Statement:  #> [1] \"X -> M -> Y; X <-> Y\" #>  #> DAG:  #>   parent children #> 2      X        M #> 1      M        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $M #> 00  10  01  11 #>  #>   node position display interpretation #> 1    M        1   M[*]*      M | X = 0 #> 2    M        2   M*[*]      M | X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | M = 0 #> 2    Y        2   Y*[*]      Y | M = 1 #>  #>  #> Number of types by node #> X M Y  #> 2 4 4  #>  #>  ------------------------------------------------------------------------------------------ #>  #> Parameter matrix:  #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>          X0.M00.Y00 X1.M00.Y00 X0.M10.Y00 X1.M10.Y00 X0.M01.Y00 X1.M01.Y00 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              1          1          0          0          0          0 #> M.10              0          0          1          1          0          0 #> M.01              0          0          0          0          1          1 #> M.11              0          0          0          0          0          0 #> Y.00_X.0          1          0          1          0          1          0 #> Y.10_X.0          0          0          0          0          0          0 #> Y.01_X.0          0          0          0          0          0          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          1          0          1          0          1 #> Y.10_X.1          0          0          0          0          0          0 #> Y.01_X.1          0          0          0          0          0          0 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M11.Y00 X1.M11.Y00 X0.M00.Y10 X1.M00.Y10 X0.M10.Y10 X1.M10.Y10 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              0          0          1          1          0          0 #> M.10              0          0          0          0          1          1 #> M.01              0          0          0          0          0          0 #> M.11              1          1          0          0          0          0 #> Y.00_X.0          1          0          0          0          0          0 #> Y.10_X.0          0          0          1          0          1          0 #> Y.01_X.0          0          0          0          0          0          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          1          0          0          0          0 #> Y.10_X.1          0          0          0          1          0          1 #> Y.01_X.1          0          0          0          0          0          0 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M01.Y10 X1.M01.Y10 X0.M11.Y10 X1.M11.Y10 X0.M00.Y01 X1.M00.Y01 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              0          0          0          0          1          1 #> M.10              0          0          0          0          0          0 #> M.01              1          1          0          0          0          0 #> M.11              0          0          1          1          0          0 #> Y.00_X.0          0          0          0          0          0          0 #> Y.10_X.0          1          0          1          0          0          0 #> Y.01_X.0          0          0          0          0          1          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          0          0          0          0          0 #> Y.10_X.1          0          1          0          1          0          0 #> Y.01_X.1          0          0          0          0          0          1 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M10.Y01 X1.M10.Y01 X0.M01.Y01 X1.M01.Y01 X0.M11.Y01 X1.M11.Y01 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              0          0          0          0          0          0 #> M.10              1          1          0          0          0          0 #> M.01              0          0          1          1          0          0 #> M.11              0          0          0          0          1          1 #> Y.00_X.0          0          0          0          0          0          0 #> Y.10_X.0          0          0          0          0          0          0 #> Y.01_X.0          1          0          1          0          1          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          0          0          0          0          0 #> Y.10_X.1          0          0          0          0          0          0 #> Y.01_X.1          0          1          0          1          0          1 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M00.Y11 X1.M00.Y11 X0.M10.Y11 X1.M10.Y11 X0.M01.Y11 X1.M01.Y11 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              1          1          0          0          0          0 #> M.10              0          0          1          1          0          0 #> M.01              0          0          0          0          1          1 #> M.11              0          0          0          0          0          0 #> Y.00_X.0          0          0          0          0          0          0 #> Y.10_X.0          0          0          0          0          0          0 #> Y.01_X.0          0          0          0          0          0          0 #> Y.11_X.0          1          0          1          0          1          0 #> Y.00_X.1          0          0          0          0          0          0 #> Y.10_X.1          0          0          0          0          0          0 #> Y.01_X.1          0          0          0          0          0          0 #> Y.11_X.1          0          1          0          1          0          1 #>          X0.M11.Y11 X1.M11.Y11 #> X.0               1          0 #> X.1               0          1 #> M.00              0          0 #> M.10              0          0 #> M.01              0          0 #> M.11              1          1 #> Y.00_X.0          0          0 #> Y.10_X.0          0          0 #> Y.01_X.0          0          0 #> Y.11_X.0          1          0 #> Y.00_X.1          0          0 #> Y.10_X.1          0          0 #> Y.01_X.1          0          0 #> Y.11_X.1          0          1 #>  #>   #>  param_set  (P) #>  X  M  Y.X.0  Y.X.1 #> Number of unit types:  32  #altering values using \\code{param_names} set_priors(model = model, alphas = c(0.5,0.25), param_names = c(\"Y.10_X.0\",\"Y.10_X.1\")) #>  #> Statement:  #> [1] \"X -> M -> Y; X <-> Y\" #>  #> DAG:  #>   parent children #> 2      X        M #> 1      M        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $M #> 00  10  01  11 #>  #>   node position display interpretation #> 1    M        1   M[*]*      M | X = 0 #> 2    M        2   M*[*]      M | X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | M = 0 #> 2    Y        2   Y*[*]      Y | M = 1 #>  #>  #> Number of types by node #> X M Y  #> 2 4 4  #>  #>  ------------------------------------------------------------------------------------------ #>  #> Parameter matrix:  #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>          X0.M00.Y00 X1.M00.Y00 X0.M10.Y00 X1.M10.Y00 X0.M01.Y00 X1.M01.Y00 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              1          1          0          0          0          0 #> M.10              0          0          1          1          0          0 #> M.01              0          0          0          0          1          1 #> M.11              0          0          0          0          0          0 #> Y.00_X.0          1          0          1          0          1          0 #> Y.10_X.0          0          0          0          0          0          0 #> Y.01_X.0          0          0          0          0          0          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          1          0          1          0          1 #> Y.10_X.1          0          0          0          0          0          0 #> Y.01_X.1          0          0          0          0          0          0 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M11.Y00 X1.M11.Y00 X0.M00.Y10 X1.M00.Y10 X0.M10.Y10 X1.M10.Y10 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              0          0          1          1          0          0 #> M.10              0          0          0          0          1          1 #> M.01              0          0          0          0          0          0 #> M.11              1          1          0          0          0          0 #> Y.00_X.0          1          0          0          0          0          0 #> Y.10_X.0          0          0          1          0          1          0 #> Y.01_X.0          0          0          0          0          0          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          1          0          0          0          0 #> Y.10_X.1          0          0          0          1          0          1 #> Y.01_X.1          0          0          0          0          0          0 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M01.Y10 X1.M01.Y10 X0.M11.Y10 X1.M11.Y10 X0.M00.Y01 X1.M00.Y01 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              0          0          0          0          1          1 #> M.10              0          0          0          0          0          0 #> M.01              1          1          0          0          0          0 #> M.11              0          0          1          1          0          0 #> Y.00_X.0          0          0          0          0          0          0 #> Y.10_X.0          1          0          1          0          0          0 #> Y.01_X.0          0          0          0          0          1          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          0          0          0          0          0 #> Y.10_X.1          0          1          0          1          0          0 #> Y.01_X.1          0          0          0          0          0          1 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M10.Y01 X1.M10.Y01 X0.M01.Y01 X1.M01.Y01 X0.M11.Y01 X1.M11.Y01 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              0          0          0          0          0          0 #> M.10              1          1          0          0          0          0 #> M.01              0          0          1          1          0          0 #> M.11              0          0          0          0          1          1 #> Y.00_X.0          0          0          0          0          0          0 #> Y.10_X.0          0          0          0          0          0          0 #> Y.01_X.0          1          0          1          0          1          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          0          0          0          0          0 #> Y.10_X.1          0          0          0          0          0          0 #> Y.01_X.1          0          1          0          1          0          1 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M00.Y11 X1.M00.Y11 X0.M10.Y11 X1.M10.Y11 X0.M01.Y11 X1.M01.Y11 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              1          1          0          0          0          0 #> M.10              0          0          1          1          0          0 #> M.01              0          0          0          0          1          1 #> M.11              0          0          0          0          0          0 #> Y.00_X.0          0          0          0          0          0          0 #> Y.10_X.0          0          0          0          0          0          0 #> Y.01_X.0          0          0          0          0          0          0 #> Y.11_X.0          1          0          1          0          1          0 #> Y.00_X.1          0          0          0          0          0          0 #> Y.10_X.1          0          0          0          0          0          0 #> Y.01_X.1          0          0          0          0          0          0 #> Y.11_X.1          0          1          0          1          0          1 #>          X0.M11.Y11 X1.M11.Y11 #> X.0               1          0 #> X.1               0          1 #> M.00              0          0 #> M.10              0          0 #> M.01              0          0 #> M.11              1          1 #> Y.00_X.0          0          0 #> Y.10_X.0          0          0 #> Y.01_X.0          0          0 #> Y.11_X.0          1          0 #> Y.00_X.1          0          0 #> Y.10_X.1          0          0 #> Y.01_X.1          0          0 #> Y.11_X.1          0          1 #>  #>   #>  param_set  (P) #>  X  M  Y.X.0  Y.X.1 #> Number of unit types:  32  #altering values using \\code{statement} set_priors(model = model, alphas = c(0.5,0.25), statement = \"Y[M=1] > Y[M=0]\") #>  #> Statement:  #> [1] \"X -> M -> Y; X <-> Y\" #>  #> DAG:  #>   parent children #> 2      X        M #> 1      M        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $M #> 00  10  01  11 #>  #>   node position display interpretation #> 1    M        1   M[*]*      M | X = 0 #> 2    M        2   M*[*]      M | X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | M = 0 #> 2    Y        2   Y*[*]      Y | M = 1 #>  #>  #> Number of types by node #> X M Y  #> 2 4 4  #>  #>  ------------------------------------------------------------------------------------------ #>  #> Parameter matrix:  #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>          X0.M00.Y00 X1.M00.Y00 X0.M10.Y00 X1.M10.Y00 X0.M01.Y00 X1.M01.Y00 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              1          1          0          0          0          0 #> M.10              0          0          1          1          0          0 #> M.01              0          0          0          0          1          1 #> M.11              0          0          0          0          0          0 #> Y.00_X.0          1          0          1          0          1          0 #> Y.10_X.0          0          0          0          0          0          0 #> Y.01_X.0          0          0          0          0          0          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          1          0          1          0          1 #> Y.10_X.1          0          0          0          0          0          0 #> Y.01_X.1          0          0          0          0          0          0 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M11.Y00 X1.M11.Y00 X0.M00.Y10 X1.M00.Y10 X0.M10.Y10 X1.M10.Y10 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              0          0          1          1          0          0 #> M.10              0          0          0          0          1          1 #> M.01              0          0          0          0          0          0 #> M.11              1          1          0          0          0          0 #> Y.00_X.0          1          0          0          0          0          0 #> Y.10_X.0          0          0          1          0          1          0 #> Y.01_X.0          0          0          0          0          0          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          1          0          0          0          0 #> Y.10_X.1          0          0          0          1          0          1 #> Y.01_X.1          0          0          0          0          0          0 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M01.Y10 X1.M01.Y10 X0.M11.Y10 X1.M11.Y10 X0.M00.Y01 X1.M00.Y01 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              0          0          0          0          1          1 #> M.10              0          0          0          0          0          0 #> M.01              1          1          0          0          0          0 #> M.11              0          0          1          1          0          0 #> Y.00_X.0          0          0          0          0          0          0 #> Y.10_X.0          1          0          1          0          0          0 #> Y.01_X.0          0          0          0          0          1          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          0          0          0          0          0 #> Y.10_X.1          0          1          0          1          0          0 #> Y.01_X.1          0          0          0          0          0          1 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M10.Y01 X1.M10.Y01 X0.M01.Y01 X1.M01.Y01 X0.M11.Y01 X1.M11.Y01 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              0          0          0          0          0          0 #> M.10              1          1          0          0          0          0 #> M.01              0          0          1          1          0          0 #> M.11              0          0          0          0          1          1 #> Y.00_X.0          0          0          0          0          0          0 #> Y.10_X.0          0          0          0          0          0          0 #> Y.01_X.0          1          0          1          0          1          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          0          0          0          0          0 #> Y.10_X.1          0          0          0          0          0          0 #> Y.01_X.1          0          1          0          1          0          1 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M00.Y11 X1.M00.Y11 X0.M10.Y11 X1.M10.Y11 X0.M01.Y11 X1.M01.Y11 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              1          1          0          0          0          0 #> M.10              0          0          1          1          0          0 #> M.01              0          0          0          0          1          1 #> M.11              0          0          0          0          0          0 #> Y.00_X.0          0          0          0          0          0          0 #> Y.10_X.0          0          0          0          0          0          0 #> Y.01_X.0          0          0          0          0          0          0 #> Y.11_X.0          1          0          1          0          1          0 #> Y.00_X.1          0          0          0          0          0          0 #> Y.10_X.1          0          0          0          0          0          0 #> Y.01_X.1          0          0          0          0          0          0 #> Y.11_X.1          0          1          0          1          0          1 #>          X0.M11.Y11 X1.M11.Y11 #> X.0               1          0 #> X.1               0          1 #> M.00              0          0 #> M.10              0          0 #> M.01              0          0 #> M.11              1          1 #> Y.00_X.0          0          0 #> Y.10_X.0          0          0 #> Y.01_X.0          0          0 #> Y.11_X.0          1          0 #> Y.00_X.1          0          0 #> Y.10_X.1          0          0 #> Y.01_X.1          0          0 #> Y.11_X.1          0          1 #>  #>   #>  param_set  (P) #>  X  M  Y.X.0  Y.X.1 #> Number of unit types:  32  #altering values using a combination of other arguments set_priors(model = model, alphas = c(0.5,0.25), node = \"Y\", nodal_type = c(\"00\",\"01\"), given = \"X.0\") #>  #> Statement:  #> [1] \"X -> M -> Y; X <-> Y\" #>  #> DAG:  #>   parent children #> 2      X        M #> 1      M        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $M #> 00  10  01  11 #>  #>   node position display interpretation #> 1    M        1   M[*]*      M | X = 0 #> 2    M        2   M*[*]      M | X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | M = 0 #> 2    Y        2   Y*[*]      Y | M = 1 #>  #>  #> Number of types by node #> X M Y  #> 2 4 4  #>  #>  ------------------------------------------------------------------------------------------ #>  #> Parameter matrix:  #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>          X0.M00.Y00 X1.M00.Y00 X0.M10.Y00 X1.M10.Y00 X0.M01.Y00 X1.M01.Y00 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              1          1          0          0          0          0 #> M.10              0          0          1          1          0          0 #> M.01              0          0          0          0          1          1 #> M.11              0          0          0          0          0          0 #> Y.00_X.0          1          0          1          0          1          0 #> Y.10_X.0          0          0          0          0          0          0 #> Y.01_X.0          0          0          0          0          0          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          1          0          1          0          1 #> Y.10_X.1          0          0          0          0          0          0 #> Y.01_X.1          0          0          0          0          0          0 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M11.Y00 X1.M11.Y00 X0.M00.Y10 X1.M00.Y10 X0.M10.Y10 X1.M10.Y10 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              0          0          1          1          0          0 #> M.10              0          0          0          0          1          1 #> M.01              0          0          0          0          0          0 #> M.11              1          1          0          0          0          0 #> Y.00_X.0          1          0          0          0          0          0 #> Y.10_X.0          0          0          1          0          1          0 #> Y.01_X.0          0          0          0          0          0          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          1          0          0          0          0 #> Y.10_X.1          0          0          0          1          0          1 #> Y.01_X.1          0          0          0          0          0          0 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M01.Y10 X1.M01.Y10 X0.M11.Y10 X1.M11.Y10 X0.M00.Y01 X1.M00.Y01 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              0          0          0          0          1          1 #> M.10              0          0          0          0          0          0 #> M.01              1          1          0          0          0          0 #> M.11              0          0          1          1          0          0 #> Y.00_X.0          0          0          0          0          0          0 #> Y.10_X.0          1          0          1          0          0          0 #> Y.01_X.0          0          0          0          0          1          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          0          0          0          0          0 #> Y.10_X.1          0          1          0          1          0          0 #> Y.01_X.1          0          0          0          0          0          1 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M10.Y01 X1.M10.Y01 X0.M01.Y01 X1.M01.Y01 X0.M11.Y01 X1.M11.Y01 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              0          0          0          0          0          0 #> M.10              1          1          0          0          0          0 #> M.01              0          0          1          1          0          0 #> M.11              0          0          0          0          1          1 #> Y.00_X.0          0          0          0          0          0          0 #> Y.10_X.0          0          0          0          0          0          0 #> Y.01_X.0          1          0          1          0          1          0 #> Y.11_X.0          0          0          0          0          0          0 #> Y.00_X.1          0          0          0          0          0          0 #> Y.10_X.1          0          0          0          0          0          0 #> Y.01_X.1          0          1          0          1          0          1 #> Y.11_X.1          0          0          0          0          0          0 #>          X0.M00.Y11 X1.M00.Y11 X0.M10.Y11 X1.M10.Y11 X0.M01.Y11 X1.M01.Y11 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> M.00              1          1          0          0          0          0 #> M.10              0          0          1          1          0          0 #> M.01              0          0          0          0          1          1 #> M.11              0          0          0          0          0          0 #> Y.00_X.0          0          0          0          0          0          0 #> Y.10_X.0          0          0          0          0          0          0 #> Y.01_X.0          0          0          0          0          0          0 #> Y.11_X.0          1          0          1          0          1          0 #> Y.00_X.1          0          0          0          0          0          0 #> Y.10_X.1          0          0          0          0          0          0 #> Y.01_X.1          0          0          0          0          0          0 #> Y.11_X.1          0          1          0          1          0          1 #>          X0.M11.Y11 X1.M11.Y11 #> X.0               1          0 #> X.1               0          1 #> M.00              0          0 #> M.10              0          0 #> M.01              0          0 #> M.11              1          1 #> Y.00_X.0          0          0 #> Y.10_X.0          0          0 #> Y.01_X.0          0          0 #> Y.11_X.0          1          0 #> Y.00_X.1          0          0 #> Y.10_X.1          0          0 #> Y.01_X.1          0          0 #> Y.11_X.1          0          1 #>  #>   #>  param_set  (P) #>  X  M  Y.X.0  Y.X.1 #> Number of unit types:  32  # get_priors examples:  get_priors(make_model('X -> Y')) #>  X.0  X.1 Y.00 Y.10 Y.01 Y.11  #>    1    1    1    1    1    1"},{"path":"/reference/query_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate query distribution — query_distribution","title":"Calculate query distribution — query_distribution","text":"Calculated distribution query prior posterior distribution parameters","code":""},{"path":"/reference/query_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate query distribution — query_distribution","text":"","code":"query_distribution(   model,   query,   given = TRUE,   using = \"parameters\",   parameters = NULL,   type_distribution = NULL,   verbose = FALSE,   join_by = \"|\",   case_level = FALSE )"},{"path":"/reference/query_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate query distribution — query_distribution","text":"model causal_model. model object generated make_model. query character. query potential outcomes \"Y[X=1] - Y[X=0]\" given character. quoted expression evaluates logical statement. given allows query conditioned *observational* distribution. value TRUE interpreted conditioning. using character. Whether use priors, posteriors parameters parameters vector real numbers [0,1].  true parameter vector used instead parameters attached model case  using specifies parameters type_distribution numeric vector. provided saves calculation, otherwise calculated model; may based prior posterior verbose Logical. Whether print mean standard deviation estimand console. join_by character. logical operator joining expanded types query contains wildcard (.). Can take values \"&\" (logical ) \"|\" (logical ). restriction contains wildcard (.) join_by specified, defaults \"|\", otherwise defaults NULL. case_level Logical. TRUE estimates probability query case.","code":""},{"path":"/reference/query_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate query distribution — query_distribution","text":"vector draws distribution potential outcomes specified query","code":""},{"path":"/reference/query_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate query distribution — query_distribution","text":"","code":"model <- make_model(\"X -> Y\") %>%          set_prior_distribution() %>%          set_parameter_matrix()  # \\donttest{  distribution <- query_distribution(model, query = \"(Y[X=1] - Y[X=0])\")   distribution <- query_distribution(model, query = \"(Y[X=1] - Y[X=0])\", given = \"X==1\")  distribution <- query_distribution(model, query = \"(Y[X=1] - Y[X=0])\", given = \"Y[X=1]==0\")  distribution <- query_distribution(model, query = \"(Y[X=1] - Y[X=0])\", given = \"Y[X=1]==1\")  distribution <- query_distribution(model, query = \"(Y[X=1] > Y[X=0])\")  distribution <- query_distribution(model,                                     query = \"(Y[X=1] > Y[X=0])\",                                     given = \"X==1 & Y==1\",                                     verbose = TRUE)  distribution <- query_distribution(model,                                     query = \"(Y[X=1] > Y[X=0])\",                                     given = \"X==1 & Y==1\",                                     case_level = TRUE,                                     verbose = TRUE)  distribution <- query_distribution(model, query = \"(Y[X=.] == 1)\", join_by = \"&\") #> Generated expanded expression: #> (Y[X=0] == 1 | Y[X=1] == 1)  distribution <- query_distribution(model, query = \"(Y[X=1] - Y[X=0])\", using = \"parameters\")  df    <- simulate_data(model, n = 3)  updated_model <- update_model(model, df) #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.8e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.18 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.145 seconds (Warm-up) #> Chain 1:                0.149 seconds (Sampling) #> Chain 1:                0.294 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 2e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.2 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.153 seconds (Warm-up) #> Chain 2:                0.128 seconds (Sampling) #> Chain 2:                0.281 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 2e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.2 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.146 seconds (Warm-up) #> Chain 3:                0.21 seconds (Sampling) #> Chain 3:                0.356 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1.6e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.16 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.213 seconds (Warm-up) #> Chain 4:                0.17 seconds (Sampling) #> Chain 4:                0.383 seconds (Total) #> Chain 4:   query_distribution( updated_model , query = \"(Y[X=1] - Y[X=0])\", using = \"posteriors\") #>            [,1]        [,2]      [,3]       [,4]       [,5]      [,6] #> [1,] -0.2612215 -0.03739376 0.2207052 -0.8221098 -0.2398823 0.1864363 #>            [,7]       [,8]       [,9]     [,10]       [,11]     [,12] #> [1,] -0.3167075 -0.3257887 -0.5009264 0.2329059 -0.04881811 0.2540537 #>            [,13]     [,14]      [,15]    [,16]      [,17]     [,18]      [,19] #> [1,] -0.06072406 0.1910005 -0.2313636 0.109045 -0.1443538 0.3085658 -0.1118898 #>          [,20]      [,21]      [,22]      [,23]      [,24]       [,25] #> [1,] 0.1202663 -0.1541376 -0.2564823 0.05381564 -0.4211197 -0.08292632 #>           [,26]      [,27]      [,28]     [,29]     [,30]     [,31]      [,32] #> [1,] -0.2441283 -0.3029384 -0.8705843 0.1075974 -0.423941 0.3408354 0.01227495 #>           [,33]     [,34]      [,35]      [,36]      [,37]      [,38] #> [1,] -0.4513529 0.2344113 -0.0450031 -0.3000907 0.09546139 -0.5469631 #>           [,39]       [,40]        [,41]     [,42]      [,43]     [,44] #> [1,] -0.2794066 -0.02715912 -0.007412714 0.2917294 -0.1859527 0.3264063 #>           [,45]      [,46]       [,47]    [,48]      [,49]       [,50] #> [1,] -0.3955232 -0.2214317 -0.07560879 -0.53567 -0.2021407 -0.06357943 #>          [,51]      [,52]       [,53]      [,54]       [,55]      [,56] #> [1,] 0.3779425 -0.3837278 -0.03220549 -0.2861236 -0.04019993 -0.1310951 #>           [,57]      [,58]      [,59]      [,60]     [,61]      [,62]     [,63] #> [1,] -0.2330898 -0.3106252 -0.2059312 -0.2067842 0.2843259 -0.4903769 -0.288836 #>           [,64]      [,65]      [,66]      [,67]      [,68]      [,69] #> [1,] -0.3171712 -0.5523365 -0.1262221 -0.1886637 -0.4554312 -0.3935885 #>            [,70]      [,71]     [,72]      [,73]    [,74]     [,75]     [,76] #> [1,] -0.09993438 -0.2734211 0.3036336 -0.3034786 0.407462 -0.118119 -0.165244 #>           [,77]      [,78]        [,79]      [,80]      [,81]     [,82] #> [1,] 0.02404585 -0.3757651 -0.007271466 -0.1494851 -0.3540913 0.1893582 #>           [,83]      [,84]      [,85]      [,86]      [,87]     [,88] #> [1,] -0.1070242 -0.2531323 -0.3908384 -0.3320536 -0.2116628 0.1167403 #>           [,89]      [,90]     [,91]      [,92]      [,93]     [,94]     [,95] #> [1,] -0.1613489 -0.1462462 0.2806596 0.07294861 -0.0451115 0.2943178 0.2222907 #>           [,96]     [,97]     [,98]     [,99]      [,100]    [,101]     [,102] #> [1,] -0.4629704 0.1835515 -0.122686 0.1323078 -0.04362619 0.2708555 -0.6197472 #>          [,103]    [,104]     [,105]     [,106]    [,107]     [,108]     [,109] #> [1,] -0.3719576 0.0244873 -0.3732075 -0.2827937 0.3113747 -0.3891469 -0.3058448 #>         [,110]     [,111]    [,112]     [,113]       [,114]      [,115] #> [1,] 0.1115114 -0.1069108 0.1847529 0.08873184 -0.005547109 0.009770998 #>          [,116]    [,117]       [,118]     [,119]     [,120]     [,121] #> [1,] -0.2186792 0.1980565 -0.002851049 -0.2622671 -0.3265716 0.02534013 #>          [,122]     [,123]    [,124]      [,125]     [,126]     [,127] #> [1,] -0.3123307 -0.2917228 -0.136468 -0.08621575 0.01477794 0.06598645 #>          [,128]     [,129]    [,130]     [,131]      [,132]     [,133] #> [1,] -0.0866578 0.05993136 0.3458042 -0.1212106 -0.04285738 -0.1967544 #>         [,134]     [,135]     [,136]     [,137]    [,138]    [,139]     [,140] #> [1,] 0.6140144 0.05376075 0.08314864 -0.4761829 0.1600617 0.1299467 -0.4836929 #>          [,141]   [,142]     [,143]      [,144]     [,145]    [,146]    [,147] #> [1,] -0.1074848 0.402315 -0.2997665 -0.06200603 -0.3759266 0.1672699 0.3470238 #>          [,148]     [,149]     [,150]     [,151]   [,152]     [,153]     [,154] #> [1,] -0.2184161 -0.2842307 -0.2071706 -0.2892663 -0.52002 -0.4441967 -0.5128609 #>          [,155]    [,156]      [,157]    [,158]      [,159]     [,160] #> [1,] 0.03270264 -0.415543 -0.09377871 0.1104792 -0.06681774 -0.4733119 #>          [,161]     [,162]     [,163]     [,164]      [,165]     [,166] #> [1,] -0.5843055 0.06579584 -0.4435553 -0.1034858 -0.04106244 0.08263947 #>          [,167]     [,168]      [,169]     [,170]     [,171]     [,172] #> [1,] 0.01385679 -0.1711951 -0.02207981 -0.6586087 -0.4877985 0.03841515 #>          [,173]    [,174]     [,175]     [,176]    [,177]     [,178]   [,179] #> [1,] -0.2057435 0.1458551 -0.3948667 -0.3674154 -0.628159 0.08716009 -0.31534 #>          [,180]     [,181]    [,182]    [,183]     [,184]    [,185]      [,186] #> [1,] -0.5240336 -0.4057078 0.2766217 -0.432216 -0.2565039 -0.342883 -0.09907712 #>          [,187]     [,188]      [,189]     [,190]    [,191]     [,192] #> [1,] -0.0727636 -0.4756182 -0.09488537 -0.3278821 0.2560647 0.04552627 #>         [,193]     [,194]     [,195]     [,196]     [,197]   [,198]    [,199] #> [1,] 0.0655247 -0.1643461 -0.5760063 -0.3858296 -0.4736956 0.175793 0.1317787 #>           [,200]    [,201]     [,202]     [,203]    [,204]     [,205] #> [1,] -0.05566972 0.1534496 -0.1483151 -0.4909776 0.1731568 -0.3156162 #>          [,206]     [,207]     [,208]     [,209]      [,210]     [,211] #> [1,] -0.2973054 -0.2277448 -0.1147932 -0.1951078 -0.09447831 -0.2184776 #>          [,212]    [,213]     [,214]     [,215]     [,216]    [,217]    [,218] #> [1,] -0.8458366 0.2570723 -0.3024266 -0.3509474 -0.5918149 0.1077431 0.1841038 #>          [,219]     [,220]    [,221]    [,222]     [,223]     [,224]     [,225] #> [1,] -0.2177099 -0.4054398 0.2542848 -0.126795 -0.5076304 -0.2610624 -0.2557018 #>           [,226]      [,227]    [,228]       [,229]      [,230]     [,231] #> [1,] -0.01338897 0.004123194 0.2431225 -0.001135995 0.005013356 0.01783581 #>         [,232]     [,233]     [,234]     [,235]     [,236]    [,237]   [,238] #> [1,] 0.1551285 -0.1937604 -0.3718871 -0.2380148 0.03749701 0.1402363 0.464181 #>          [,239]     [,240]     [,241]     [,242]     [,243]     [,244] #> [1,] -0.4613619 -0.5261184 -0.2732266 -0.1963848 -0.2176853 0.06589572 #>          [,245]       [,246]     [,247]     [,248]     [,249]     [,250] #> [1,] -0.4479961 -0.006974117 0.09923905 -0.2601413 -0.3375999 -0.1791233 #>          [,251]     [,252]     [,253]      [,254]     [,255]     [,256] #> [1,] -0.2361067 -0.4420574 -0.3755025 -0.06035161 -0.6303749 -0.2085293 #>          [,257]   [,258]    [,259]     [,260]      [,261]     [,262] #> [1,] -0.2460261 0.066054 0.1661936 -0.3811589 -0.04792709 -0.3483031 #>           [,263]      [,264]     [,265]    [,266]    [,267]      [,268] #> [1,] -0.05440467 0.001183344 -0.3474706 0.3526993 0.2571971 -0.09922631 #>         [,269]     [,270]    [,271]     [,272]       [,273]      [,274] #> [1,] 0.1153188 -0.3314466 0.1491378 -0.1932919 -0.005444349 -0.08372668 #>           [,275]     [,276]     [,277]     [,278]    [,279]    [,280] #> [1,] -0.03646893 -0.1469158 0.04316179 -0.2297147 0.4618018 0.3254481 #>          [,281]     [,282]     [,283]     [,284]     [,285]     [,286] #> [1,] 0.03710522 -0.1356593 -0.1414892 -0.3237546 0.06751768 -0.4881009 #>           [,287]     [,288]     [,289]     [,290]      [,291]     [,292] #> [1,] -0.04064863 -0.4389247 0.01393473 -0.4490746 -0.08374353 -0.2351086 #>          [,293]     [,294]    [,295]     [,296]     [,297]      [,298] #> [1,] -0.2595929 -0.2892943 0.0187314 0.04828643 -0.5318287 0.001703268 #>         [,299]     [,300]     [,301]      [,302]     [,303]     [,304] #> [1,] 0.3872318 -0.3053184 -0.3161935 -0.02585602 -0.1976158 0.06935806 #>         [,305]     [,306]    [,307]    [,308]    [,309]    [,310]     [,311] #> [1,] 0.2159638 0.02666112 0.3523722 0.2415402 0.4963852 0.2640314 -0.6509184 #>          [,312]     [,313]     [,314]    [,315]     [,316]     [,317]    [,318] #> [1,] -0.3822798 -0.5179733 -0.1105386 0.3234139 -0.1054941 -0.4737686 0.1140962 #>          [,319]    [,320]   [,321]     [,322]    [,323]     [,324]      [,325] #> [1,] -0.3206925 0.4671344 0.275418 -0.3937831 0.3591762 -0.1521414 -0.09732834 #>          [,326]      [,327]     [,328]     [,329]      [,330]     [,331] #> [1,] -0.3992219 -0.03445382 -0.3914136 -0.2727389 -0.03326621 -0.2964142 #>         [,332]     [,333]     [,334]     [,335]     [,336]     [,337] #> [1,] 0.3302523 -0.1798476 0.07374521 -0.2162267 -0.6976227 -0.6717011 #>           [,338]     [,339]     [,340]     [,341]    [,342]    [,343] #> [1,] -0.02417582 -0.1656235 -0.3969773 0.05654138 -0.141692 -0.288047 #>          [,344]     [,345]    [,346]    [,347]     [,348]    [,349]      [,350] #> [1,] -0.3961201 -0.1703454 -0.101375 0.2994065 -0.7042644 0.2274668 -0.02730044 #>         [,351]     [,352]     [,353]     [,354]    [,355]     [,356] #> [1,] 0.3476221 0.09867234 -0.7348192 -0.2863705 0.1687208 -0.4820483 #>           [,357]      [,358]     [,359]    [,360]     [,361]     [,362] #> [1,] -0.06109198 -0.07661741 0.02656891 0.4003039 -0.1388846 0.08811699 #>           [,363]       [,364]     [,365]     [,366]     [,367]    [,368] #> [1,] -0.09982418 -0.004344244 0.04466745 0.09512547 -0.1146815 0.2855329 #>         [,369]   [,370]     [,371]      [,372]     [,373]     [,374]    [,375] #> [1,] 0.1902983 0.101781 -0.1342026 -0.02474704 0.03568436 0.07287115 0.2446889 #>         [,376]      [,377]     [,378]      [,379]     [,380]     [,381] #> [1,] 0.5241989 -0.05052358 -0.1644161 -0.05570708 -0.4892531 -0.1574536 #>          [,382]     [,383]    [,384]    [,385]   [,386]     [,387]     [,388] #> [1,] -0.5260966 -0.1292943 0.1002102 0.1601235 0.187127 -0.2679951 -0.1343047 #>          [,389]     [,390]    [,391]      [,392]     [,393]    [,394]    [,395] #> [1,] 0.07462059 -0.2627236 0.1004333 -0.02927957 -0.1021179 0.2069661 0.3122759 #>          [,396]    [,397]    [,398]     [,399]     [,400]    [,401]     [,402] #> [1,] -0.2513259 0.1069687 0.2457681 -0.4532533 -0.6179333 -0.507501 -0.8771705 #>         [,403]      [,404]     [,405]      [,406]       [,407]     [,408] #> [1,] 0.4132778 -0.04502961 -0.2028775 -0.09135045 -0.009898464 -0.4675206 #>          [,409]     [,410]    [,411]    [,412]    [,413]     [,414]     [,415] #> [1,] -0.1510533 -0.2375409 0.1936356 0.0214113 0.1404991 -0.2425633 0.06497259 #>          [,416]    [,417]     [,418]    [,419]     [,420]     [,421]     [,422] #> [1,] -0.1174446 0.1461185 -0.1942378 -0.341305 -0.3197543 -0.4405409 -0.2901453 #>           [,423]    [,424]     [,425]     [,426]     [,427]       [,428] #> [1,] -0.07607579 0.1193516 0.02544566 0.06968411 -0.3038492 2.718561e-06 #>         [,429]     [,430]     [,431]    [,432]    [,433]     [,434]  [,435] #> [1,] 0.1242771 -0.2726906 -0.4332776 0.4736505 0.4145624 0.09065823 0.31209 #>          [,436]    [,437]     [,438]      [,439]   [,440]      [,441] #> [1,] -0.2285478 0.3922779 -0.2554167 0.004949788 0.341916 -0.09955347 #>            [,442]     [,443]     [,444]     [,445]    [,446]    [,447] #> [1,] -0.000451799 -0.3114271 -0.5535115 -0.2562066 -0.559197 0.0681566 #>         [,448]     [,449]    [,450]     [,451]      [,452]     [,453] #> [1,] -0.324252 -0.1836032 0.4020801 0.07136019 -0.05368418 -0.1334398 #>          [,454]     [,455]    [,456]     [,457]     [,458]     [,459] #> [1,] 0.04092517 -0.2866775 -0.375767 -0.2492362 -0.4294488 -0.5089387 #>          [,460]    [,461]    [,462]     [,463]      [,464]    [,465]    [,466] #> [1,] -0.1890059 0.3061288 0.2897423 -0.2941801 -0.04074266 0.2353345 0.2255159 #>          [,467]    [,468]    [,469]    [,470]      [,471]      [,472]    [,473] #> [1,] -0.6516033 0.2825899 0.1619659 0.1151105 -0.06245863 -0.08483321 0.2075982 #>         [,474]    [,475]   [,476]    [,477]     [,478]   [,479]    [,480] #> [1,] -0.427963 0.1562078 0.454991 0.1730896 -0.0872417 -0.37493 0.1494314 #>          [,481]     [,482]     [,483]     [,484]     [,485]     [,486] #> [1,] -0.1912623 -0.6078868 -0.3161388 -0.6243781 -0.1956748 -0.2102772 #>          [,487]    [,488]     [,489]     [,490]     [,491]    [,492]     [,493] #> [1,] -0.5670591 0.1105007 -0.1635546 -0.2200912 -0.1127447 0.1517004 0.09749425 #>         [,494]     [,495]     [,496]    [,497]      [,498]     [,499] #> [1,] 0.3967857 -0.1250468 -0.5444598 0.0239898 0.001830334 -0.4122443 #>           [,500]     [,501]      [,502]     [,503]    [,504]     [,505] #> [1,] -0.05562861 0.02404941 -0.03802041 -0.1516371 0.4926238 -0.5710808 #>         [,506]     [,507]    [,508]   [,509]     [,510]     [,511]      [,512] #> [1,] -0.679369 -0.5906933 0.1724392 0.144281 -0.5071561 0.07248173 -0.05732098 #>         [,513]      [,514]     [,515]    [,516]    [,517]    [,518]    [,519] #> [1,] -0.518422 0.006929505 -0.1997949 -0.115154 0.1903283 0.1311085 0.3420828 #>         [,520]     [,521]     [,522]     [,523]     [,524]    [,525]     [,526] #> [1,] -0.151294 0.05313218 -0.3596626 -0.4375772 -0.2838699 0.3202854 0.05094085 #>         [,527]     [,528]     [,529]     [,530]     [,531]    [,532]     [,533] #> [1,] 0.5958368 -0.1626741 -0.3419755 -0.6435741 -0.3153021 0.0153436 -0.4266602 #>         [,534]     [,535]     [,536]     [,537]     [,538]     [,539]    [,540] #> [1,] 0.1730538 -0.1183556 -0.2894937 0.02723953 -0.6210237 -0.4522202 -0.259241 #>          [,541]      [,542]     [,543]    [,544]    [,545]     [,546] #> [1,] -0.4395948 -0.03078509 0.06880243 0.1941715 0.1784555 -0.4568134 #>          [,547]     [,548]     [,549]    [,550]     [,551]    [,552]     [,553] #> [1,] -0.4530125 -0.3238617 0.07349315 0.6334421 0.03772795 0.2192832 -0.2478208 #>          [,554]   [,555]      [,556]     [,557]     [,558]     [,559] #> [1,] -0.4836128 0.253581 -0.04327259 -0.6280736 -0.5372544 -0.1320379 #>          [,560]      [,561]    [,562]    [,563]     [,564]      [,565] #> [1,] -0.2162596 -0.01866625 -0.730014 -0.315372 -0.4839134 -0.00277308 #>           [,566]     [,567]     [,568]     [,569]     [,570]      [,571] #> [1,] -0.07363118 -0.1680078 0.02203517 -0.2151919 -0.2789435 -0.04119219 #>         [,572]     [,573]     [,574]     [,575]       [,576]     [,577] #> [1,] -0.438534 -0.8129326 0.01307225 -0.4559524 0.0002264148 -0.1484976 #>          [,578]    [,579]     [,580]      [,581]     [,582]     [,583] #> [1,] -0.0942248 -0.302528 -0.1981995 -0.01016782 -0.3555806 -0.3295325 #>          [,584]      [,585]      [,586]     [,587]     [,588]     [,589] #> [1,] -0.2963655 -0.02279325 -0.05295112 -0.3967697 -0.0908271 -0.4162231 #>          [,590]     [,591]     [,592]     [,593]    [,594]      [,595] #> [1,] -0.4215507 0.06279604 -0.4916127 -0.2330661 0.1067463 -0.02601391 #>          [,596]    [,597]     [,598]     [,599]      [,600]    [,601]   [,602] #> [1,] -0.2129008 0.0181564 -0.2787727 0.01050046 -0.02293262 0.2223046 0.263734 #>          [,603]      [,604]    [,605]    [,606]     [,607]     [,608]    [,609] #> [1,] 0.08344489 -0.07719873 0.1121589 0.3598621 0.04823216 -0.1594349 0.1721317 #>         [,610]   [,611]      [,612]     [,613]     [,614]    [,615]    [,616] #> [1,] 0.2813022 0.303467 -0.06777689 -0.2509411 -0.3418186 0.0328223 -0.644732 #>          [,617]    [,618]  [,619]     [,620]    [,621]     [,622]    [,623] #> [1,] -0.7153082 0.1617313 0.10629 0.07336079 0.4498252 0.06491363 0.3013556 #>         [,624]     [,625]     [,626]    [,627]     [,628]     [,629]    [,630] #> [1,] 0.1137377 -0.1399565 -0.0524295 0.1610719 -0.2340777 -0.1092866 0.1721288 #>         [,631]    [,632]     [,633]    [,634]   [,635]     [,636]      [,637] #> [1,] 0.1104345 0.3337451 -0.6740877 0.3923188 0.353565 0.05980944 0.004435707 #>          [,638]    [,639]    [,640]     [,641]     [,642]     [,643]     [,644] #> [1,] -0.5104431 0.3168442 0.2305298 -0.0721237 0.09182662 -0.7395475 -0.2320775 #>         [,645]    [,646]    [,647]     [,648]     [,649]     [,650]     [,651] #> [1,] 0.2681816 -0.149823 0.3606098 -0.2250017 -0.2326291 -0.3462566 -0.3507205 #>          [,652]     [,653]    [,654]    [,655]    [,656]    [,657]    [,658] #> [1,] 0.08455768 -0.2321899 0.2022335 -0.192476 0.1860587 0.1682292 0.3522308 #>          [,659]     [,660]      [,661]      [,662]     [,663]     [,664] #> [1,] -0.2808659 -0.1909165 -0.04561629 -0.08696086 0.06850443 -0.2549594 #>          [,665]    [,666]      [,667]     [,668]      [,669]    [,670] #> [1,] -0.2456743 0.3088164 -0.06812815 0.09183572 -0.02630056 0.1300163 #>           [,671]     [,672]      [,673]       [,674]     [,675]    [,676] #> [1,] -0.07427146 -0.2305752 0.006066832 -0.002372688 0.01340722 0.2886323 #>         [,677]    [,678]     [,679]     [,680]      [,681]     [,682]    [,683] #> [1,] 0.1156314 0.7165085 -0.3988235 -0.2334547 -0.02226386 -0.2624707 0.3711555 #>          [,684]     [,685]     [,686]    [,687]     [,688]      [,689] #> [1,] -0.3957407 0.02852681 -0.1377019 0.0746057 0.04818218 -0.08636282 #>          [,690]    [,691]     [,692]     [,693]     [,694]    [,695]     [,696] #> [1,] -0.0845121 0.1107688 -0.2159221 -0.6215354 -0.1577832 0.2152253 -0.2591057 #>         [,697]     [,698]    [,699]     [,700]     [,701]    [,702]     [,703] #> [1,] -0.577867 -0.1708115 0.1521073 0.02631626 -0.1020565 0.2614448 -0.1711585 #>          [,704]     [,705]    [,706]     [,707]     [,708]     [,709] #> [1,] 0.04863099 -0.1226905 0.1806071 -0.1193475 -0.1711939 -0.1976932 #>          [,710]      [,711]    [,712]     [,713]      [,714]      [,715] #> [1,] 0.04731678 -0.09844988 0.1294045 -0.1710504 -0.01472224 -0.03048315 #>          [,716]      [,717]     [,718]    [,719]     [,720]   [,721]     [,722] #> [1,] -0.1876083 -0.04167693 0.04882804 -0.229371 -0.5006151 0.352309 -0.2351783 #>         [,723]     [,724]      [,725]     [,726]     [,727]     [,728] #> [1,] 0.4484469 -0.3305573 -0.09545681 -0.1449468 0.06365454 -0.7390684 #>          [,729]     [,730]     [,731]     [,732]     [,733]     [,734] #> [1,] -0.5628671 0.04572143 -0.6453858 -0.1485861 -0.1506398 -0.1255744 #>          [,735]    [,736]   [,737]     [,738]    [,739]     [,740]   [,741] #> [1,] -0.2906668 0.5106769 0.259564 -0.4884853 0.3685193 -0.2098729 0.493077 #>          [,742]   [,743]     [,744]     [,745]    [,746]    [,747]     [,748] #> [1,] -0.0172828 0.515591 -0.1513684 -0.2242825 0.3382126 0.1519002 0.08015758 #>          [,749]      [,750]     [,751]    [,752]      [,753]    [,754] #> [1,] -0.5984455 -0.02056031 -0.3215703 0.1411489 -0.02216568 0.1587109 #>         [,755]     [,756]     [,757]      [,758]    [,759]     [,760] #> [1,] 0.3682363 -0.2319827 0.03120808 -0.07546373 -0.335836 -0.1609052 #>          [,761]     [,762]     [,763]    [,764]     [,765]    [,766]   [,767] #> [1,] -0.2748862 -0.6876545 -0.7194547 0.1592366 -0.2744653 -0.505537 -0.38381 #>         [,768]     [,769]     [,770]     [,771]     [,772]     [,773] #> [1,] 0.2757826 -0.1477684 -0.3682804 -0.3164242 0.04964263 -0.3839583 #>          [,774]    [,775]     [,776]     [,777]     [,778]     [,779] #> [1,] -0.5580321 0.2048262 -0.1313473 0.07595678 0.06447425 -0.2141684 #>          [,780]      [,781]    [,782]   [,783]     [,784]     [,785]     [,786] #> [1,] -0.3946361 -0.04011207 0.3534491 0.118521 -0.6005858 0.02452639 -0.0770414 #>          [,787]    [,788]     [,789]     [,790]     [,791]     [,792] #> [1,] -0.4665722 0.1926403 -0.6348781 -0.2417374 -0.1709418 -0.3624618 #>           [,793]     [,794]      [,795]     [,796]     [,797]      [,798] #> [1,] -0.03813069 0.05140955 -0.05024901 -0.4659536 -0.2752255 -0.01109284 #>         [,799]     [,800]     [,801]     [,802]    [,803]    [,804]     [,805] #> [1,] -0.105984 -0.2013661 -0.2366169 -0.2655666 0.1971359 0.1400764 -0.1916754 #>         [,806]     [,807]     [,808]     [,809]     [,810]     [,811]    [,812] #> [1,] 0.1422872 -0.7281616 -0.4301213 -0.4131678 -0.3619347 -0.6011312 0.2898152 #>         [,813]      [,814]    [,815]     [,816]    [,817]     [,818]     [,819] #> [1,] 0.1536461 -0.09740111 0.2951693 -0.3574161 0.1555102 -0.2817118 -0.1031948 #>          [,820]     [,821]     [,822]    [,823]      [,824]    [,825]    [,826] #> [1,] -0.5550926 -0.4158697 -0.4308954 0.2818024 -0.05036387 0.4197501 0.1429169 #>         [,827]      [,828]     [,829]     [,830]       [,831]     [,832] #> [1,] 0.0444365 -0.07236357 -0.1133322 -0.1110629 -0.000534899 -0.3261195 #>          [,833]     [,834]    [,835]     [,836]     [,837]     [,838]    [,839] #> [1,] -0.7195718 -0.3161611 -0.658369 -0.3164733 -0.2035401 -0.2973574 0.1768633 #>         [,840]    [,841]    [,842]    [,843]     [,844]    [,845]     [,846] #> [1,] -0.624854 0.3623008 0.2275615 -0.107137 -0.4624294 0.0610231 -0.1667173 #>         [,847]    [,848]    [,849]     [,850]     [,851]      [,852]    [,853] #> [1,] 0.3818163 0.2262359 0.2950863 -0.1401362 -0.3770052 -0.05640366 0.1238656 #>        [,854]    [,855]     [,856]     [,857]    [,858]      [,859]      [,860] #> [1,] 0.211142 -0.436826 -0.3877113 -0.3667119 0.1512457 -0.02504857 -0.02925132 #>          [,861]    [,862]    [,863]     [,864]     [,865]     [,866]     [,867] #> [1,] -0.5111602 0.1149678 0.1338808 -0.1265356 -0.2638897 -0.1824497 -0.5208223 #>         [,868]     [,869]      [,870]    [,871]    [,872]     [,873]     [,874] #> [1,] 0.1134095 -0.1059987 -0.07168895 0.5629926 0.1560093 0.08898018 -0.0207131 #>          [,875]     [,876]     [,877]    [,878]     [,879]      [,880] #> [1,] 0.09713215 -0.2210443 -0.1546347 0.1361165 -0.5707249 -0.06151219 #>           [,881]      [,882]     [,883]       [,884]      [,885]    [,886] #> [1,] -0.08731015 -0.08185002 -0.2623314 -0.003455618 -0.06157804 -0.194016 #>         [,887]     [,888]     [,889]    [,890]    [,891]      [,892]     [,893] #> [1,] 0.3731067 -0.2350416 -0.3509488 0.2190439 0.2843734 -0.05807407 -0.4821561 #>         [,894]     [,895]    [,896]     [,897]    [,898]     [,899]     [,900] #> [1,] 0.7837459 -0.3820455 0.2448516 0.06053143 -0.201808 -0.3880505 -0.1392575 #>         [,901]     [,902]     [,903]     [,904]   [,905]     [,906]    [,907] #> [1,] 0.2849913 -0.3309872 -0.4513906 -0.7344506 0.433351 -0.5110451 0.3189679 #>          [,908]     [,909]   [,910]     [,911]     [,912]     [,913]     [,914] #> [1,] -0.2623693 -0.6693216 0.255717 -0.5737073 -0.1500405 -0.2853789 -0.2559435 #>        [,915]     [,916]     [,917]    [,918]      [,919]    [,920]     [,921] #> [1,] 0.170007 -0.5039081 -0.2366158 0.1845242 -0.08952485 -0.182355 -0.2469639 #>          [,922]     [,923]     [,924]     [,925]     [,926]     [,927] #> [1,] -0.4681401 -0.1992281 -0.1264871 0.04799264 -0.1578607 -0.3944334 #>           [,928]     [,929]    [,930]    [,931]     [,932]     [,933]    [,934] #> [1,] -0.03477148 0.08045862 0.1671861 0.0142273 -0.2790249 -0.1420611 0.0477582 #>          [,935]   [,936]     [,937]      [,938]     [,939]     [,940] #> [1,] -0.1913397 0.376753 0.03080057 -0.09572669 -0.1490794 -0.4895931 #>          [,941]       [,942]     [,943]    [,944]     [,945]     [,946] #> [1,] -0.5837909 -0.005140775 -0.3227696 0.1555017 -0.1179078 -0.2809732 #>          [,947]     [,948]     [,949]     [,950]    [,951]     [,952] #> [1,] -0.2657287 -0.4107055 -0.5496607 -0.4667549 0.2704709 -0.5435273 #>          [,953]    [,954]     [,955]     [,956]     [,957]     [,958] #> [1,] -0.8236507 0.3110473 -0.2773452 -0.1423978 -0.3101303 -0.2687079 #>           [,959]     [,960]    [,961]    [,962]      [,963]     [,964] #> [1,] -0.05729538 -0.2985873 0.2026219 0.1597421 -0.05683189 -0.1270044 #>         [,965]     [,966]     [,967]     [,968]     [,969]     [,970]    [,971] #> [1,] 0.1529081 -0.1273856 0.02185206 -0.4525246 -0.6290246 -0.5143938 0.1580556 #>          [,972]      [,973]    [,974]     [,975]      [,976]     [,977] #> [1,] -0.4510659 -0.03450477 0.1620349 -0.1826278 -0.01137621 -0.5706061 #>          [,978]     [,979]     [,980]     [,981]     [,982]      [,983] #> [1,] -0.2152963 -0.1138722 -0.1222126 -0.2331406 0.04444069 -0.02925456 #>          [,984]     [,985]     [,986]      [,987]     [,988]     [,989] #> [1,] -0.1420128 -0.3643351 -0.3512288 -0.08787402 -0.2934267 -0.1116819 #>           [,990]     [,991]     [,992]    [,993]     [,994]    [,995] #> [1,] -0.06066886 -0.4423122 -0.2932357 -0.106583 -0.4389098 0.4801276 #>          [,996]    [,997]     [,998]     [,999]    [,1000]  [,1001]   [,1002] #> [1,] -0.2320984 -0.417657 -0.6247489 -0.5818252 -0.3095277 0.233143 0.2892679 #>         [,1003]   [,1004]    [,1005]   [,1006]   [,1007]    [,1008]   [,1009] #> [1,] -0.1025895 0.1414871 0.04752024 0.2563739 -0.204822 -0.3554215 0.1071921 #>         [,1010]   [,1011]   [,1012]   [,1013]    [,1014]    [,1015]    [,1016] #> [1,] 0.01952977 0.1413559 -0.441812 0.1927568 -0.1311472 -0.3070106 -0.1886828 #>        [,1017]    [,1018]    [,1019]   [,1020]    [,1021]   [,1022]   [,1023] #> [1,] 0.6071574 0.05902228 -0.1569676 0.4684253 -0.3371433 0.4333124 0.0756148 #>          [,1024]    [,1025]   [,1026]    [,1027]    [,1028]    [,1029] #> [1,] -0.05681698 -0.7613831 -0.293124 0.01275787 -0.1175957 -0.5446584 #>         [,1030]    [,1031]      [,1032]   [,1033]   [,1034]    [,1035] #> [1,] 0.04100599 -0.6519222 -0.003903987 0.1851498 0.2533701 -0.2082798 #>        [,1036]    [,1037]    [,1038]    [,1039]    [,1040]    [,1041]   [,1042] #> [1,] 0.1107797 -0.5366364 0.05915374 -0.4999442 -0.3424997 0.01909391 0.2602918 #>        [,1043]     [,1044]  [,1045]    [,1046]    [,1047]    [,1048]    [,1049] #> [1,] -0.821798 -0.07098228 -0.17077 0.09328588 0.01524362 -0.1855984 -0.1193294 #>         [,1050]    [,1051]    [,1052]   [,1053]   [,1054]    [,1055] #> [1,] -0.1023296 -0.8089351 -0.4433538 -0.184268 0.0133621 -0.4706455 #>          [,1056]    [,1057]    [,1058]    [,1059]     [,1060]    [,1061] #> [1,] -0.09633059 -0.1026037 -0.2052637 0.07233016 -0.08535838 -0.2961107 #>        [,1062]      [,1063]    [,1064]   [,1065]    [,1066]    [,1067] #> [1,] 0.1458624 -0.001693657 -0.7553816 0.5308632 -0.2677102 -0.0783008 #>          [,1068]    [,1069]    [,1070]    [,1071]   [,1072]   [,1073] #> [1,] 0.002188968 -0.1440963 0.08936523 -0.3018351 0.3054909 0.2628854 #>           [,1074]   [,1075]    [,1076]     [,1077]    [,1078]    [,1079] #> [1,] -0.009640113 -0.152232 -0.4201194 -0.09603726 -0.1812873 -0.3152396 #>        [,1080]    [,1081]     [,1082]   [,1083]    [,1084]    [,1085] #> [1,] 0.4346964 -0.4471232 -0.02431933 0.3223785 -0.4278147 -0.4737483 #>         [,1086]     [,1087]    [,1088]    [,1089]    [,1090]   [,1091] #> [1,] -0.2582881 -0.05850451 -0.5350193 -0.5925893 -0.4779508 -0.126504 #>         [,1092]    [,1093]    [,1094]    [,1095]    [,1096]   [,1097] #> [1,] -0.3767762 -0.4538845 -0.3944319 -0.5132887 -0.4433585 0.2793079 #>          [,1098]    [,1099]    [,1100]    [,1101]    [,1102]   [,1103] #> [1,] -0.06539561 -0.5637022 -0.3412418 -0.4660405 -0.3741562 0.1644827 #>         [,1104]    [,1105]    [,1106]     [,1107]     [,1108]    [,1109] #> [1,] -0.3653847 0.06373431 -0.1533443 -0.02522124 -0.08203616 -0.2006813 #>         [,1110]   [,1111]    [,1112]     [,1113]    [,1114]    [,1115] #> [1,] -0.2997651 0.0297125 0.02436165 -0.07205558 0.08143018 -0.4024809 #>         [,1116]    [,1117]   [,1118]   [,1119]   [,1120]      [,1121] #> [1,] -0.2233415 -0.5735518 0.2591774 0.2718049 0.1995348 -0.003187532 #>          [,1122]   [,1123]    [,1124]   [,1125]     [,1126]     [,1127] #> [1,] 0.001989102 0.2604769 -0.2521036 0.1551984 -0.07036895 -0.01509443 #>        [,1128]    [,1129]   [,1130]     [,1131]    [,1132]    [,1133]   [,1134] #> [1,] 0.3616651 -0.3081128 0.2578606 -0.07953247 0.06767295 -0.2274339 0.1999598 #>         [,1135]    [,1136]    [,1137]    [,1138]   [,1139]    [,1140] #> [1,] -0.5127156 -0.5644306 -0.2588397 -0.1618699 0.1298852 0.08236281 #>         [,1141]    [,1142]    [,1143]    [,1144]     [,1145]   [,1146] [,1147] #> [1,] -0.1178764 -0.3492236 -0.5479478 -0.1221081 -0.04007021 -0.230879 0.36792 #>        [,1148]    [,1149]    [,1150]    [,1151]   [,1152]   [,1153]    [,1154] #> [1,] -0.156291 -0.2790938 -0.3224909 -0.2289162 0.1474852 -0.197898 -0.1948195 #>         [,1155]    [,1156]     [,1157]    [,1158]  [,1159]    [,1160] #> [1,] -0.3628457 0.05086719 -0.09852852 -0.3043814 0.397889 -0.1063667 #>          [,1161]    [,1162]    [,1163]     [,1164]     [,1165]     [,1166] #> [1,] -0.01212991 -0.3069255 -0.5216596 -0.09950993 -0.03124222 -0.08917268 #>         [,1167]    [,1168]    [,1169]    [,1170]    [,1171]      [,1172] #> [1,] -0.6248279 -0.1074596 -0.1116779 0.02297232 0.09734631 -0.008827297 #>          [,1173]    [,1174]    [,1175]    [,1176]     [,1177]   [,1178] #> [1,] -0.01990627 -0.1456974 0.02262805 -0.2329796 -0.02360377 0.2890222 #>         [,1179]    [,1180]    [,1181]    [,1182]    [,1183]   [,1184]   [,1185] #> [1,] -0.2419889 0.08364118 -0.1005704 -0.2165474 -0.3290327 0.1070553 0.1436148 #>          [,1186]    [,1187]    [,1188]    [,1189]  [,1190]    [,1191] #> [1,] -0.06167658 -0.5492959 -0.3068367 -0.6064018 -0.30448 -0.2408965 #>          [,1192]  [,1193]   [,1194]    [,1195]     [,1196]    [,1197] #> [1,] -0.06813596 0.125686 0.1573081 -0.1871791 -0.04056362 -0.4243319 #>         [,1198]     [,1199]    [,1200]      [,1201]    [,1202]    [,1203] #> [1,] -0.3405917 0.004652253 -0.2494692 0.0002147932 -0.6828391 -0.5652389 #>         [,1204]    [,1205]   [,1206]    [,1207]    [,1208]    [,1209]   [,1210] #> [1,] -0.2469718 0.04067317 -0.271888 -0.4030336 -0.5248852 -0.3753153 -0.210126 #>        [,1211]   [,1212]    [,1213]    [,1214]    [,1215]    [,1216]   [,1217] #> [1,] -0.527247 0.2676384 -0.0883884 -0.1724275 -0.2460289 -0.2083962 -0.268441 #>           [,1218]     [,1219]    [,1220]    [,1221]    [,1222]    [,1223] #> [1,] -0.006927736 -0.06804156 -0.2197626 -0.2461463 -0.1099362 -0.7511407 #>       [,1224]    [,1225]      [,1226]    [,1227]    [,1228]    [,1229] #> [1,] 0.502931 -0.5740735 -0.001129848 -0.6463363 -0.1538646 0.03610258 #>        [,1230]    [,1231]    [,1232]    [,1233]     [,1234]    [,1235] #> [1,] 0.2378133 -0.3276805 -0.5572209 -0.6414219 -0.04296902 -0.3410676 #>        [,1236]   [,1237]   [,1238]   [,1239]   [,1240]    [,1241]  [,1242] #> [1,] 0.3373795 0.2350159 0.2089067 0.1698335 0.3116564 0.02985201 0.198512 #>         [,1243]    [,1244]    [,1245]    [,1246]    [,1247]   [,1248]   [,1249] #> [1,] -0.4452677 0.05660894 0.06182271 -0.0877585 -0.6656379 0.6188027 0.3314152 #>          [,1250]      [,1251]   [,1252]    [,1253]    [,1254]   [,1255] #> [1,] -0.08759461 -0.005195386 0.1206251 -0.2558033 -0.6266138 0.3857123 #>         [,1256]   [,1257]      [,1258]  [,1259]    [,1260]   [,1261]   [,1262] #> [1,] 0.05767382 0.5586079 0.0001701079 0.144233 -0.1878185 0.2002526 -0.191417 #>         [,1263]    [,1264]     [,1265]  [,1266]    [,1267]   [,1268]    [,1269] #> [1,] -0.4458519 -0.1464435 -0.07890845 0.257315 0.08924333 0.2425811 -0.2672027 #>          [,1270]   [,1271]    [,1272]      [,1273]    [,1274]    [,1275] #> [1,] -0.05785219 0.1551977 -0.4887855 -0.002519894 0.01850799 -0.5463794 #>         [,1276]    [,1277]    [,1278]     [,1279]   [,1280]     [,1281] #> [1,] 0.02052431 -0.1879822 -0.0340689 -0.04019276 0.1909213 -0.01689773 #>         [,1282]    [,1283]   [,1284]     [,1285]  [,1286]    [,1287]    [,1288] #> [1,] -0.7575803 -0.1231472 0.2985197 -0.03311428 0.354736 -0.1140198 0.01265671 #>        [,1289]    [,1290]    [,1291]    [,1292]     [,1293]    [,1294] #> [1,] 0.1932895 0.03098205 -0.3056526 0.03985564 -0.05206311 -0.1134433 #>         [,1295]    [,1296]    [,1297]    [,1298]    [,1299]    [,1300] #> [1,] -0.7022008 -0.5828611 -0.2102601 -0.3325934 -0.5589038 -0.5939273 #>         [,1301]   [,1302]   [,1303]    [,1304]     [,1305]    [,1306]   [,1307] #> [1,] -0.2911827 0.3001148 0.3049121 0.04576031 -0.02377175 -0.1473069 0.3276175 #>         [,1308]    [,1309]     [,1310]    [,1311]   [,1312]    [,1313] #> [1,] -0.1635895 -0.1408158 -0.03241009 -0.1475006 0.2426536 -0.5396941 #>         [,1314]    [,1315]    [,1316]     [,1317]   [,1318]   [,1319] #> [1,] 0.01386796 0.08848915 -0.4923164 -0.04275174 0.1288079 0.2441646 #>         [,1320]    [,1321]    [,1322]   [,1323]    [,1324]    [,1325] #> [1,] -0.2067916 -0.4208914 -0.3267905 0.3207632 -0.5509066 -0.1043914 #>         [,1326]    [,1327]     [,1328]    [,1329]    [,1330]    [,1331] #> [1,] 0.02171387 0.02811713 -0.03863289 -0.2511782 0.03950754 0.04463441 #>        [,1332]     [,1333]      [,1334]    [,1335]    [,1336]    [,1337] #> [1,] 0.1695731 0.008414002 -0.003542552 -0.1020715 -0.3098319 0.01014287 #>         [,1338]    [,1339]    [,1340]    [,1341]    [,1342]   [,1343] #> [1,] -0.0281681 -0.1929836 0.07099377 0.05837264 -0.5011892 0.2035465 #>          [,1344]   [,1345]    [,1346]   [,1347]    [,1348]   [,1349]    [,1350] #> [1,] -0.09020417 0.2212183 -0.3893532 0.1008219 -0.1340055 0.1345717 -0.1822628 #>         [,1351]    [,1352]    [,1353]    [,1354]   [,1355]   [,1356] #> [1,] -0.0744112 -0.1642747 -0.3153084 -0.2644758 0.1412641 0.2747602 #>          [,1357]    [,1358]    [,1359]    [,1360]     [,1361]  [,1362] #> [1,] -0.02687833 -0.2075003 -0.4268468 -0.0145125 -0.06156566 0.191869 #>        [,1363]    [,1364]    [,1365]    [,1366]    [,1367]     [,1368] #> [1,] 0.1484847 -0.2274704 -0.2265069 -0.0933306 -0.2791257 -0.09754508 #>        [,1369]    [,1370]    [,1371]   [,1372]    [,1373]     [,1374]   [,1375] #> [1,] 0.2153511 -0.2412569 0.08319203 0.1947973 -0.2088783 -0.05427086 0.3921941 #>        [,1376]    [,1377]   [,1378]  [,1379]   [,1380]    [,1381]    [,1382] #> [1,] 0.2421328 -0.3050915 0.5236298 0.140782 0.1223247 -0.1480386 -0.1680676 #>           [,1383]     [,1384]    [,1385]   [,1386]    [,1387]   [,1388] #> [1,] -0.009036643 -0.01833788 -0.3304119 0.3316128 0.07952261 0.1133682 #>         [,1389]   [,1390]    [,1391]    [,1392]   [,1393]    [,1394]   [,1395] #> [1,] -0.4869968 0.1377558 -0.1494681 -0.4849986 0.4079253 -0.4054791 -0.497361 #>           [,1396]   [,1397]     [,1398]     [,1399]      [,1400]     [,1401] #> [1,] -0.005359792 0.0275191 -0.09414636 -0.04391347 -0.001582426 -0.06064589 #>         [,1402]    [,1403]     [,1404]    [,1405]    [,1406]    [,1407] #> [1,] -0.3054495 -0.2276599 -0.02701857 -0.1110104 0.01796825 -0.1588085 #>        [,1408]    [,1409]    [,1410]   [,1411]    [,1412]    [,1413]    [,1414] #> [1,] 0.1384891 0.02819671 -0.3249134 0.3442938 -0.1560636 -0.1747009 -0.3172018 #>          [,1415]    [,1416]   [,1417]    [,1418]    [,1419] [,1420]    [,1421] #> [1,] -0.06928386 -0.2475381 0.1619566 -0.1810431 -0.2381826 -0.4918 -0.6974258 #>        [,1422]    [,1423]    [,1424]    [,1425]     [,1426]     [,1427] #> [1,] 0.3696706 -0.5998018 -0.2210245 -0.3385308 -0.02872542 -0.08041833 #>       [,1428]   [,1429]    [,1430]   [,1431]   [,1432]    [,1433]    [,1434] #> [1,] -0.26619 -0.209683 -0.5081197 0.1407647 0.1872753 -0.2108188 -0.4454246 #>        [,1435]   [,1436]   [,1437]   [,1438]     [,1439]   [,1440]    [,1441] #> [1,] -0.142342 0.2882776 0.3789563 0.1600028 -0.03948663 0.2901564 -0.5638726 #>          [,1442]   [,1443]   [,1444]    [,1445]    [,1446]    [,1447]   [,1448] #> [1,] 0.002240117 0.1330951 -0.259946 -0.2830429 0.08390546 -0.1905996 0.3047621 #>         [,1449]    [,1450]    [,1451]    [,1452]   [,1453]    [,1454] #> [1,] -0.2535441 -0.6461291 -0.5116613 -0.1782456 0.2789013 -0.3707943 #>         [,1455]   [,1456]   [,1457]    [,1458]   [,1459]    [,1460]   [,1461] #> [1,] -0.6204159 0.2342485 0.1148315 0.07367579 0.2447453 -0.2559387 0.1567992 #>         [,1462]    [,1463]   [,1464]    [,1465]   [,1466]     [,1467] #> [1,] -0.3365947 -0.2659846 0.4450982 -0.2374046 0.2422301 -0.05277556 #>         [,1468]    [,1469]     [,1470]    [,1471]    [,1472]    [,1473] #> [1,] -0.2023113 -0.1387432 -0.01505888 -0.3314814 -0.4354495 0.05804219 #>        [,1474] [,1475]    [,1476]    [,1477]   [,1478]    [,1479]    [,1480] #> [1,] 0.2518248 0.02823 0.07476692 -0.3278091 0.1488656 -0.3106292 -0.5133888 #>         [,1481]   [,1482]   [,1483]   [,1484]  [,1485]    [,1486]    [,1487] #> [1,] -0.5349934 0.1537115 0.2516918 0.4033024 0.180061 0.09132795 0.05202232 #>        [,1488]    [,1489]    [,1490]    [,1491]   [,1492]    [,1493]    [,1494] #> [1,] 0.2519544 -0.2595372 -0.3341607 -0.5864306 0.2394126 -0.3010666 -0.1173254 #>         [,1495]     [,1496]    [,1497]    [,1498]    [,1499]    [,1500] #> [1,] 0.03398016 -0.09159281 -0.1791559 -0.5046892 -0.4073042 -0.1322994 #>         [,1501]     [,1502]       [,1503]    [,1504]    [,1505]    [,1506] #> [1,] -0.3487503 -0.02612475 -3.827808e-05 -0.6079604 -0.1919813 -0.1053778 #>         [,1507]   [,1508]   [,1509]    [,1510]     [,1511]     [,1512] #> [1,] -0.4334553 0.2240632 0.4730769 -0.2303529 -0.03271068 -0.04326546 #>        [,1513]    [,1514]    [,1515]   [,1516]    [,1517]    [,1518]    [,1519] #> [1,] 0.4953662 -0.5821574 -0.1750224 -0.370088 -0.3469461 -0.1353605 -0.1770597 #>          [,1520]     [,1521]    [,1522]    [,1523]    [,1524]   [,1525] #> [1,] -0.07224078 0.008837142 0.00428965 -0.2066054 -0.1046257 0.3921732 #>          [,1526]   [,1527]   [,1528] [,1529]    [,1530]    [,1531]    [,1532] #> [1,] -0.04880325 0.1904735 -0.163581 0.36741 -0.4001731 -0.5774187 -0.2957286 #>        [,1533]    [,1534]   [,1535]   [,1536]    [,1537]    [,1538]    [,1539] #> [1,] 0.2436362 -0.5570239 -0.318202 -0.108914 -0.3719616 -0.2527913 -0.1063171 #>        [,1540]   [,1541]     [,1542]    [,1543]    [,1544]    [,1545] #> [1,] 0.1790733 0.1929729 -0.03481901 0.04646891 -0.6549128 0.07232666 #>          [,1546]   [,1547]    [,1548]    [,1549]    [,1550]    [,1551] #> [1,] -0.04072538 0.1291966 -0.2958595 0.09684646 -0.2686106 -0.1185188 #>        [,1552]      [,1553]    [,1554]   [,1555]    [,1556]   [,1557] #> [1,] 0.2706244 -0.004652356 0.04366893 -0.290418 -0.4616603 0.3490596 #>          [,1558]    [,1559]    [,1560]    [,1561]     [,1562]    [,1563] #> [1,] -0.06885037 -0.3385374 -0.2857491 -0.2107991 -0.05192651 -0.1787336 #>        [,1564]    [,1565]     [,1566]    [,1567]    [,1568]    [,1569] #> [1,] 0.4261169 -0.4932259 -0.02172881 -0.1307575 -0.1790088 -0.2009016 #>        [,1570]   [,1571]    [,1572]    [,1573]    [,1574]   [,1575]   [,1576] #> [1,] 0.1264511 0.1897021 -0.2597475 0.03989302 0.08366376 0.1897465 0.3547513 #>         [,1577]    [,1578]    [,1579]    [,1580]     [,1581]    [,1582] #> [1,] -0.4242311 -0.3529056 -0.3470666 -0.7039562 -0.05338921 -0.2800138 #>          [,1583]    [,1584]    [,1585]    [,1586]   [,1587]     [,1588] #> [1,] -0.04514104 -0.3733583 -0.2477947 -0.1107851 0.2983005 -0.02644891 #>       [,1589]    [,1590]    [,1591]    [,1592]    [,1593]    [,1594]    [,1595] #> [1,] 0.496933 0.02319026 0.08797372 -0.4206247 0.07786946 0.02594544 -0.3043272 #>        [,1596]     [,1597]    [,1598]   [,1599]   [,1600]    [,1601]    [,1602] #> [1,] 0.1238761 0.009355789 -0.2597053 0.1262201 0.5051865 -0.2381218 -0.3123477 #>         [,1603]    [,1604]    [,1605]    [,1606]     [,1607]    [,1608] #> [1,] 0.08365648 -0.1577406 -0.4529175 -0.4382374 -0.03686037 -0.3244579 #>         [,1609]    [,1610]    [,1611]   [,1612]    [,1613]     [,1614] #> [1,] -0.3633054 -0.8347673 -0.2903297 0.1937957 -0.2735224 0.007386102 #>          [,1615]  [,1616]    [,1617]    [,1618]    [,1619]     [,1620] #> [1,] -0.01804226 0.077554 -0.1426228 -0.3104225 0.03621208 -0.09777482 #>         [,1621]     [,1622]   [,1623]    [,1624]    [,1625]   [,1626]   [,1627] #> [1,] -0.4120408 -0.09275713 0.1100744 -0.2576955 -0.3840079 0.4069495 0.3049524 #>         [,1628]    [,1629]   [,1630]   [,1631]    [,1632]    [,1633]    [,1634] #> [1,] -0.0829932 -0.4308942 0.3940396 0.1809068 -0.5212929 -0.1846384 -0.1273228 #>         [,1635]     [,1636]  [,1637]    [,1638]   [,1639]     [,1640] #> [1,] 0.03152443 -0.02054833 0.228148 0.07133961 0.1457144 -0.07818111 #>          [,1641]      [,1642]    [,1643]     [,1644]     [,1645]    [,1646] #> [1,] 0.007649247 -0.007693661 -0.7526766 -0.03629961 -0.09999815 -0.6778039 #>         [,1647]    [,1648]    [,1649]   [,1650]     [,1651]   [,1652] #> [1,] -0.3957152 -0.4185568 -0.1543814 0.0579972 -0.06858839 0.3694348 #>         [,1653]  [,1654]   [,1655]     [,1656]    [,1657]    [,1658]    [,1659] #> [1,] -0.1101953 0.271675 0.1349688 -0.03817968 -0.7242256 -0.4375179 -0.6072079 #>         [,1660]     [,1661]    [,1662]    [,1663]    [,1664]   [,1665] #> [1,] -0.2364505 -0.07119238 -0.4020867 0.06199736 -0.2962966 -0.106349 #>        [,1666]    [,1667]    [,1668]    [,1669]   [,1670]   [,1671]    [,1672] #> [1,] 0.1581216 0.08264402 -0.1275373 0.05695038 0.4638791 0.2589667 -0.2995487 #>         [,1673]    [,1674]     [,1675]    [,1676]   [,1677]    [,1678] #> [1,] -0.5076111 -0.3688948 -0.01019807 -0.4056746 0.3632159 -0.1378222 #>         [,1679]    [,1680]    [,1681]    [,1682]    [,1683]   [,1684] #> [1,] -0.6066746 -0.3387202 -0.4513356 -0.1777546 -0.1552818 -0.584706 #>         [,1685]     [,1686]   [,1687]    [,1688]    [,1689]     [,1690] #> [1,] -0.1040387 -0.09563898 0.3429023 -0.1366388 -0.1584104 -0.05693749 #>        [,1691]    [,1692]     [,1693]    [,1694]    [,1695]  [,1696]    [,1697] #> [1,] 0.3869258 -0.2188925 -0.05748755 -0.2955239 0.03886185 0.155608 0.01464258 #>          [,1698]    [,1699]    [,1700]    [,1701]     [,1702]    [,1703] #> [1,] -0.09217917 -0.3340401 -0.3221122 -0.6632445 0.007454646 0.09194179 #>          [,1704]    [,1705]  [,1706]    [,1707]   [,1708]    [,1709]    [,1710] #> [1,] -0.03921893 -0.3167846 -0.39413 -0.1307565 0.0654585 0.02796724 -0.4167588 #>         [,1711]   [,1712]   [,1713]    [,1714]    [,1715]    [,1716]    [,1717] #> [1,] -0.5591849 -0.277173 0.2460151 -0.2822878 -0.2246157 -0.1712395 -0.1383678 #>          [,1718]    [,1719]    [,1720]   [,1721]     [,1722]    [,1723] [,1724] #> [1,] -0.08456022 -0.1046502 -0.4270701 0.4978065 -0.04194183 -0.1003738 0.30448 #>          [,1725]   [,1726]    [,1727]     [,1728]    [,1729]    [,1730] #> [1,] -0.01710745 0.2405874 0.05646902 -0.08793723 -0.1908698 -0.2396308 #>         [,1731]     [,1732]    [,1733]    [,1734]    [,1735]    [,1736] #> [1,] -0.3228508 -0.08247675 0.03918372 -0.7368327 -0.1616361 -0.1049086 #>         [,1737]    [,1738]    [,1739]     [,1740]    [,1741]     [,1742] #> [1,] -0.2668868 -0.2450769 -0.1165052 -0.05952816 -0.2459141 -0.03469877 #>        [,1743]    [,1744]    [,1745]    [,1746]    [,1747]    [,1748] #> [1,] 0.2744706 0.03766643 -0.2145559 -0.2761911 -0.1353447 -0.3486337 #>           [,1749]    [,1750]     [,1751]    [,1752]    [,1753]    [,1754] #> [1,] -0.007139823 -0.6616601 -0.04214013 -0.1481291 -0.2092806 -0.2257486 #>         [,1755]   [,1756]   [,1757]   [,1758]    [,1759]    [,1760]    [,1761] #> [1,] -0.3582091 0.3651217 0.2447106 0.3053512 -0.4260481 0.04113339 -0.2929908 #>          [,1762]   [,1763]  [,1764]    [,1765]     [,1766]    [,1767] #> [1,] -0.03608025 0.3250916 0.304926 0.05490459 -0.07503678 -0.1558138 #>         [,1768]   [,1769]     [,1770]    [,1771]    [,1772]    [,1773] #> [1,] -0.1281563 0.0848533 -0.03110824 -0.3503961 -0.3138926 -0.2911603 #>         [,1774]    [,1775]    [,1776]    [,1777]   [,1778]    [,1779] #> [1,] -0.1367604 -0.1131963 -0.2175127 0.03874777 0.2296195 -0.1296145 #>         [,1780]    [,1781]     [,1782]  [,1783]    [,1784]     [,1785] #> [1,] -0.3153705 -0.6531378 -0.03433839 0.451739 -0.3952005 -0.06782014 #>         [,1786]    [,1787]     [,1788]    [,1789]    [,1790]     [,1791] #> [1,] -0.6137127 -0.2503885 -0.09929841 0.08146375 -0.1147989 -0.03004918 #>         [,1792]   [,1793]    [,1794]    [,1795]    [,1796]    [,1797] #> [1,] -0.0218672 0.3790557 0.05347724 -0.3013231 -0.2883645 -0.3210074 #>         [,1798]   [,1799]   [,1800]    [,1801]    [,1802]    [,1803]    [,1804] #> [1,] -0.2282781 0.0118283 0.1859157 0.07462198 -0.2779086 -0.4576898 -0.2061265 #>          [,1805]    [,1806]    [,1807]    [,1808]    [,1809]   [,1810] #> [1,] -0.02070145 0.08406344 0.01104386 -0.3096478 0.01122624 0.1518841 #>        [,1811]    [,1812]     [,1813]    [,1814]     [,1815]    [,1816] #> [1,] 0.4486694 -0.2762215 -0.07595615 -0.3262024 -0.01435506 -0.4459099 #>        [,1817]    [,1818]    [,1819]    [,1820]   [,1821]    [,1822]    [,1823] #> [1,] -0.508891 -0.4218406 -0.1496316 -0.5418498 0.3503822 0.03118944 -0.2567583 #>         [,1824]    [,1825]    [,1826]    [,1827]    [,1828]    [,1829] #> [1,] -0.2102819 -0.1326594 -0.3812701 0.04371823 -0.1624209 0.03591739 #>         [,1830]    [,1831]    [,1832]    [,1833]      [,1834]    [,1835] #> [1,] -0.2486471 0.09398632 -0.0737614 -0.1752818 -0.004732931 -0.2913701 #>         [,1836]    [,1837]    [,1838]     [,1839]   [,1840]   [,1841] #> [1,] -0.3764299 -0.0866171 -0.1147858 -0.06742491 0.3876128 0.3047983 #>         [,1842]    [,1843]     [,1844]    [,1845]    [,1846]    [,1847] #> [1,] -0.1170745 -0.1222291 -0.04078242 -0.2490439 -0.2154602 -0.4291229 #>         [,1848]   [,1849]    [,1850]    [,1851]    [,1852]     [,1853] #> [1,] -0.6790414 0.1736032 -0.2838392 0.03580734 -0.3287215 -0.06417085 #>         [,1854]    [,1855]   [,1856]    [,1857]  [,1858]  [,1859]    [,1860] #> [1,] -0.5286516 0.05721542 0.0026291 0.01567533 0.126109 -0.23303 -0.4025729 #>         [,1861]    [,1862]    [,1863]   [,1864]   [,1865]    [,1866]   [,1867] #> [1,] -0.1065754 0.01157476 -0.1592897 0.6310981 0.1254835 -0.5458775 0.1569699 #>         [,1868]    [,1869] [,1870]    [,1871]    [,1872]    [,1873]    [,1874] #> [1,] -0.4228517 0.05461711 0.61745 -0.8571161 -0.1280209 -0.3757081 0.09640953 #>        [,1875]    [,1876]     [,1877]   [,1878]    [,1879]     [,1880] #> [1,] 0.2625931 -0.3895166 -0.08715225 0.1995348 -0.3637639 -0.01011619 #>        [,1881]    [,1882]    [,1883]   [,1884]  [,1885]   [,1886]    [,1887] #> [1,] 0.2631745 -0.1671201 0.04549783 -0.198046 0.441636 0.6157456 -0.2804145 #>         [,1888]    [,1889]    [,1890]     [,1891]     [,1892]   [,1893] #> [1,] -0.1286024 0.08160254 -0.1180341 -0.01580528 -0.07734543 -0.134657 #>         [,1894]    [,1895]    [,1896]    [,1897]    [,1898]   [,1899]   [,1900] #> [1,] -0.2831993 -0.3863239 -0.1458818 0.03902542 -0.3342448 0.2120544 0.4458414 #>          [,1901]    [,1902]     [,1903]     [,1904]   [,1905]   [,1906] #> [1,] -0.04173015 -0.4035808 -0.06758934 -0.08764706 0.2830941 0.2101505 #>        [,1907]   [,1908]     [,1909]    [,1910]    [,1911]    [,1912]   [,1913] #> [1,] 0.1654628 -0.216792 -0.09366268 -0.5897524 -0.4426309 0.08333957 0.0513996 #>        [,1914]    [,1915]    [,1916]   [,1917]    [,1918]   [,1919]    [,1920] #> [1,] 0.2071453 0.05689704 -0.2792326 0.1339876 -0.2434919 0.1985392 -0.0975962 #>        [,1921]    [,1922]    [,1923]     [,1924]    [,1925]   [,1926] #> [1,] -0.162741 -0.3658515 -0.7301536 0.009453572 -0.5770752 -0.374547 #>         [,1927]     [,1928]    [,1929]    [,1930]    [,1931]  [,1932]   [,1933] #> [1,] -0.1754255 -0.09324777 -0.2283786 0.09857404 -0.2375476 0.551906 0.4412279 #>        [,1934]   [,1935]    [,1936]   [,1937]    [,1938]    [,1939]     [,1940] #> [1,] 0.2511334 0.1610164 -0.3830373 0.2240325 -0.5238631 -0.0633116 -0.02845727 #>         [,1941]    [,1942]    [,1943]    [,1944]     [,1945]    [,1946] #> [1,] -0.1410437 -0.1409158 -0.2327785 -0.2747386 -0.03413169 -0.1908803 #>         [,1947]    [,1948]    [,1949]    [,1950]    [,1951]    [,1952] #> [1,] -0.1972309 -0.1627047 -0.3342941 -0.3829808 -0.4771265 -0.3737616 #>         [,1953]     [,1954]   [,1955]    [,1956]    [,1957]    [,1958] #> [1,] -0.5592507 -0.07464288 0.0505271 0.02063939 -0.1952334 -0.1391565 #>         [,1959]    [,1960]   [,1961]   [,1962]    [,1963]    [,1964]   [,1965] #> [1,] -0.2365816 -0.6059829 0.4126794 0.1626375 -0.2398267 -0.3904027 0.1222017 #>        [,1966]   [,1967]    [,1968]    [,1969]    [,1970]   [,1971]    [,1972] #> [1,] 0.6955792 0.3353143 -0.2125778 0.04217491 -0.6884754 0.6425588 -0.3881755 #>         [,1973]    [,1974]  [,1975]    [,1976]     [,1977]   [,1978] #> [1,] -0.2197055 0.03611634 0.304111 -0.5431026 -0.07445937 -0.397046 #>          [,1979]    [,1980]    [,1981]   [,1982]   [,1983]   [,1984]  [,1985] #> [1,] -0.08297793 -0.5445808 -0.3222567 -0.380257 0.3962753 0.1796118 -0.34632 #>         [,1986]    [,1987]    [,1988]    [,1989]    [,1990]   [,1991] #> [1,] -0.4158439 0.06740293 -0.3458522 0.04375344 -0.4016843 0.1698065 #>         [,1992]   [,1993]    [,1994]    [,1995]    [,1996]    [,1997]   [,1998] #> [1,] -0.2240413 0.3149078 -0.2114611 -0.2527592 0.05941254 -0.3188536 0.1794128 #>        [,1999]    [,2000]     [,2001]     [,2002]    [,2003]    [,2004] #> [1,] 0.2877014 -0.1741392 -0.08336627 -0.05879506 -0.1330014 -0.4733027 #>       [,2005]    [,2006]   [,2007]    [,2008]     [,2009]   [,2010]   [,2011] #> [1,] -0.23489 0.09016111 -0.412089 -0.5404745 -0.08638573 0.1538808 0.3472478 #>          [,2012]    [,2013]   [,2014]   [,2015]    [,2016]    [,2017] #> [1,] -0.02813449 0.03661454 0.1571188 0.2705529 -0.1019564 -0.1432369 #>         [,2018]     [,2019]    [,2020]     [,2021]    [,2022]   [,2023] #> [1,] 0.09733405 -0.02457588 0.03585885 -0.05144906 -0.0456613 0.1297707 #>         [,2024]    [,2025]    [,2026]    [,2027]   [,2028]    [,2029]   [,2030] #> [1,] -0.2587179 -0.3886267 -0.5233471 -0.1937941 -0.208905 -0.3026705 0.1264641 #>        [,2031]    [,2032]    [,2033]    [,2034]    [,2035]    [,2036] #> [1,] 0.4069614 -0.2784327 -0.4341661 -0.3545411 -0.2842265 -0.2732068 #>         [,2037]     [,2038]     [,2039]  [,2040]    [,2041]   [,2042] #> [1,] -0.1990988 -0.07464038 -0.06018036 0.109723 -0.3228589 0.3314794 #>         [,2043]     [,2044]   [,2045]   [,2046]    [,2047]    [,2048]   [,2049] #> [1,] -0.4795222 -0.03470951 0.3727915 0.0259531 -0.2813473 -0.2153408 -0.245512 #>          [,2050]    [,2051]    [,2052]    [,2053]    [,2054]     [,2055] #> [1,] -0.03221436 -0.1439707 -0.3284063 -0.1558583 -0.4154081 -0.07832515 #>         [,2056]     [,2057]   [,2058]   [,2059]    [,2060]    [,2061] #> [1,] -0.3202894 -0.04334701 0.4190365 0.1443639 -0.2618145 -0.1959443 #>         [,2062]    [,2063]    [,2064]     [,2065]  [,2066]     [,2067] #> [1,] -0.1985172 -0.2461888 -0.2870049 -0.02672436 -0.55768 -0.08048093 #>          [,2068] [,2069]    [,2070]    [,2071]   [,2072]      [,2073] #> [1,] -0.05377158 0.13319 0.01202154 -0.2516881 0.3566455 -0.004539844 #>         [,2074]    [,2075]    [,2076]    [,2077]    [,2078]    [,2079] #> [1,] -0.3613852 0.00403333 0.01585796 0.04540276 -0.4192582 -0.5202526 #>         [,2080]   [,2081]   [,2082]   [,2083]   [,2084]    [,2085]    [,2086] #> [1,] -0.1667392 0.7108258 0.2230081 0.2430141 0.3797124 0.01503876 -0.3710865 #>        [,2087]   [,2088]    [,2089]    [,2090]   [,2091]    [,2092]    [,2093] #> [1,] 0.1337933 0.1543972 -0.1440776 -0.1544308 0.1663987 -0.6565446 -0.6022242 #>         [,2094]    [,2095]     [,2096]    [,2097]    [,2098]    [,2099] #> [1,] -0.0176175 -0.2834628 -0.09131836 -0.4703197 -0.5714376 -0.1329423 #>         [,2100]     [,2101]    [,2102]    [,2103]   [,2104]    [,2105] #> [1,] -0.2067623 -0.06302813 -0.1274415 -0.1428805 -0.330545 0.06270466 #>        [,2106]    [,2107]     [,2108]    [,2109]    [,2110]    [,2111] #> [1,] 0.1509226 -0.5280866 -0.04147459 -0.1720834 -0.3279399 -0.5695705 #>        [,2112]     [,2113]  [,2114]    [,2115]    [,2116]     [,2117] #> [1,] 0.2855401 -0.05607673 0.634606 -0.1053788 -0.1373385 -0.03888365 #>         [,2118]    [,2119]    [,2120]    [,2121] [,2122]   [,2123]    [,2124] #> [1,] -0.2329809 -0.2174405 -0.8752514 -0.1743633 0.27022 0.1964908 -0.1406593 #>        [,2125]    [,2126]    [,2127]   [,2128]     [,2129]    [,2130] #> [1,] 0.4156795 -0.3474094 0.04030718 0.5890404 -0.02505092 -0.3714192 #>          [,2131]   [,2132]    [,2133]     [,2134]   [,2135]    [,2136] #> [1,] -0.03470029 0.2462647 0.03000116 -0.03113699 0.3277416 -0.3123736 #>         [,2137]   [,2138]    [,2139]    [,2140]     [,2141]     [,2142] #> [1,] 0.05710732 0.1443879 -0.2888977 -0.4862983 -0.04965702 -0.09984909 #>         [,2143]    [,2144]   [,2145]    [,2146]  [,2147]   [,2148]    [,2149] #> [1,] -0.3523279 -0.3930467 0.4605251 -0.2200302 -0.12278 0.2825818 -0.6428882 #>         [,2150]    [,2151]   [,2152]    [,2153]     [,2154]   [,2155] #> [1,] -0.1524664 -0.4413365 0.1821449 -0.2776183 -0.01926264 0.3105312 #>         [,2156]   [,2157]     [,2158]   [,2159]    [,2160]    [,2161]   [,2162] #> [1,] -0.3777062 -0.147839 0.004483573 0.6007301 -0.1377425 -0.4514934 0.2186028 #>          [,2163]   [,2164]    [,2165]    [,2166]   [,2167]     [,2168] #> [1,] -0.07088275 0.5671991 -0.4576308 -0.6057307 0.1021442 -0.09114348 #>        [,2169]    [,2170]    [,2171]    [,2172]    [,2173]    [,2174] #> [1,] 0.1771192 -0.4052825 -0.5201521 -0.2629869 -0.1915382 -0.1767326 #>           [,2175]    [,2176]    [,2177]   [,2178]    [,2179]  [,2180] #> [1,] 0.0002522567 -0.1521089 0.03319738 -0.666534 -0.2276893 -0.40417 #>         [,2181]    [,2182]    [,2183]    [,2184]    [,2185]    [,2186] #> [1,] 0.01152751 -0.1376046 -0.0140181 -0.2742936 0.05960638 0.08301681 #>          [,2187]    [,2188]    [,2189]    [,2190]    [,2191]    [,2192] #> [1,] -0.04725032 0.02678755 -0.2287123 -0.2174094 -0.2145601 -0.2537941 #>         [,2193]    [,2194]    [,2195]      [,2196]   [,2197]    [,2198] #> [1,] -0.3806474 -0.3545444 -0.2373929 -0.008235844 0.2299942 0.05854029 #>         [,2199]    [,2200]   [,2201]    [,2202]    [,2203]    [,2204] #> [1,] -0.3009015 -0.1493069 0.1421661 -0.7026214 -0.2833994 0.02822817 #>         [,2205]   [,2206]    [,2207]     [,2208]    [,2209]   [,2210] #> [1,] -0.1319712 -0.182065 -0.6429595 0.006023234 0.07350573 0.4015761 #>         [,2211]     [,2212]   [,2213]   [,2214]    [,2215]    [,2216]   [,2217] #> [1,] -0.2783112 -0.07341288 0.1108348 0.3278703 -0.4564633 -0.1090086 0.1598444 #>          [,2218]    [,2219]     [,2220]   [,2221]    [,2222]    [,2223] #> [1,] -0.02163355 0.01931036 -0.05096257 0.0930192 -0.3232682 0.09565277 #>        [,2224]    [,2225]     [,2226]   [,2227]   [,2228]     [,2229] #> [1,] 0.3150195 -0.0631054 -0.02878358 0.2770209 -0.122788 -0.03868755 #>         [,2230]    [,2231]    [,2232]    [,2233]    [,2234]   [,2235] #> [1,] -0.3088827 0.01872603 -0.1357223 -0.2068822 -0.5678979 0.1268785 #>         [,2236]     [,2237]     [,2238]    [,2239]    [,2240]    [,2241] #> [1,] -0.6143866 -0.03692224 -0.08454283 -0.0102116 0.08677497 -0.1445348 #>       [,2242]   [,2243]    [,2244]    [,2245]     [,2246]   [,2247]   [,2248] #> [1,] 0.434656 0.4055156 -0.5308852 -0.3229325 0.006314533 0.4693783 0.1358687 #>           [,2249]    [,2250]    [,2251]   [,2252]     [,2253]  [,2254] #> [1,] -0.002532798 -0.1621773 0.08968596 0.2373055 -0.02955158 0.389158 #>          [,2255]      [,2256]    [,2257]    [,2258]   [,2259]    [,2260] #> [1,] -0.04540569 -0.009628877 -0.4510589 0.09767252 0.0765471 -0.1645085 #>        [,2261]   [,2262]     [,2263]    [,2264]     [,2265]    [,2266] #> [1,] 0.1596021 0.2101431 -0.05717719 0.07566936 -0.05002111 -0.4948319 #>         [,2267]    [,2268]    [,2269]     [,2270]     [,2271]   [,2272] #> [1,] -0.1876421 0.07312961 0.09865609 -0.02963378 -0.07115864 0.1461765 #>        [,2273]    [,2274]   [,2275]    [,2276]    [,2277]    [,2278]   [,2279] #> [1,] -0.528921 -0.5557386 0.1368501 0.04812884 -0.1557386 -0.0690194 0.1763384 #>          [,2280]    [,2281]   [,2282]    [,2283]    [,2284]    [,2285] #> [1,] -0.07193943 0.05519084 0.1039163 -0.1918502 -0.2781374 -0.4376793 #>         [,2286]    [,2287]    [,2288]    [,2289]    [,2290]     [,2291] #> [1,] -0.4652757 0.03038831 -0.2024258 -0.2732492 0.08350537 -0.03781923 #>         [,2292]     [,2293]   [,2294]    [,2295]  [,2296]   [,2297]    [,2298] #> [1,] 0.06271384 -0.08021489 0.3633917 -0.2945283 0.101154 0.2591787 -0.3382674 #>        [,2299]     [,2300]    [,2301]    [,2302]   [,2303]   [,2304] #> [1,] 0.1003156 0.003421613 -0.4633768 -0.1541641 0.1745416 -0.128842 #>          [,2305]    [,2306]    [,2307]    [,2308]    [,2309]    [,2310] #> [1,] -0.03206231 -0.4192636 -0.3016378 -0.2513207 -0.4564021 -0.1300786 #>        [,2311]    [,2312]    [,2313]    [,2314]  [,2315]   [,2316]    [,2317] #> [1,] 0.2510726 -0.1346546 -0.2725019 -0.2884114 0.103035 -0.071545 -0.3773543 #>        [,2318]    [,2319]     [,2320]    [,2321]     [,2322]     [,2323] #> [1,] 0.0672882 -0.1849956 -0.01839132 0.03119395 -0.03045905 -0.06288947 #>         [,2324]    [,2325]   [,2326]    [,2327]     [,2328]   [,2329] #> [1,] -0.3310846 -0.1079377 0.2408632 -0.4301382 -0.09306883 0.3413305 #>         [,2330]    [,2331]    [,2332]     [,2333]    [,2334]    [,2335] #> [1,] -0.1034919 -0.2730667 0.06164078 -0.09536839 -0.3353573 -0.2491029 #>        [,2336]    [,2337]   [,2338]    [,2339]    [,2340]    [,2341]    [,2342] #> [1,] 0.0646662 -0.4620109 0.1392593 -0.6950418 -0.2038645 -0.4791967 -0.4300396 #>        [,2343]    [,2344]    [,2345]    [,2346]      [,2347]    [,2348] #> [1,] 0.3210011 -0.2670163 -0.3139516 -0.1569838 -0.008198734 -0.1878193 #>         [,2349]    [,2350]     [,2351]    [,2352]   [,2353]     [,2354] #> [1,] -0.4821618 0.03277026 -0.06887495 -0.1015799 0.4004069 -0.07590625 #>         [,2355]    [,2356]    [,2357]    [,2358]     [,2359]     [,2360] #> [1,] -0.7776211 -0.2027003 -0.2460661 -0.3310239 -0.03375227 -0.06932257 #>          [,2361]     [,2362]    [,2363]    [,2364]   [,2365]   [,2366]  [,2367] #> [1,] -0.05726105 -0.03690036 -0.5506355 -0.3917314 0.1399396 0.1233076 0.173222 #>        [,2368]    [,2369]    [,2370]   [,2371]   [,2372]   [,2373]    [,2374] #> [1,] 0.1396631 -0.3342684 -0.2650256 0.1008478 0.4025182 0.1083435 -0.8270683 #>        [,2375]     [,2376]      [,2377]    [,2378]    [,2379]   [,2380] #> [1,] 0.3773722 -0.02315205 -0.009542975 0.02974409 -0.6579471 -0.232553 #>         [,2381]    [,2382]    [,2383]   [,2384]   [,2385]   [,2386]     [,2387] #> [1,] -0.1489139 -0.3765396 -0.2144587 -0.560576 0.1341716 -0.144315 -0.03799574 #>         [,2388]    [,2389]    [,2390]   [,2391]  [,2392]   [,2393]     [,2394] #> [1,] -0.2010726 -0.3030127 -0.4109202 0.2437404 0.445704 -0.354291 -0.05740996 #>         [,2395]   [,2396]   [,2397]   [,2398]     [,2399]    [,2400]    [,2401] #> [1,] -0.3939978 0.2337922 0.2547647 0.1256549 -0.09596658 0.08066253 -0.4548772 #>         [,2402]    [,2403]    [,2404]    [,2405]    [,2406]   [,2407] #> [1,] -0.1143379 -0.1690285 -0.6549927 -0.3940489 0.07168259 0.0324499 #>         [,2408]   [,2409]   [,2410]     [,2411]    [,2412]    [,2413] #> [1,] 0.01541238 0.3942206 0.1819039 -0.06473471 -0.4326645 -0.5333526 #>         [,2414]    [,2415]    [,2416]    [,2417]    [,2418]     [,2419] #> [1,] 0.05760994 -0.2285048 -0.1966415 -0.1655329 -0.3580665 -0.04830424 #>        [,2420]     [,2421]    [,2422]     [,2423]    [,2424]    [,2425] #> [1,] 0.2854415 0.007804854 -0.3556904 -0.06174274 -0.2327312 -0.2682665 #>         [,2426]    [,2427]    [,2428]   [,2429]     [,2430]   [,2431]   [,2432] #> [1,] -0.2327812 -0.2772877 -0.3090281 0.2326707 -0.06667172 0.3955142 0.1488649 #>        [,2433]     [,2434]    [,2435]     [,2436]    [,2437]   [,2438] #> [1,] -0.295528 -0.09141561 0.00288626 -0.09128852 -0.3180791 -0.236343 #>          [,2439]    [,2440]    [,2441]   [,2442]     [,2443]     [,2444] #> [1,] 0.009763623 -0.3793824 0.07125974 0.0654045 -0.08906984 -0.04684657 #>        [,2445]  [,2446]    [,2447]   [,2448]   [,2449]    [,2450]    [,2451] #> [1,] 0.3854129 0.328712 -0.5099377 0.1700483 0.1443797 -0.4173476 -0.1302828 #>        [,2452]   [,2453]    [,2454]    [,2455]    [,2456]   [,2457]    [,2458] #> [1,] 0.2242012 0.3273372 -0.7880931 0.03047695 -0.4709564 0.3419571 0.05168199 #>         [,2459]    [,2460]    [,2461]    [,2462]    [,2463]   [,2464]   [,2465] #> [1,] -0.2393574 -0.2015854 -0.1239796 0.03308517 -0.2314059 -0.409459 0.4232593 #>         [,2466]     [,2467]    [,2468]   [,2469]     [,2470]    [,2471] #> [1,] -0.2507835 -0.09954237 -0.4863874 -0.475307 -0.09277766 -0.3906565 #>         [,2472]    [,2473]    [,2474]    [,2475]    [,2476]   [,2477]   [,2478] #> [1,] -0.3478828 -0.3808938 -0.2944233 -0.6722261 -0.1222195 0.0985954 0.2396066 #>        [,2479]   [,2480]   [,2481]    [,2482]    [,2483]    [,2484]   [,2485] #> [1,] 0.2181242 0.1036119 0.2782227 -0.5822702 -0.1481288 -0.0230926 -0.249871 #>          [,2486]    [,2487]   [,2488]    [,2489]   [,2490]    [,2491] #> [1,] -0.07289628 -0.6705479 0.4622026 -0.3509594 0.0862105 -0.1864502 #>          [,2492]     [,2493]    [,2494]   [,2495]   [,2496]  [,2497]   [,2498] #> [1,] -0.08806085 -0.09260056 -0.3560092 0.1123914 -0.184554 0.258159 -0.669528 #>        [,2499]   [,2500]      [,2501]    [,2502]   [,2503]   [,2504]    [,2505] #> [1,] 0.1683215 0.3391989 -0.001396366 -0.2261719 0.1041526 0.2419251 -0.2707555 #>          [,2506]   [,2507]    [,2508]    [,2509]   [,2510]     [,2511] #> [1,] 0.004269904 0.1039327 -0.2316232 -0.3259564 0.3140044 -0.08551112 #>         [,2512]    [,2513]    [,2514]   [,2515]    [,2516]      [,2517] #> [1,] -0.2117565 -0.6032528 -0.5657167 0.2187916 -0.5833816 -0.005194163 #>        [,2518]   [,2519]    [,2520]    [,2521]    [,2522]    [,2523]    [,2524] #> [1,] 0.0390119 0.2466203 0.08885838 -0.1683803 -0.3945435 -0.1252803 0.06127471 #>          [,2525]    [,2526]    [,2527]   [,2528]    [,2529]    [,2530] #> [1,] 0.003720345 -0.0850709 0.03228611 0.1257723 -0.2782214 -0.5494293 #>        [,2531]   [,2532]    [,2533]    [,2534]    [,2535]    [,2536]    [,2537] #> [1,] -0.743082 0.1464512 -0.1208796 -0.1543139 0.02618801 -0.5743001 -0.5960461 #>        [,2538]   [,2539]    [,2540]    [,2541]    [,2542]   [,2543]    [,2544] #> [1,] 0.5453396 0.1716231 0.04294256 -0.4192231 -0.8246727 0.3349207 -0.2031457 #>         [,2545] [,2546]  [,2547]    [,2548]    [,2549]   [,2550]    [,2551] #> [1,] 0.08283478 0.22049 0.361786 -0.5434322 -0.6071064 0.4778911 -0.4028822 #>        [,2552]    [,2553]     [,2554]     [,2555]    [,2556]    [,2557] #> [1,] 0.1536387 -0.4703654 -0.00443455 -0.09126176 -0.5176278 -0.1061355 #>          [,2558]   [,2559]   [,2560]    [,2561]     [,2562]    [,2563] #> [1,] -0.08209085 0.3763118 0.2976864 0.06720157 -0.03783977 -0.3005165 #>         [,2564]    [,2565]     [,2566]     [,2567]  [,2568]     [,2569] #> [1,] -0.1030462 0.01091653 0.005527117 -0.01313028 0.116286 -0.07573752 #>        [,2570]  [,2571]    [,2572]    [,2573]    [,2574]      [,2575]   [,2576] #> [1,] -0.167895 0.148283 0.02185407 -0.5055136 -0.5203193 -0.003264805 -0.427424 #>        [,2577]    [,2578]     [,2579]    [,2580]   [,2581]    [,2582] #> [1,] 0.1267592 -0.4342022 -0.07262554 -0.1753142 -0.160589 0.08996449 #>          [,2583]   [,2584]    [,2585]   [,2586]   [,2587]    [,2588]    [,2589] #> [1,] -0.04647047 0.3836567 0.06097398 0.1025493 0.1835375 -0.6460339 0.04162465 #>        [,2590]    [,2591]    [,2592]   [,2593]    [,2594]    [,2595]    [,2596] #> [1,] 0.3850322 -0.2444068 -0.1552192 0.3168922 -0.4228803 -0.5113639 -0.1347296 #>         [,2597]    [,2598]   [,2599]     [,2600]    [,2601]    [,2602] #> [1,] -0.1402756 -0.3087102 0.3514633 -0.08696594 -0.1669878 -0.4376825 #>          [,2603]     [,2604]   [,2605]    [,2606]   [,2607]     [,2608] #> [1,] -0.01184793 -0.04074649 0.1529755 0.04613759 0.3928915 -0.08337304 #>         [,2609]    [,2610]    [,2611]    [,2612]    [,2613]   [,2614] #> [1,] -0.3506567 0.04937962 0.02251609 -0.3559739 -0.1581132 0.1981827 #>         [,2615]    [,2616]   [,2617]   [,2618]     [,2619]    [,2620]   [,2621] #> [1,] -0.1648731 -0.1352421 0.1353927 0.0143929 -0.09136479 -0.2869397 0.1134312 #>         [,2622]    [,2623]    [,2624]    [,2625]    [,2626]   [,2627] #> [1,] -0.2038663 -0.3232037 0.06510337 -0.3595945 0.07494413 0.1185801 #>         [,2628]   [,2629]   [,2630]    [,2631]   [,2632]     [,2633] #> [1,] -0.2019418 0.4928916 0.2882859 -0.0608371 -0.281622 -0.09289647 #>          [,2634]    [,2635]     [,2636]   [,2637]    [,2638]    [,2639] #> [1,] -0.07899047 -0.2004468 -0.01608098 0.3218736 -0.2884075 0.02230861 #>         [,2640]    [,2641]    [,2642]    [,2643]   [,2644]    [,2645] #> [1,] -0.2007668 -0.1192644 -0.1999185 0.03044361 0.1150982 -0.1616158 #>         [,2646]     [,2647]   [,2648]      [,2649]    [,2650]   [,2651] #> [1,] -0.2579102 -0.03888168 0.2633374 -0.002880498 -0.1567494 0.1789773 #>         [,2652]    [,2653]    [,2654]    [,2655]    [,2656]    [,2657] #> [1,] -0.2518244 -0.3046064 -0.2815481 -0.2064441 0.06738772 0.09835105 #>         [,2658]    [,2659]   [,2660]   [,2661]    [,2662]  [,2663]      [,2664] #> [1,] -0.7210566 -0.1679024 -0.576131 -0.121005 0.03077277 -0.15031 -0.003349419 #>        [,2665]  [,2666]     [,2667]    [,2668]      [,2669]   [,2670] #> [1,] 0.1749679 0.125996 -0.05468366 -0.3579612 -0.009719392 0.1535113 #>         [,2671]   [,2672]   [,2673]    [,2674]    [,2675]    [,2676]    [,2677] #> [1,] -0.2154394 -0.327602 0.1977969 -0.4307675 -0.3752926 -0.4490481 -0.3034888 #>         [,2678]    [,2679]     [,2680]    [,2681]    [,2682]    [,2683] #> [1,] 0.08134403 -0.1786658 -0.03415022 -0.4315551 -0.2249036 -0.4548333 #>           [,2684]    [,2685]     [,2686]    [,2687]    [,2688]   [,2689] #> [1,] -0.008875368 0.02302141 -0.09052261 -0.1666369 -0.1807407 -0.670162 #>         [,2690]    [,2691]    [,2692]     [,2693]   [,2694]    [,2695] #> [1,] -0.2836603 -0.1914923 -0.3684567 -0.01856849 0.0632934 0.09308127 #>         [,2696]   [,2697]    [,2698]     [,2699]    [,2700]    [,2701] #> [1,] -0.1300028 0.2928458 0.07135881 0.001493741 -0.3981105 -0.3810575 #>        [,2702]    [,2703]    [,2704]    [,2705]    [,2706]   [,2707] #> [1,] 0.2372167 -0.1002603 -0.3404347 -0.2202626 -0.2569247 0.1192318 #>           [,2708]    [,2709]    [,2710]  [,2711]    [,2712]     [,2713] #> [1,] -0.006262526 -0.3087237 -0.3256893 0.195291 -0.1613217 -0.02895703 #>         [,2714]    [,2715]     [,2716]   [,2717]    [,2718]    [,2719] #> [1,] 0.08511596 0.05269067 -0.09774983 0.1745705 -0.6607297 -0.1043517 #>        [,2720]     [,2721]   [,2722]    [,2723]    [,2724]    [,2725]   [,2726] #> [1,] 0.2396315 -0.02118405 0.2941649 -0.1136733 -0.3812786 -0.1313043 0.1386057 #>         [,2727]    [,2728]     [,2729]   [,2730]     [,2731]     [,2732] #> [1,] -0.1133236 -0.3313765 -0.06483302 0.2712284 0.002252031 -0.07700437 #>         [,2733]   [,2734]   [,2735]    [,2736]   [,2737]   [,2738]    [,2739] #> [1,] -0.1008484 0.1306326 0.4750997 -0.2724198 0.1230147 0.1059131 -0.3523789 #>         [,2740]   [,2741]     [,2742]   [,2743]    [,2744]    [,2745]   [,2746] #> [1,] -0.4234557 0.1996331 -0.03016097 -0.173343 -0.2284384 0.06264361 0.3176748 #>         [,2747]   [,2748]   [,2749]    [,2750]   [,2751]    [,2752]    [,2753] #> [1,] -0.4627875 0.3801673 0.1329153 -0.2027689 0.2613335 0.03761861 -0.1165216 #>          [,2754]    [,2755]   [,2756]   [,2757]    [,2758]   [,2759]  [,2760] #> [1,] -0.08942382 -0.5989471 0.2830702 0.1444449 -0.1610136 0.3085696 0.225168 #>         [,2761]    [,2762]   [,2763]    [,2764]     [,2765]   [,2766]   [,2767] #> [1,] -0.0520307 -0.5780125 0.3116494 -0.1483591 -0.05989945 -0.174571 0.1555089 #>        [,2768]     [,2769]     [,2770]   [,2771]   [,2772]   [,2773] #> [1,] 0.3503757 -0.04173726 0.001258073 0.3463674 0.2257932 0.4787442 #>          [,2774]       [,2775]    [,2776]    [,2777]   [,2778]    [,2779] #> [1,] -0.06121464 -0.0008827094 -0.5204528 -0.4314582 0.0750811 -0.4364364 #>         [,2780]    [,2781]    [,2782]    [,2783]    [,2784]    [,2785] #> [1,] 0.07815282 -0.1253119 -0.3102152 -0.3200479 -0.0854001 -0.3553069 #>         [,2786]   [,2787]    [,2788]     [,2789]    [,2790]   [,2791] #> [1,] -0.2764892 0.2021862 -0.4023465 -0.06159593 -0.5386242 0.3618888 #>         [,2792]    [,2793]    [,2794]    [,2795]  [,2796]   [,2797]    [,2798] #> [1,] 0.09626661 -0.3392744 0.08038434 -0.0200893 0.426285 -0.256272 0.02341063 #>         [,2799]    [,2800]   [,2801]      [,2802]     [,2803]    [,2804] #> [1,] -0.2096485 -0.4183995 0.1589216 -0.002002981 -0.09732119 -0.1691912 #>        [,2805]      [,2806]     [,2807]     [,2808]    [,2809]   [,2810] #> [1,] -0.238545 -0.008577303 -0.05798624 -0.03976552 -0.4287954 0.2797754 #>          [,2811]     [,2812]   [,2813]     [,2814]    [,2815]    [,2816] #> [1,] -0.07212568 -0.07851166 0.1273739 -0.07024239 -0.2211784 -0.2460403 #>         [,2817]   [,2818]    [,2819]   [,2820]     [,2821]   [,2822]    [,2823] #> [1,] -0.3925709 0.1619621 -0.3207731 0.1620915 0.001125925 0.3975348 -0.4193432 #>          [,2824]    [,2825]  [,2826]   [,2827]   [,2828]    [,2829]   [,2830] #> [1,] -0.04383706 -0.3445405 0.171562 0.2576101 0.4754182 -0.2253444 0.1948427 #>         [,2831]     [,2832]    [,2833]    [,2834]    [,2835]    [,2836] #> [1,] 0.02589602 -0.04974055 -0.4538089 -0.1337111 -0.1789282 -0.3543571 #>         [,2837]   [,2838]    [,2839]   [,2840]    [,2841]    [,2842]    [,2843] #> [1,] -0.5229899 0.3471815 -0.2579806 0.1151243 -0.2856595 0.03059381 0.05863576 #>         [,2844]    [,2845]   [,2846]    [,2847]    [,2848]    [,2849] #> [1,] -0.1459602 -0.1831779 0.3857434 -0.1262974 0.07598686 -0.3410275 #>          [,2850]   [,2851]     [,2852]     [,2853]    [,2854]    [,2855] #> [1,] -0.02823156 0.3223546 -0.06491815 -0.01321264 -0.0372829 -0.4595742 #>        [,2856]    [,2857]    [,2858]    [,2859]   [,2860]   [,2861]    [,2862] #> [1,] -0.195647 -0.3309009 0.03860423 -0.2465444 0.2296761 0.7273733 0.07948088 #>         [,2863]   [,2864]   [,2865]    [,2866]    [,2867]     [,2868] #> [1,] -0.2397002 0.3014197 -0.104272 -0.3825906 -0.1702813 -0.08561383 #>         [,2869]     [,2870]    [,2871]   [,2872]   [,2873]    [,2874]   [,2875] #> [1,] -0.1724712 -0.03027527 -0.4332942 0.4648254 0.1317099 -0.1032108 0.1464406 #>         [,2876]    [,2877]   [,2878]     [,2879]    [,2880]    [,2881] #> [1,] -0.1343786 -0.5470681 0.0489144 -0.09523224 -0.4303307 -0.2678645 #>         [,2882]    [,2883]    [,2884]     [,2885] [,2886]     [,2887] #> [1,] -0.7867579 -0.1133996 0.01294439 -0.08561479 -0.1584 -0.03850264 #>         [,2888]   [,2889]    [,2890]   [,2891]   [,2892]    [,2893]   [,2894] #> [1,] -0.1489584 -0.260654 -0.2545175 0.2975989 0.1143902 -0.5600878 0.1674907 #>          [,2895]    [,2896]    [,2897]    [,2898]   [,2899]    [,2900] #> [1,] 0.003831431 0.01916128 -0.5380155 -0.2696236 0.1754265 -0.5726928 #>          [,2901]    [,2902]    [,2903]    [,2904]     [,2905]     [,2906] #> [1,] -0.08587673 0.09783601 -0.2467882 -0.7180303 0.005121277 -0.06327494 #>         [,2907]    [,2908]     [,2909]    [,2910]    [,2911]   [,2912] #> [1,] -0.2135034 -0.6684367 -0.08161781 0.04014634 -0.3131629 0.1835529 #>         [,2913]   [,2914]   [,2915]   [,2916]    [,2917]    [,2918]    [,2919] #> [1,] -0.1454393 0.1862822 -0.140556 0.2048226 -0.3796107 -0.2554444 -0.1411953 #>        [,2920]   [,2921]   [,2922]    [,2923]   [,2924]    [,2925]   [,2926] #> [1,] 0.3886364 0.1664922 -0.285065 -0.5161337 0.2914806 -0.2500692 -0.161016 #>          [,2927]    [,2928]    [,2929]    [,2930]    [,2931]   [,2932] #> [1,] -0.09657969 -0.5258422 -0.3587495 0.05053839 0.07142102 0.1396569 #>         [,2933]    [,2934]   [,2935]    [,2936]    [,2937]   [,2938]   [,2939] #> [1,] -0.3493158 -0.1430227 0.2475241 -0.1675877 -0.2245935 0.4516636 0.1080833 #>        [,2940]   [,2941]   [,2942]   [,2943]    [,2944]    [,2945]   [,2946] #> [1,] -0.319949 0.4352262 0.2200099 0.1101037 0.08825255 -0.1743681 0.1727658 #>        [,2947]  [,2948]   [,2949]     [,2950]    [,2951]    [,2952]    [,2953] #> [1,] 0.2941395 0.413221 0.2534959 -0.02199015 -0.3297388 0.05209195 -0.2674891 #>         [,2954]    [,2955]   [,2956]    [,2957]    [,2958]    [,2959] #> [1,] -0.3311135 0.03461114 0.3620333 0.04829971 -0.1818255 0.05048822 #>         [,2960]    [,2961]    [,2962]   [,2963]    [,2964]   [,2965] #> [1,] -0.1925303 -0.4542911 -0.2076089 -0.309224 -0.4679158 0.1642968 #>          [,2966]   [,2967]    [,2968]    [,2969]    [,2970]    [,2971] #> [1,] 0.005376507 0.1486911 -0.4549435 -0.2163283 -0.2117579 -0.1287867 #>        [,2972]   [,2973]    [,2974]    [,2975]      [,2976]    [,2977] #> [1,] 0.3136292 0.3757304 -0.1597734 -0.1684117 -0.005979479 -0.4216088 #>          [,2978]     [,2979]    [,2980]   [,2981]  [,2982]    [,2983]   [,2984] #> [1,] 0.001576119 -0.06236222 -0.3312745 0.2078801 0.392783 -0.3813942 -0.531521 #>         [,2985]    [,2986]    [,2987]   [,2988]    [,2989]   [,2990]    [,2991] #> [1,] -0.1061871 -0.2468835 -0.3260061 0.1770539 -0.4306379 0.2301831 -0.2732229 #>        [,2992]   [,2993]     [,2994]  [,2995]    [,2996]   [,2997]    [,2998] #> [1,] 0.2645695 0.1455057 -0.07383699 0.347154 -0.1347596 0.4123798 0.06833591 #>            [,2999]   [,3000]    [,3001]   [,3002]  [,3003]    [,3004]   [,3005] #> [1,] -0.0004282707 0.6371163 0.02748678 0.3290346 -0.14538 -0.6075604 0.1131554 #>         [,3006]    [,3007]    [,3008]     [,3009]    [,3010]   [,3011] #> [1,] -0.4291234 -0.1573261 -0.2735881 -0.04287802 -0.0790573 -0.631137 #>         [,3012]   [,3013]     [,3014]    [,3015]    [,3016]    [,3017] #> [1,] -0.2461123 0.4898364 -0.09138821 -0.4562469 -0.7896879 -0.1265766 #>        [,3018]    [,3019]    [,3020]    [,3021]    [,3022]    [,3023]   [,3024] #> [1,] 0.4422407 -0.3249636 -0.3217765 0.05514463 -0.5573294 -0.1703724 0.6640954 #>        [,3025]    [,3026]    [,3027]   [,3028]    [,3029]    [,3030] #> [1,] 0.2858936 -0.1092294 -0.3778693 0.1593637 -0.1414653 -0.3169777 #>          [,3031]   [,3032]    [,3033]     [,3034]    [,3035]    [,3036] #> [1,] -0.06971776 0.2584663 -0.1327134 -0.02773379 -0.3858255 -0.2670407 #>          [,3037]     [,3038]    [,3039]    [,3040]    [,3041]    [,3042] #> [1,] -0.06847375 -0.03387989 -0.2900102 -0.1367484 -0.2804439 -0.3295368 #>        [,3043]   [,3044]    [,3045]     [,3046]   [,3047]    [,3048] #> [1,] 0.2966015 0.1851372 0.09300595 -0.07556308 -0.286505 -0.2295851 #>          [,3049]    [,3050]    [,3051]   [,3052]   [,3053]    [,3054]   [,3055] #> [1,] -0.03686639 0.05582299 -0.2274707 0.1971784 -0.415387 -0.2559994 0.4109262 #>          [,3056]   [,3057]   [,3058]   [,3059]    [,3060]   [,3061]   [,3062] #> [1,] -0.05036356 -0.482225 -0.693385 0.1189056 -0.1728656 0.5601533 -0.123431 #>         [,3063]    [,3064]     [,3065]   [,3066]    [,3067]    [,3068] #> [1,] -0.1346682 -0.4686146 -0.04461561 -0.555009 0.03014579 -0.3249783 #>         [,3069]    [,3070]     [,3071]    [,3072]    [,3073]    [,3074] #> [1,] 0.02548267 -0.3162012 -0.02210914 -0.4113623 -0.2078482 -0.1120959 #>         [,3075]    [,3076]    [,3077]     [,3078]    [,3079]    [,3080] #> [1,] -0.3747434 -0.1641292 -0.3038203 -0.08546142 -0.3033026 -0.2301207 #>         [,3081]    [,3082]    [,3083]    [,3084]    [,3085]    [,3086] #> [1,] -0.4257895 0.06351323 -0.4589898 -0.2046515 -0.4414676 -0.1980888 #>          [,3087]    [,3088]     [,3089]    [,3090]     [,3091]    [,3092] #> [1,] -0.05722543 -0.1616981 0.003794218 -0.1002806 -0.05257675 0.07221297 #>         [,3093]    [,3094]     [,3095]    [,3096]   [,3097]   [,3098] #> [1,] 0.06169407 -0.1801287 -0.07142837 -0.6098085 -0.453416 0.1437109 #>         [,3099]    [,3100]    [,3101]    [,3102]   [,3103]   [,3104]    [,3105] #> [1,] -0.2333733 -0.1109174 -0.2224049 -0.6347171 0.2833184 0.2873439 -0.7890564 #>         [,3106]   [,3107]    [,3108]   [,3109]     [,3110]    [,3111]   [,3112] #> [1,] -0.3844642 -0.303627 -0.3913998 -0.532623 -0.09476626 -0.5801408 0.2139936 #>        [,3113]    [,3114]   [,3115]   [,3116]   [,3117]   [,3118]    [,3119] #> [1,] 0.1334529 -0.5133455 0.4037753 -0.372036 0.1750852 0.4425066 -0.3718832 #>       [,3120]     [,3121]   [,3122]    [,3123]   [,3124]    [,3125]   [,3126] #> [1,] 0.401146 -0.04734852 0.2560163 -0.3843718 0.3489192 0.04316912 0.4102217 #>        [,3127]    [,3128]   [,3129]     [,3130]   [,3131]    [,3132]    [,3133] #> [1,] 0.1036275 0.07595563 0.3717824 -0.03664537 0.1877118 -0.0551961 -0.4701991 #>         [,3134]    [,3135]    [,3136]    [,3137]    [,3138]   [,3139] #> [1,] -0.3412439 0.07695568 -0.3185764 -0.1150675 -0.1403436 0.4114284 #>         [,3140]    [,3141]   [,3142]     [,3143]    [,3144]    [,3145] #> [1,] -0.1528665 -0.4513678 0.5403821 -0.08219095 -0.4717703 0.06900786 #>         [,3146]   [,3147]   [,3148]     [,3149]    [,3150]    [,3151] #> [1,] -0.5654087 0.1494618 0.1735968 -0.02564389 -0.1038775 -0.3503392 #>         [,3152]    [,3153]     [,3154]    [,3155]    [,3156]   [,3157] #> [1,] -0.7168872 0.02034567 -0.02296776 -0.2110657 -0.4218544 -0.319612 #>        [,3158]    [,3159]      [,3160]   [,3161]    [,3162]   [,3163] #> [1,] 0.3932756 0.02930814 -0.006990693 0.1428727 -0.2945702 0.1264484 #>         [,3164]    [,3165]     [,3166]     [,3167]     [,3168]    [,3169] #> [1,] -0.1186848 -0.5430077 -0.07440493 -0.03471109 -0.02290969 -0.3145072 #>         [,3170]    [,3171]   [,3172]    [,3173]   [,3174]   [,3175]     [,3176] #> [1,] -0.2290132 -0.1000677 -0.543886 -0.1483322 0.4487514 -0.298478 -0.02824018 #>        [,3177]    [,3178]    [,3179]    [,3180]    [,3181]     [,3182] #> [1,] 0.0511965 0.08454277 0.07978612 -0.4900623 -0.4041912 -0.06667557 #>          [,3183]   [,3184]    [,3185]   [,3186]    [,3187]    [,3188] #> [1,] -0.03963025 0.2436374 -0.4457576 0.1410746 0.05403835 -0.2362468 #>         [,3189]    [,3190]    [,3191]     [,3192]    [,3193]    [,3194] #> [1,] 0.02051149 -0.4778067 -0.1676014 -0.06218308 0.08690859 -0.1377535 #>         [,3195]    [,3196]   [,3197]    [,3198]   [,3199]   [,3200]     [,3201] #> [1,] 0.07081811 0.04316714 -0.510753 -0.1338145 0.3541782 0.2161482 -0.07055839 #>         [,3202]     [,3203]    [,3204] [,3205]   [,3206]   [,3207]     [,3208] #> [1,] -0.1213098 -0.05996144 -0.1624437  -0.327 0.3696739 0.3722264 -0.08983997 #>         [,3209]     [,3210]   [,3211]    [,3212]    [,3213]    [,3214] #> [1,] -0.1668291 -0.06778825 0.4274764 0.01113209 -0.3063639 0.07963343 #>         [,3215]    [,3216]   [,3217]    [,3218]     [,3219]   [,3220] #> [1,] -0.0312148 -0.2655602 -0.188055 -0.1802554 -0.07342574 0.0428618 #>         [,3221]    [,3222]    [,3223]    [,3224]    [,3225]    [,3226] #> [1,] -0.4819903 -0.2587544 -0.2327502 -0.3330734 -0.1571128 -0.2505094 #>         [,3227]    [,3228]    [,3229]    [,3230]    [,3231]   [,3232]   [,3233] #> [1,] -0.1088519 0.07515976 0.03892178 -0.3853137 -0.1764235 0.2275834 0.2067177 #>         [,3234]     [,3235]    [,3236]    [,3237]    [,3238]    [,3239] #> [1,] 0.03644354 -0.01130601 -0.3239287 -0.7339387 -0.3495704 0.07412791 #>           [,3240]   [,3241]   [,3242]    [,3243]    [,3244]  [,3245]   [,3246] #> [1,] -0.003098956 0.3502686 0.3232865 0.01293498 -0.1782751 0.056053 0.5003017 #>         [,3247]   [,3248]    [,3249]     [,3250]    [,3251]    [,3252] #> [1,] -0.6080737 0.2202786 -0.2113068 -0.03869491 -0.3243787 0.06416532 #>           [,3253]   [,3254]   [,3255]    [,3256]   [,3257]    [,3258] #> [1,] -0.006746861 0.1031691 0.0809228 0.08017757 0.1252841 -0.1005768 #>         [,3259]      [,3260]   [,3261]    [,3262]    [,3263]    [,3264] #> [1,] -0.4298321 -0.003595109 0.3021071 -0.6822628 -0.3660474 -0.2371631 #>          [,3265]      [,3266]     [,3267]    [,3268]   [,3269]   [,3270] #> [1,] 0.009282718 -0.002583909 -0.01595953 0.08315737 0.3606391 0.2655282 #>          [,3271]    [,3272]     [,3273]   [,3274]    [,3275]    [,3276] #> [1,] -0.04404244 -0.7048144 -0.01116774 0.2830173 0.08153446 0.02262235 #>         [,3277]    [,3278]     [,3279]    [,3280]    [,3281]    [,3282] #> [1,] -0.4930128 -0.2304513 -0.06154049 0.05602311 0.08664274 0.01490944 #>         [,3283]      [,3284]   [,3285]   [,3286]   [,3287]     [,3288] #> [1,] -0.2887083 -0.007537073 0.1207622 0.2671761 0.2358853 -0.06080524 #>         [,3289]  [,3290]    [,3291]    [,3292]      [,3293]    [,3294] #> [1,] 0.07804425 0.143287 -0.4626777 0.04945661 -0.004811945 -0.5314293 #>         [,3295]    [,3296]    [,3297]     [,3298]    [,3299]   [,3300] #> [1,] -0.2959565 -0.6613689 -0.2091575 0.007110986 -0.7197001 0.2467189 #>         [,3301]    [,3302]     [,3303]  [,3304]    [,3305]    [,3306] #> [1,] -0.2572989 -0.5702116 -0.05420971 -0.34318 -0.6701726 0.07028602 #>         [,3307]   [,3308]   [,3309]    [,3310]  [,3311]    [,3312]    [,3313] #> [1,] -0.4387982 0.1653718 0.1140277 0.07523959 0.160211 -0.3537147 -0.2380997 #>         [,3314]   [,3315]     [,3316]    [,3317]    [,3318]    [,3319] #> [1,] 0.06489465 0.1817876 -0.06401448 -0.2761353 -0.5474589 -0.3042512 #>         [,3320]   [,3321]    [,3322]    [,3323]    [,3324]    [,3325] #> [1,] -0.2343236 0.3453711 -0.1103442 -0.1879715 -0.3232669 -0.1994744 #>         [,3326]    [,3327]     [,3328]  [,3329]     [,3330]    [,3331] #> [1,] -0.2059679 0.02833617 0.008998964 0.100082 -0.05854584 -0.1131754 #>         [,3332]    [,3333]   [,3334]   [,3335]    [,3336]    [,3337]   [,3338] #> [1,] -0.2508323 -0.2248627 0.4025997 0.2094431 -0.0478759 -0.1941026 0.4269273 #>           [,3339]    [,3340]   [,3341]    [,3342]     [,3343]    [,3344] #> [1,] 0.0001379323 0.03806618 0.4098504 0.05306089 -0.06701452 -0.1781725 #>         [,3345]   [,3346]    [,3347]   [,3348]    [,3349]     [,3350] #> [1,] -0.3203812 0.1684111 -0.4193097 0.3197022 -0.1714977 0.009080389 #>         [,3351]   [,3352]    [,3353]    [,3354]     [,3355]    [,3356] #> [1,] -0.1399216 0.5913693 -0.1338489 -0.2230316 -0.01931009 0.09135142 #>        [,3357]   [,3358]    [,3359]   [,3360]    [,3361]    [,3362]    [,3363] #> [1,] -0.107576 0.3150083 0.05300838 0.2701168 0.08300346 0.02297648 0.09029102 #>         [,3364]   [,3365]   [,3366]   [,3367]    [,3368]    [,3369]    [,3370] #> [1,] -0.1082748 0.3586083 0.0599206 0.4787662 -0.1054301 -0.3236226 -0.3922874 #>         [,3371]   [,3372]     [,3373]    [,3374]    [,3375]    [,3376] #> [1,] -0.5046989 0.2241839 -0.02313314 -0.5535504 -0.2440933 -0.3075045 #>         [,3377]     [,3378]    [,3379]    [,3380]    [,3381]   [,3382] #> [1,] -0.2873458 -0.05388503 -0.0837304 -0.1312466 -0.1477352 0.3818492 #>        [,3383]    [,3384]     [,3385]  [,3386]   [,3387]   [,3388]   [,3389] #> [1,] 0.0711741 -0.1073243 -0.05256592 0.190507 -0.014599 -0.421509 0.2514744 #>        [,3390]    [,3391]    [,3392]    [,3393]   [,3394]    [,3395]   [,3396] #> [1,] 0.1790048 0.04963105 -0.4432601 -0.1724015 0.3657629 -0.1856624 0.1222105 #>         [,3397]     [,3398]    [,3399]    [,3400]    [,3401]    [,3402] #> [1,] -0.2543352 -0.02626916 -0.6607252 -0.0732733 -0.3478678 0.02229474 #>         [,3403]    [,3404]   [,3405]   [,3406]     [,3407]    [,3408] #> [1,] -0.1265523 -0.2986915 -0.664251 0.4131627 -0.01343179 -0.1623724 #>          [,3409]     [,3410]    [,3411]    [,3412]    [,3413]    [,3414] #> [1,] -0.07871612 -0.09643347 -0.2809628 -0.7650802 -0.0836533 0.03791451 #>          [,3415]   [,3416]   [,3417]     [,3418]     [,3419]    [,3420] #> [1,] -0.07346334 -0.170344 0.1480302 -0.06636342 -0.08066059 0.07304944 #>         [,3421]    [,3422]    [,3423]     [,3424]    [,3425]     [,3426] #> [1,] -0.1168823 -0.0844459 -0.1165089 -0.08790683 -0.3522657 -0.04988516 #>         [,3427]    [,3428]    [,3429]   [,3430]    [,3431]   [,3432] #> [1,] -0.3484841 -0.1329217 -0.3641672 0.0319278 -0.2165391 0.1478391 #>          [,3433]   [,3434]    [,3435]    [,3436]    [,3437]    [,3438] #> [1,] -0.04778659 0.1846096 -0.5527696 0.05142317 -0.6695154 -0.1786535 #>         [,3439]    [,3440]    [,3441]    [,3442]   [,3443]    [,3444] #> [1,] -0.0158248 -0.3791882 -0.3437271 -0.1916068 0.4163014 -0.6205291 #>         [,3445]    [,3446]    [,3447]    [,3448]    [,3449]   [,3450] #> [1,] -0.1592837 0.03081404 -0.2147891 0.08650725 -0.1142108 0.2150647 #>         [,3451]     [,3452]   [,3453]   [,3454]    [,3455]   [,3456]   [,3457] #> [1,] -0.5841385 -0.02899841 0.5337762 0.0267313 -0.4600185 0.3856767 0.1708903 #>         [,3458]    [,3459]    [,3460]    [,3461]    [,3462]     [,3463] #> [1,] -0.2011521 0.06171632 -0.2139162 -0.6368689 -0.2414337 -0.09321684 #>          [,3464]    [,3465]     [,3466]    [,3467]   [,3468]    [,3469] #> [1,] -0.07275033 -0.1047449 -0.07909453 -0.1972057 -0.278472 0.03435806 #>        [,3470]     [,3471]    [,3472]    [,3473]    [,3474]     [,3475] #> [1,] -0.154307 -0.06029702 -0.1953016 -0.3462828 -0.2533359 -0.01957368 #>         [,3476]    [,3477]  [,3478]   [,3479]   [,3480]    [,3481]   [,3482] #> [1,] 0.03615995 0.04554828 -0.22749 0.3086879 0.1293233 -0.4757324 0.3393111 #>          [,3483]    [,3484]    [,3485]   [,3486]     [,3487]   [,3488] #> [1,] -0.01472956 -0.1965021 -0.3110404 0.2427098 0.004266247 -0.103879 #>         [,3489]     [,3490]    [,3491]    [,3492]    [,3493]    [,3494] #> [1,] 0.02667899 -0.09533371 -0.1248311 -0.2504993 -0.1242301 -0.2806675 #>        [,3495]   [,3496]   [,3497]    [,3498]     [,3499]    [,3500]    [,3501] #> [1,] 0.2159769 0.4920238 0.1409026 -0.3088058 -0.07406086 -0.1275367 0.08776304 #>         [,3502]   [,3503]   [,3504]    [,3505]   [,3506]     [,3507]    [,3508] #> [1,] -0.1236013 -0.335393 0.1756212 0.03470454 0.2655126 -0.01561338 0.02133503 #>        [,3509]     [,3510]    [,3511]   [,3512]    [,3513]   [,3514] #> [1,] -0.417867 -0.01053626 -0.2983679 0.4071736 -0.7807874 0.2232585 #>          [,3515]    [,3516]   [,3517]   [,3518]    [,3519]   [,3520] #> [1,] -0.08199853 -0.5960955 0.3074835 0.2339832 0.03480754 0.1667869 #>          [,3521]    [,3522]   [,3523]   [,3524]    [,3525]    [,3526] #> [1,] -0.09525722 0.05139862 -0.361008 0.2709007 -0.1129297 -0.3841644 #>         [,3527]   [,3528]   [,3529]     [,3530]    [,3531]    [,3532] #> [1,] -0.3228057 -0.102836 0.3078728 -0.09389435 -0.6355364 -0.5221143 #>         [,3533]   [,3534]    [,3535]    [,3536]    [,3537]     [,3538] #> [1,] -0.1224086 0.2160659 -0.3157629 0.05230466 -0.3511809 -0.09246903 #>          [,3539]     [,3540]   [,3541]    [,3542]    [,3543]   [,3544] #> [1,] -0.01197839 -0.04389118 0.2175318 -0.5707435 0.01866574 0.1890654 #>         [,3545]   [,3546]   [,3547]     [,3548]     [,3549]     [,3550] #> [1,] -0.1491275 0.1195417 0.1699805 -0.09333638 -0.05401116 -0.04911862 #>        [,3551]    [,3552]    [,3553]   [,3554]    [,3555]     [,3556] #> [1,] 0.3125951 -0.1668513 0.03967577 0.1971091 0.02656315 0.005657576 #>         [,3557]    [,3558]    [,3559]    [,3560]   [,3561]  [,3562]    [,3563] #> [1,] 0.01524547 -0.1437444 -0.1096453 -0.2301833 0.1810658 -0.16987 -0.4193029 #>         [,3564]  [,3565]    [,3566]    [,3567]       [,3568]     [,3569] #> [1,] -0.2290126 0.277979 -0.4577282 -0.3246082 -0.0009949005 -0.03726447 #>        [,3570]    [,3571]     [,3572]   [,3573]    [,3574]   [,3575]    [,3576] #> [1,] -0.216229 0.01878242 -0.03647934 -0.247198 -0.4525739 0.1435383 0.03304415 #>       [,3577]   [,3578]    [,3579]    [,3580]    [,3581]    [,3582]    [,3583] #> [1,] -0.33801 0.3848448 -0.1572283 -0.5765657 -0.4487801 -0.6291398 -0.1770995 #>        [,3584]    [,3585]    [,3586]   [,3587]    [,3588]     [,3589] #> [1,] -0.191259 -0.2688147 0.06091993 0.2693664 -0.3266003 -0.06481411 #>         [,3590]    [,3591]    [,3592]    [,3593]    [,3594]  [,3595]    [,3596] #> [1,] -0.5681689 -0.3088497 -0.2357689 -0.0447944 -0.7318434 0.102242 -0.2280587 #>        [,3597]    [,3598]    [,3599]     [,3600]      [,3601]    [,3602] #> [1,] 0.1531683 -0.2575948 -0.4447931 -0.03975196 -0.008850818 -0.6068381 #>         [,3603]     [,3604]    [,3605]    [,3606]   [,3607]      [,3608] #> [1,] -0.1752752 -0.08167127 -0.4764126 0.09740351 0.2112553 -0.003686596 #>        [,3609]     [,3610]    [,3611]   [,3612]    [,3613]     [,3614] #> [1,] 0.1535635 -0.02916334 -0.5477576 0.1371477 -0.2325788 -0.06714104 #>          [,3615]    [,3616]    [,3617]   [,3618]    [,3619]   [,3620] #> [1,] -0.06387027 -0.1160591 -0.2136689 -0.259626 -0.2933279 0.3794801 #>         [,3621]    [,3622]    [,3623]    [,3624]     [,3625]   [,3626] #> [1,] -0.2597327 -0.1430061 -0.3936698 -0.2210195 -0.06786375 0.3136481 #>        [,3627]    [,3628]    [,3629]    [,3630]    [,3631]    [,3632]   [,3633] #> [1,] 0.2533211 -0.4123002 -0.1113923 -0.7458481 0.07792601 -0.2570552 0.3174007 #>         [,3634]    [,3635]    [,3636]    [,3637]    [,3638]    [,3639] #> [1,] -0.4970679 -0.1042489 -0.3951613 -0.2418087 -0.3928189 0.02270396 #>        [,3640]    [,3641]    [,3642]    [,3643]    [,3644]    [,3645] #> [1,] 0.3788611 -0.2908836 -0.4576788 -0.0139333 -0.4473927 0.07861372 #>         [,3646]    [,3647]    [,3648]    [,3649]   [,3650]    [,3651] #> [1,] -0.2296607 -0.4246242 -0.0544015 -0.1430152 0.2414799 -0.6226553 #>         [,3652]     [,3653]    [,3654]    [,3655]      [,3656]    [,3657] #> [1,] -0.4943773 -0.09436431 -0.4188339 -0.3172252 -0.003916105 -0.1388087 #>          [,3658]    [,3659]   [,3660]    [,3661]    [,3662]    [,3663] #> [1,] -0.02526438 -0.2660371 -0.102446 -0.5421796 -0.1007111 -0.6032129 #>        [,3664]    [,3665]    [,3666]    [,3667]     [,3668]  [,3669]    [,3670] #> [1,] 0.6828116 -0.4497439 0.07299667 -0.4541939 -0.03005602 0.295106 -0.6332205 #>        [,3671]    [,3672]    [,3673]   [,3674]    [,3675]   [,3676]    [,3677] #> [1,] 0.1017595 -0.3979731 -0.5459324 0.2605563 0.03541834 0.1378343 -0.3467747 #>         [,3678]    [,3679]   [,3680]     [,3681]    [,3682]    [,3683] #> [1,] -0.1302646 0.04903073 0.2416883 -0.01878516 0.01228425 -0.2013393 #>         [,3684]    [,3685]   [,3686]    [,3687]   [,3688]    [,3689]   [,3690] #> [1,] -0.2406489 0.03320052 -0.129371 0.04567996 0.3691523 0.01597571 0.1842714 #>        [,3691]   [,3692]    [,3693]     [,3694]    [,3695]  [,3696]     [,3697] #> [1,] 0.1386613 0.1118603 -0.5194076 -0.04740354 -0.3550823 0.276741 -0.05402117 #>         [,3698]   [,3699]   [,3700]    [,3701]     [,3702]    [,3703]   [,3704] #> [1,] 0.02793945 -0.230854 0.3058427 -0.2414346 -0.05415645 -0.2574599 0.1935485 #>         [,3705]    [,3706]    [,3707]    [,3708]    [,3709]    [,3710] #> [1,] -0.5192022 0.01566908 -0.1556956 -0.1851249 -0.1883204 -0.1268602 #>         [,3711]     [,3712]    [,3713]    [,3714]    [,3715]     [,3716] #> [1,] -0.2277118 -0.04774493 -0.2209374 -0.1295026 -0.6042867 -0.06905563 #>        [,3717]   [,3718]     [,3719]     [,3720]   [,3721]    [,3722] #> [1,] 0.3371551 0.6787537 -0.05075609 -0.03234152 0.7025932 -0.2465535 #>          [,3723]      [,3724]   [,3725]      [,3726]   [,3727]     [,3728] #> [1,] -0.01284288 0.0003160155 0.5607806 -0.004522282 -0.275031 -0.03590358 #>          [,3729]    [,3730]    [,3731]    [,3732]     [,3733]     [,3734] #> [1,] -0.07888678 0.02692674 -0.0185557 -0.2536525 -0.09514227 -0.04289091 #>         [,3735]    [,3736]    [,3737]    [,3738]    [,3739]     [,3740] #> [1,] -0.4345456 -0.4454892 -0.1729961 -0.3544506 0.07032166 -0.05214402 #>         [,3741]     [,3742]   [,3743]    [,3744]     [,3745]     [,3746] #> [1,] -0.1698428 -0.06442482 0.2165202 -0.1046973 -0.05529225 -0.05342154 #>         [,3747]   [,3748]   [,3749]     [,3750]   [,3751]    [,3752]    [,3753] #> [1,] -0.9061803 0.4143771 -0.280621 -0.08579242 0.1308985 -0.2129382 0.05693795 #>         [,3754]   [,3755]    [,3756]    [,3757]   [,3758]   [,3759]    [,3760] #> [1,] -0.1543668 0.3127639 -0.1238537 -0.3211374 0.5133231 0.3152176 -0.7193779 #>         [,3761]     [,3762]    [,3763]    [,3764]     [,3765]    [,3766] #> [1,] -0.6225797 -0.01916449 -0.1909324 -0.2101509 -0.06394408 -0.2780203 #>         [,3767]   [,3768]    [,3769]     [,3770]      [,3771]   [,3772] #> [1,] -0.0993973 0.1417265 -0.1729667 -0.04599951 -0.006664774 0.1866504 #>         [,3773] [,3774]     [,3775]   [,3776]    [,3777]    [,3778]    [,3779] #> [1,] -0.1307734 -0.1865 -0.08706629 0.2058758 -0.5260086 0.07432099 -0.1000546 #>         [,3780]    [,3781]   [,3782]    [,3783]   [,3784]     [,3785] #> [1,] -0.2826502 0.03838238 0.1516966 -0.4019412 -0.100775 0.005808676 #>          [,3786]    [,3787]   [,3788]      [,3789]    [,3790]    [,3791] #> [1,] -0.02606712 -0.2095446 0.1817161 -0.003528617 -0.2342244 -0.2138309 #>         [,3792]   [,3793]     [,3794]   [,3795]      [,3796]   [,3797] #> [1,] -0.2195261 0.2727983 -0.03173289 0.1058234 -0.007089137 0.0258994 #>         [,3798]     [,3799]   [,3800]   [,3801]     [,3802]    [,3803] #> [1,] -0.3509426 -0.04842832 0.1932957 0.1161911 -0.05739384 -0.1649548 #>         [,3804]   [,3805]     [,3806]     [,3807]    [,3808]   [,3809] #> [1,] -0.2764855 0.1508727 -0.08132334 -0.06798923 -0.1467784 -0.170544 #>           [,3810]   [,3811]    [,3812]    [,3813]     [,3814]   [,3815] #> [1,] -0.008131044 0.1672228 -0.1555514 -0.3339302 -0.05589335 0.1462248 #>         [,3816]    [,3817]   [,3818]   [,3819]    [,3820]   [,3821]   [,3822] #> [1,] -0.5201777 -0.2360109 0.2070582 -0.189403 -0.3356625 0.3331137 0.0734608 #>         [,3823]   [,3824]   [,3825]   [,3826]   [,3827]     [,3828]    [,3829] #> [1,] -0.3848242 0.3095959 0.4843868 0.1322241 0.5690592 -0.01145369 -0.1919735 #>         [,3830]    [,3831]   [,3832]    [,3833]    [,3834]     [,3835] #> [1,] -0.2537892 -0.1277469 0.3386139 0.01248401 -0.5237009 -0.07456807 #>          [,3836]    [,3837]    [,3838]    [,3839]   [,3840]    [,3841] #> [1,] -0.06348098 0.02519281 0.02969311 -0.1141419 0.1991639 -0.1683784 #>        [,3842]   [,3843]   [,3844]    [,3845]    [,3846]     [,3847]   [,3848] #> [1,] 0.4961981 0.2743732 0.1326075 -0.1811886 -0.4568504 -0.09649206 0.0706246 #>         [,3849]   [,3850]    [,3851]    [,3852]    [,3853]    [,3854] #> [1,] -0.2394764 0.2895305 -0.2233083 -0.6819668 -0.1729319 -0.4049116 #>         [,3855]    [,3856]    [,3857]    [,3858]    [,3859]   [,3860] #> [1,] -0.4755363 -0.1344707 -0.2732243 0.02394247 0.09204924 0.2966071 #>         [,3861]    [,3862]    [,3863]    [,3864]   [,3865]    [,3866] #> [1,] -0.3271483 -0.1107642 -0.7323909 -0.2246974 0.1167662 0.06331379 #>         [,3867]    [,3868]    [,3869]   [,3870]     [,3871]    [,3872] #> [1,] -0.4480705 -0.2780095 -0.1600812 -0.146384 -0.06289064 -0.4454543 #>         [,3873]  [,3874]    [,3875]    [,3876]    [,3877]    [,3878]   [,3879] #> [1,] -0.7730951 0.106204 -0.5121098 0.03971322 -0.1655041 -0.5246701 0.2946104 #>          [,3880]    [,3881]   [,3882]    [,3883]     [,3884]   [,3885] #> [1,] -0.09573218 -0.5741495 0.8091032 -0.5431024 0.003101158 0.2802437 #>        [,3886]    [,3887]    [,3888]    [,3889]    [,3890]    [,3891] #> [1,] 0.1485016 0.07055563 -0.1576105 -0.0605012 -0.3108166 -0.3832343 #>          [,3892]    [,3893]     [,3894]   [,3895]    [,3896]    [,3897] #> [1,] -0.04739596 -0.2484052 -0.06572382 0.2434954 -0.1344276 -0.1705569 #>         [,3898]    [,3899]    [,3900]    [,3901]     [,3902]    [,3903] #> [1,] 0.05920225 0.06109245 -0.4548935 0.08254431 -0.09956271 0.06189868 #>          [,3904]   [,3905]    [,3906]    [,3907]    [,3908]     [,3909] #> [1,] -0.08554989 0.1610314 -0.3065668 -0.3985133 -0.3135726 -0.07760308 #>          [,3910]   [,3911]    [,3912]    [,3913]    [,3914]    [,3915] #> [1,] -0.01412621 0.1559632 0.09770789 0.03329586 -0.3843481 -0.2764909 #>         [,3916]   [,3917]    [,3918]     [,3919]   [,3920]    [,3921] #> [1,] -0.3236352 0.1989568 -0.0690095 -0.06813676 0.1856025 -0.1796884 #>         [,3922]    [,3923]    [,3924]   [,3925]    [,3926]     [,3927] #> [1,] -0.8027453 -0.7423049 -0.5479568 0.2614708 -0.4247117 -0.08270931 #>        [,3928]    [,3929]   [,3930]    [,3931]    [,3932]     [,3933] #> [1,] 0.2814013 -0.3276528 -0.376854 -0.0336686 -0.3926143 -0.00210551 #>         [,3934]    [,3935]    [,3936]    [,3937]    [,3938]    [,3939] #> [1,] -0.5481927 -0.6533566 -0.4348541 0.06388675 -0.2383428 -0.4496688 #>         [,3940]     [,3941]   [,3942]   [,3943]     [,3944]    [,3945] #> [1,] -0.0822862 -0.05847717 0.1090685 0.2369973 -0.05346288 -0.3142008 #>          [,3946]   [,3947]   [,3948]    [,3949]   [,3950]    [,3951]    [,3952] #> [1,] -0.09632071 0.2128493 -0.096742 -0.5765387 0.0208387 -0.1583498 -0.5987042 #>         [,3953]   [,3954]    [,3955]    [,3956]    [,3957]    [,3958] #> [1,] -0.2638756 0.3165547 0.02190058 -0.5922121 0.03420048 -0.2064306 #>         [,3959]     [,3960]    [,3961]    [,3962]     [,3963]    [,3964] #> [1,] -0.1225138 -0.08140286 -0.3026774 0.08729024 -0.06026584 -0.2185258 #>        [,3965]    [,3966]   [,3967]   [,3968]     [,3969]    [,3970]   [,3971] #> [1,] 0.0954461 -0.2642182 0.0768059 -0.628321 0.006849013 -0.1469301 0.5673445 #>          [,3972]    [,3973]      [,3974]    [,3975]   [,3976]    [,3977] #> [1,] -0.05184614 -0.1786461 0.0001180339 0.08426494 0.3241865 -0.3608243 #>         [,3978]   [,3979]    [,3980]   [,3981]     [,3982]   [,3983]    [,3984] #> [1,] -0.2025807 -0.302937 -0.1955928 0.1571726 -0.09837428 -0.132816 0.02248385 #>         [,3985]   [,3986]    [,3987]    [,3988]    [,3989]   [,3990] #> [1,] -0.1737112 0.1395975 -0.4875816 -0.7031558 0.03707195 0.1196247 #>          [,3991]   [,3992]     [,3993]    [,3994]    [,3995]    [,3996] #> [1,] -0.07872045 0.1170328 -0.02539042 -0.4951915 -0.0624833 0.09223766 #>          [,3997]     [,3998]    [,3999]   [,4000] #> [1,] -0.04136391 -0.08983306 -0.0253288 -0.393266  updated_model <- update_model(model, df, keep_transformed = TRUE) #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 2.6e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.26 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.13 seconds (Warm-up) #> Chain 1:                0.118 seconds (Sampling) #> Chain 1:                0.248 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.8e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.18 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.196 seconds (Warm-up) #> Chain 2:                0.142 seconds (Sampling) #> Chain 2:                0.338 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.6e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.16 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.161 seconds (Warm-up) #> Chain 3:                0.131 seconds (Sampling) #> Chain 3:                0.292 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 2.2e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.22 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.142 seconds (Warm-up) #> Chain 4:                0.129 seconds (Sampling) #> Chain 4:                0.271 seconds (Total) #> Chain 4:   query_distribution( updated_model , query = \"(Y[X=1] - Y[X=0])\", using = \"posteriors\") #>            [,1]       [,2]       [,3]       [,4]       [,5]      [,6] #> [1,] 0.09399539 -0.2667275 -0.3425707 0.05240451 -0.2964437 0.1830999 #>            [,7]       [,8]       [,9]      [,10]      [,11]      [,12] #> [1,] -0.1348862 -0.2937478 -0.1061081 -0.7598784 -0.4210423 -0.3611886 #>           [,13]      [,14]      [,15]     [,16]       [,17]     [,18] #> [1,] 0.03752251 -0.4220404 -0.2751029 0.2906471 -0.03734119 -0.354571 #>            [,19]      [,20]     [,21]     [,22]      [,23]      [,24] #> [1,] -0.05377764 -0.4973513 0.2050362 -0.386545 -0.3393518 -0.2103845 #>           [,25]     [,26]      [,27]      [,28]        [,29]      [,30] #> [1,] -0.4035671 0.2290162 -0.5417591 -0.4374012 -0.007917677 0.02501712 #>           [,31]       [,32]     [,33]     [,34]      [,35]      [,36] #> [1,] -0.4842091 0.005824574 -0.232701 0.2018663 -0.2846087 -0.3289635 #>            [,37]       [,38]     [,39]      [,40]      [,41]      [,42] #> [1,] -0.01338611 -0.01368068 0.2748433 -0.2297668 -0.1040921 0.08002576 #>            [,43]     [,44]       [,45]      [,46]      [,47]      [,48] #> [1,] -0.03190046 0.0471973 -0.08787217 -0.4934621 -0.2692099 -0.5757914 #>         [,49]      [,50]      [,51]      [,52]      [,53]      [,54]      [,55] #> [1,] 0.242648 -0.1689092 -0.1919831 -0.6927939 -0.2082213 -0.1519909 0.03856338 #>           [,56]       [,57]   [,58]      [,59]     [,60]      [,61]     [,62] #> [1,] -0.4965436 0.003977196 0.17342 -0.2327926 0.2688554 -0.5486776 0.1426045 #>          [,63]      [,64]      [,65]      [,66]     [,67]      [,68]      [,69] #> [1,] -0.373674 -0.2219964 -0.5028391 0.02808994 0.1611901 -0.1541084 0.03676152 #>          [,70]     [,71]       [,72]      [,73]      [,74]     [,75]      [,76] #> [1,] 0.4744986 -0.231095 -0.02903469 -0.1281002 -0.3152796 0.0428487 -0.2311422 #>           [,77]     [,78]     [,79]       [,80]      [,81]     [,82]     [,83] #> [1,] -0.6519088 0.2217922 0.1236229 -0.01099078 -0.3348301 -0.114087 -0.321668 #>            [,84]      [,85]    [,86]    [,87]       [,88]      [,89]      [,90] #> [1,] -0.08432726 -0.4572239 0.173056 -0.46633 -0.03175243 -0.1825478 0.04632568 #>          [,91]      [,92]      [,93]      [,94]     [,95]      [,96]     [,97] #> [1,] 0.6925295 0.01009572 -0.2713782 -0.2582109 0.1023909 -0.6064202 0.1351549 #>           [,98]      [,99]    [,100]      [,101]    [,102]     [,103] #> [1,] -0.1702068 -0.2431387 -0.178324 -0.02635815 0.1097173 -0.5837234 #>          [,104]    [,105]      [,106]    [,107]    [,108]   [,109]    [,110] #> [1,] 0.05313791 0.2472815 -0.02687044 0.4463202 0.3294682 0.183908 0.0604593 #>          [,111]     [,112]   [,113]    [,114]    [,115]    [,116]     [,117] #> [1,] -0.1854048 -0.4217445 0.203006 0.2400124 0.1101399 0.1596084 -0.2884056 #>          [,118]     [,119]     [,120]     [,121]     [,122]     [,123] #> [1,] 0.01025773 0.01588717 0.06770985 0.03240023 -0.1630973 -0.3183186 #>         [,124]     [,125]     [,126]     [,127]      [,128]     [,129] #> [1,] 0.2497624 -0.2396291 -0.1654657 -0.1696199 -0.02593357 -0.1737883 #>          [,130]     [,131]     [,132]     [,133]     [,134]    [,135]    [,136] #> [1,] -0.3191482 0.08046648 -0.1242468 -0.1879045 -0.2766603 -0.688476 0.2397806 #>          [,137]      [,138]     [,139]     [,140]     [,141]     [,142] #> [1,] -0.5972297 0.007141845 0.07007995 -0.1905953 -0.2262757 -0.1605197 #>         [,143]     [,144]     [,145]     [,146]     [,147]     [,148] #> [1,] 0.4288924 -0.2769937 -0.3289002 0.09263448 0.08840021 -0.5130858 #>          [,149]      [,150]      [,151]     [,152]     [,153]    [,154] #> [1,] -0.2586468 -0.07626089 -0.01527156 -0.4129826 -0.1484609 0.1384139 #>           [,155]     [,156]     [,157]      [,158]    [,159]   [,160] #> [1,] -0.09244782 -0.2167995 -0.2403697 -0.08661373 0.2073622 -0.22819 #>          [,161]     [,162]      [,163]     [,164]    [,165]    [,166] #> [1,] 0.07083973 0.07765609 0.005346918 -0.2431386 -0.237837 -0.110994 #>          [,167]      [,168]     [,169]      [,170]     [,171]      [,172] #> [1,] -0.2266375 -0.09302711 0.06955943 -0.03713296 -0.1163906 -0.04673072 #>          [,173]    [,174]    [,175]    [,176]     [,177]    [,178]      [,179] #> [1,] -0.1086075 0.1763509 0.2024981 0.1184684 0.04585491 0.3586267 0.007189621 #>          [,180]     [,181]     [,182]      [,183]    [,184]    [,185] #> [1,] 0.09245204 -0.2176046 -0.1006889 -0.01572611 0.1103418 0.1978861 #>          [,186]      [,187]     [,188]     [,189]     [,190]    [,191] #> [1,] -0.5311344 -0.04810803 -0.1417734 0.08557602 0.03724968 0.2184647 #>         [,192]     [,193]     [,194]     [,195]   [,196]     [,197]     [,198] #> [1,] -0.579733 -0.3036019 -0.8193876 -0.3213707 -0.34091 -0.3195252 -0.3052383 #>          [,199]    [,200]    [,201]     [,202]     [,203]      [,204] #> [1,] -0.1504094 0.0428649 0.1176811 -0.1482395 -0.4586091 -0.07043793 #>          [,205]     [,206]     [,207]     [,208]    [,209]    [,210]     [,211] #> [1,] -0.5521312 -0.3560342 -0.2558204 -0.2188122 0.1793645 -0.658646 -0.2301895 #>          [,212]     [,213]     [,214]     [,215]    [,216]     [,217]    [,218] #> [1,] -0.2758152 0.01613413 -0.2278327 -0.2534648 0.1383755 -0.1459548 0.2227731 #>         [,219]     [,220]     [,221]    [,222]    [,223]     [,224]     [,225] #> [1,] 0.1593671 -0.2284697 -0.3389894 0.2365777 0.2999011 -0.2280352 0.08278317 #>          [,226]      [,227]    [,228]     [,229]    [,230]    [,231]    [,232] #> [1,] -0.1330626 -0.07346851 0.2696245 0.03191921 0.2156262 0.0580297 0.0728157 #>         [,233]     [,234]     [,235]     [,236]    [,237]     [,238]    [,239] #> [1,] 0.3918728 -0.6526794 -0.1679544 0.03946111 0.1686742 -0.1749024 0.5522451 #>          [,240]    [,241]     [,242]     [,243]      [,244]    [,245] #> [1,] -0.1337497 0.1285982 0.08839916 -0.3651163 -0.02195218 0.2199962 #>          [,246]    [,247]     [,248]    [,249]     [,250]     [,251]     [,252] #> [1,] 0.04888397 0.2338513 -0.3898259 0.3061576 -0.2758411 -0.3011419 -0.3363451 #>         [,253]      [,254]    [,255]     [,256]     [,257]     [,258] #> [1,] 0.1456816 -0.09690348 0.0965465 0.05304273 -0.2557961 0.03083182 #>          [,259]      [,260]      [,261]     [,262]    [,263]     [,264] #> [1,] -0.3663764 -0.04301453 -0.07605401 0.06009378 -0.357617 0.02312699 #>         [,265]    [,266]    [,267]     [,268]     [,269]     [,270]     [,271] #> [1,] 0.2234208 0.1058175 0.3927177 0.06384241 0.05933611 -0.1271024 -0.2183609 #>         [,272]      [,273]     [,274]     [,275]     [,276]   [,277]    [,278] #> [1,] -0.285214 -0.08549187 -0.1506385 -0.1273815 -0.4456045 0.228751 0.2533579 #>          [,279]     [,280]    [,281]     [,282]     [,283]     [,284] #> [1,] 0.04002141 -0.3818119 0.1553948 -0.1115767 0.08074836 -0.1049138 #>          [,285]    [,286]     [,287]    [,288]    [,289]    [,290]      [,291] #> [1,] -0.3395768 0.3805959 -0.2057143 0.2978619 0.5330765 0.2345346 -0.07928154 #>           [,292]    [,293]     [,294]     [,295]     [,296]    [,297] #> [1,] -0.05226677 0.1157492 -0.6482066 -0.7785972 -0.1748962 -0.258843 #>          [,298]     [,299]     [,300]     [,301]     [,302]    [,303] #> [1,] 0.08915715 -0.6719395 -0.3885264 -0.5379739 -0.3430058 0.2414923 #>           [,304]     [,305]     [,306]    [,307]    [,308]     [,309] #> [1,] -0.05124818 -0.3889607 -0.5906791 0.1327531 0.1429376 -0.2994027 #>          [,310]     [,311]    [,312]    [,313]     [,314]      [,315]    [,316] #> [1,] 0.09459241 -0.5179901 0.2602549 0.1037001 -0.1042816 -0.05506709 -0.524182 #>         [,317]     [,318]      [,319]    [,320]     [,321]     [,322] #> [1,] 0.0596233 -0.1991193 -0.07280602 0.1094467 -0.3889781 -0.3671405 #>          [,323]     [,324]     [,325]     [,326]     [,327]     [,328] #> [1,] 0.00767278 0.02229472 -0.5333629 -0.1991384 -0.1675736 0.04590012 #>         [,329]     [,330]    [,331]      [,332]     [,333]     [,334] #> [1,] 0.4446841 -0.2307123 0.4403314 -0.04696915 -0.1361833 -0.4379818 #>           [,335]    [,336]     [,337]     [,338]     [,339]     [,340] #> [1,] -0.08970422 0.2428269 0.01583249 -0.2345228 0.04504185 -0.2221411 #>          [,341]    [,342]     [,343]     [,344]     [,345]      [,346] #> [1,] 0.03622419 0.1492724 -0.3434614 -0.8244091 0.02532041 -0.01503218 #>         [,347]     [,348]     [,349]     [,350]      [,351]     [,352] #> [1,] 0.1296322 0.06797919 -0.7544985 -0.2654541 -0.08298784 -0.1316684 #>          [,353]     [,354]    [,355]    [,356]     [,357]     [,358]     [,359] #> [1,] -0.1824536 -0.4987807 0.2476065 -0.146316 0.07687953 -0.4192294 -0.1072961 #>          [,360]    [,361]     [,362]    [,363]     [,364]     [,365]    [,366] #> [1,] 0.02528389 -0.376251 0.05384817 -0.201597 -0.1052868 -0.4636282 -0.745116 #>          [,367]     [,368]    [,369]     [,370]      [,371]    [,372] #> [1,] -0.5305564 -0.3715168 0.2113829 -0.3733397 0.004487162 0.1061485 #>          [,373]     [,374]      [,375]     [,376]    [,377]    [,378] #> [1,] -0.1037772 -0.2540967 -0.06419201 0.01961706 0.3216444 -0.393622 #>          [,379]     [,380]     [,381]      [,382]     [,383]     [,384] #> [1,] -0.1712151 0.05564913 -0.5096829 -0.01016476 -0.3735044 -0.3293862 #>         [,385]     [,386]    [,387]    [,388]    [,389]     [,390]     [,391] #> [1,] 0.1215712 -0.3295208 0.1323052 0.4851816 0.1988168 0.08357779 -0.1508632 #>         [,392]     [,393]     [,394]     [,395]     [,396]    [,397]     [,398] #> [1,] 0.1967246 -0.5381544 -0.1194503 -0.3391537 -0.1981425 0.2177163 0.02988277 #>          [,399]     [,400]    [,401]     [,402]     [,403]      [,404] #> [1,] 0.05554278 -0.7583322 0.2723067 -0.1309591 -0.1264667 -0.03092892 #>           [,405]     [,406]     [,407]   [,408]      [,409]     [,410] #> [1,] -0.04795698 -0.2319883 -0.3095539 -0.52829 -0.02417323 -0.2268947 #>          [,411]    [,412]    [,413]     [,414]      [,415]     [,416] #> [1,] -0.3382439 -0.248162 0.1432592 -0.4539272 -0.07540123 0.03211276 #>           [,417]    [,418]     [,419]     [,420]    [,421]    [,422]     [,423] #> [1,] -0.08871196 0.1255184 -0.7493613 -0.1519229 -0.205352 0.1199899 -0.2818152 #>         [,424]     [,425]     [,426]     [,427]     [,428]     [,429] #> [1,] 0.4068843 -0.1987477 -0.2351203 -0.2874505 -0.1531051 -0.2540808 #>          [,430]     [,431]     [,432]     [,433]   [,434]    [,435]     [,436] #> [1,] -0.4221499 -0.3439795 -0.5610663 0.03928225 0.181342 0.2448455 0.06448296 #>         [,437]     [,438]     [,439]     [,440]    [,441]    [,442]      [,443] #> [1,] 0.0960106 -0.1471922 0.05717813 -0.3377988 0.2605685 0.1443842 -0.05452831 #>          [,444]    [,445]     [,446]     [,447]     [,448]     [,449]  [,450] #> [1,] -0.3916697 0.1024515 -0.3364394 -0.2808012 -0.2189333 -0.1736626 0.23037 #>          [,451]     [,452]      [,453]    [,454]    [,455]     [,456]    [,457] #> [1,] -0.2889366 -0.6458309 -0.02458984 -0.235839 0.4543115 -0.3644221 0.1680817 #>         [,458]    [,459]     [,460]     [,461]     [,462]     [,463]     [,464] #> [1,] 0.3555517 0.1833251 0.04337838 -0.1753895 -0.3246159 -0.2384082 -0.4016745 #>          [,465]    [,466]    [,467]    [,468]     [,469]     [,470]     [,471] #> [1,] -0.3445556 0.1827353 -0.554666 0.2118894 -0.3299922 -0.2143312 -0.5141906 #>          [,472]     [,473]     [,474]    [,475]    [,476]    [,477]     [,478] #> [1,] -0.1675297 -0.6266861 -0.2307249 0.3487059 -0.457272 0.4775054 0.01092121 #>          [,479]      [,480]    [,481]     [,482]     [,483]     [,484] #> [1,] -0.4337751 -0.06968152 0.3371962 -0.1567353 0.07021419 -0.6925546 #>           [,485]     [,486]     [,487]        [,488]     [,489]    [,490] #> [1,] -0.01200567 -0.1727603 0.09474142 -0.0005245908 0.07274852 0.1021185 #>          [,491]     [,492]     [,493]     [,494]     [,495]     [,496] #> [1,] -0.4805708 0.02334969 -0.1654022 -0.5284547 0.05463274 -0.1898544 #>          [,497]    [,498]     [,499]       [,500]    [,501]     [,502] #> [1,] -0.4560459 0.4651543 -0.5263061 -0.004570646 0.2945699 -0.5415359 #>          [,503]     [,504]     [,505]    [,506]      [,507]      [,508] #> [1,] 0.02485392 -0.3662385 -0.1584747 0.3732758 -0.01507784 -0.02869644 #>          [,509]     [,510]     [,511]     [,512]    [,513]   [,514]     [,515] #> [1,] -0.2737282 -0.4450412 0.01535883 -0.2199937 0.2169162 -0.23156 0.09111274 #>          [,516]     [,517]     [,518]     [,519]     [,520]     [,521] #> [1,] -0.3488512 0.00813415 0.07060985 0.08154976 -0.1661074 -0.1118164 #>         [,522]    [,523]     [,524]     [,525]    [,526]      [,527]    [,528] #> [1,] 0.6344928 0.3621415 -0.4105405 -0.2713232 0.1061314 -0.08637984 0.2270264 #>          [,529]     [,530]     [,531]     [,532]     [,533]     [,534] #> [1,] -0.2674265 -0.5435622 -0.3642616 -0.1068642 0.06280392 -0.7830866 #>          [,535]     [,536]      [,537]    [,538]     [,539]    [,540] #> [1,] -0.3897288 -0.2400103 -0.04763295 0.3526954 -0.2299002 -0.721684 #>          [,541]     [,542]     [,543]    [,544]      [,545]     [,546] #> [1,] -0.0862277 0.04480833 -0.5566907 0.2076107 -0.02854371 0.07540672 #>          [,547]     [,548]    [,549]     [,550]     [,551]      [,552] #> [1,] 0.04555046 -0.3993021 0.2432271 -0.7718242 -0.2205745 -0.01354399 #>         [,553]     [,554]    [,555]    [,556]     [,557]      [,558]    [,559] #> [1,] 0.2167078 -0.2379083 0.1358765 0.2993036 -0.2150496 0.007261333 0.2652008 #>           [,560]  [,561]     [,562]     [,563]    [,564]      [,565]    [,566] #> [1,] -0.01652471 0.34473 -0.4868472 0.04375972 0.3632046 -0.07856928 0.2560018 #>           [,567]     [,568]      [,569]      [,570]     [,571]     [,572] #> [1,] -0.04966177 -0.7052205 -0.05981859 -0.03584939 -0.2092301 -0.4377729 #>           [,573]     [,574]     [,575]     [,576]    [,577]     [,578] #> [1,] -0.08409718 -0.3215894 0.04934116 0.08543215 0.0236583 0.08241297 #>          [,579]     [,580]     [,581]      [,582]     [,583]    [,584] #> [1,] -0.3497793 -0.4455699 0.02315094 -0.05562321 0.04689581 0.2140575 #>         [,585]     [,586]     [,587]     [,588]    [,589]     [,590]     [,591] #> [1,] 0.2446208 -0.2496466 0.06447239 -0.3006099 0.2018308 -0.1957578 -0.3357307 #>          [,592]    [,593]     [,594]    [,595]    [,596]    [,597]     [,598] #> [1,] -0.3888076 0.3421877 -0.1932706 0.6079925 0.1182406 0.1274426 0.05236959 #>          [,599]     [,600]     [,601]   [,602]      [,603]     [,604]    [,605] #> [1,] -0.1236315 -0.2151861 -0.1544405 0.179382 -0.09226693 -0.3775558 0.0376562 #>         [,606]     [,607]      [,608]     [,609]      [,610]    [,611] #> [1,] 0.4230948 0.08518075 -0.06873876 0.01221406 -0.09637384 -0.171775 #>          [,612]     [,613]      [,614]      [,615]     [,616]   [,617] #> [1,] -0.5013215 -0.4263588 -0.03628239 -0.01704988 -0.3044629 0.052307 #>          [,618]     [,619]     [,620]      [,621]     [,622]   [,623] #> [1,] -0.3020133 -0.1439099 -0.2909652 -0.07082653 -0.4191333 0.115573 #>           [,624]     [,625]    [,626]    [,627]    [,628]    [,629]      [,630] #> [1,] -0.07999129 0.02690056 0.3196062 -0.353648 0.2181085 0.6479945 -0.07621019 #>         [,631]     [,632]    [,633]     [,634]     [,635]    [,636]     [,637] #> [1,] 0.3050451 0.09283146 0.2582961 0.03077315 -0.2327506 0.2289172 -0.2512942 #>          [,638]    [,639]     [,640]    [,641]     [,642]    [,643]     [,644] #> [1,] 0.08915275 -0.155299 0.07054118 0.2436436 -0.2178252 0.2230665 -0.1213838 #>        [,645]     [,646]     [,647]    [,648]    [,649]     [,650]     [,651] #> [1,] 0.254571 -0.4278574 -0.3081126 0.2626457 0.2840934 -0.6061386 -0.3259712 #>         [,652]      [,653]    [,654]     [,655]      [,656]    [,657] #> [1,] 0.5410002 -0.08645319 0.2685326 0.05445789 0.001596656 0.2409472 #>          [,658]   [,659]     [,660]    [,661]     [,662]   [,663]       [,664] #> [1,] -0.4479396 0.313505 0.09599714 0.3015721 -0.0808634 0.037936 -0.007607748 #>         [,665]     [,666]     [,667]      [,668]      [,669]    [,670] #> [1,] 0.4426827 -0.1000836 -0.2963152 -0.03548254 -0.01092758 -0.268141 #>          [,671]    [,672]     [,673]     [,674]    [,675]    [,676]     [,677] #> [1,] 0.06453142 0.2921103 0.09255205 0.03906012 0.1749944 0.1049689 -0.3922392 #>          [,678]     [,679]      [,680]     [,681]     [,682]     [,683] #> [1,] 0.03907347 -0.4836512 -0.06141343 0.03859472 0.05733054 -0.7056373 #>          [,684]     [,685]      [,686]     [,687]     [,688]     [,689] #> [1,] -0.1390504 -0.1091826 -0.02904945 -0.0586822 -0.3958302 -0.4453858 #>          [,690]      [,691]      [,692]    [,693]    [,694]    [,695] #> [1,] -0.2846847 -0.05957106 -0.03885841 0.4298938 0.0611592 0.2727397 #>           [,696]      [,697]    [,698]     [,699]     [,700]     [,701] #> [1,] -0.03264691 -0.02598148 -0.463906 -0.1875924 0.02582779 -0.2741388 #>           [,702]     [,703]    [,704]    [,705]     [,706]     [,707] #> [1,] 0.003221537 -0.6149553 0.2592785 -0.114674 -0.3112879 -0.5065117 #>          [,708]    [,709]     [,710]     [,711]     [,712]      [,713] #> [1,] -0.1393473 0.4884576 -0.5228635 -0.1273744 -0.3345081 -0.02645522 #>         [,714]     [,715]    [,716]     [,717]     [,718]     [,719]    [,720] #> [1,] 0.2452877 -0.1240116 0.2320101 -0.5380862 -0.4300705 -0.1299982 0.1248795 #>          [,721]     [,722]    [,723]     [,724]     [,725]    [,726]     [,727] #> [1,] -0.2153553 -0.2050527 0.1523321 -0.1444247 -0.6005286 0.1248419 -0.2368106 #>         [,728]     [,729]   [,730]     [,731]     [,732]     [,733]     [,734] #> [1,] 0.1264957 -0.3283614 0.126525 -0.5217564 -0.3315181 -0.3821153 -0.4422769 #>         [,735]     [,736]     [,737]     [,738]     [,739]    [,740]     [,741] #> [1,] 0.0105904 -0.3810403 -0.2980623 -0.3955262 -0.5647407 -0.167689 -0.1173015 #>         [,742]     [,743]    [,744]      [,745]    [,746]     [,747]     [,748] #> [1,] 0.1050558 -0.4748362 -0.271439 -0.09379646 0.1436301 -0.3431129 -0.4513996 #>        [,749]     [,750]     [,751]     [,752]    [,753]   [,754]     [,755] #> [1,] 0.120853 -0.2785821 -0.3566138 -0.3888781 0.1698377 0.363649 -0.2656309 #>          [,756]     [,757]    [,758]    [,759]     [,760]      [,761] #> [1,] -0.5606445 -0.4596031 0.1402198 0.2627394 -0.6568311 -0.07210895 #>          [,762]     [,763]   [,764]    [,765]      [,766]     [,767]    [,768] #> [1,] 0.08494293 -0.3156034 0.503678 0.3897491 0.003479393 -0.2231216 0.4930332 #>          [,769]     [,770]      [,771]      [,772]    [,773]     [,774] #> [1,] -0.1156994 -0.2783426 -0.05875673 -0.02984796 0.0720176 -0.2662033 #>          [,775]     [,776]     [,777]     [,778]     [,779]    [,780] #> [1,] 0.09248089 -0.2585821 -0.1797431 -0.4200754 -0.2359761 0.1653288 #>          [,781]     [,782]     [,783]    [,784]    [,785]    [,786]    [,787] #> [1,] -0.1200066 -0.1063439 0.00992677 0.1371759 0.1786004 0.2235042 0.0826611 #>      [,788]     [,789]     [,790]     [,791]      [,792]     [,793]    [,794] #> [1,] 0.2026 -0.2214931 0.04765822 -0.2701573 -0.09450643 -0.1739578 0.2680395 #>          [,795]       [,796]     [,797]     [,798]     [,799]     [,800] #> [1,] -0.2358832 -0.000360218 0.01290565 -0.5193443 0.02128429 -0.5156333 #>          [,801]     [,802]     [,803]      [,804]     [,805]     [,806] #> [1,] -0.1029506 -0.2592537 -0.3311151 0.005235558 -0.1425403 0.06205684 #>          [,807]     [,808]     [,809]    [,810]     [,811]       [,812] #> [1,] -0.4777021 -0.0885929 -0.1424157 0.1558537 -0.2028515 -0.009930059 #>        [,813]     [,814]    [,815]   [,816]      [,817]    [,818]     [,819] #> [1,] -0.31566 0.09768942 0.1994084 -0.57876 -0.09932397 0.2267563 0.02633766 #>          [,820]     [,821]    [,822]    [,823]     [,824]      [,825] #> [1,] 0.05590662 -0.4803149 -0.190451 0.1824854 -0.2911629 -0.07163645 #>          [,826]    [,827]     [,828]     [,829]     [,830]     [,831]    [,832] #> [1,] -0.1291905 0.2027223 -0.5631692 -0.3784318 -0.1940857 0.03659231 0.2161161 #>          [,833]    [,834]     [,835]    [,836]      [,837]      [,838] #> [1,] 0.01851548 0.2165419 0.01751204 -0.294665 -0.05178881 -0.05535633 #>          [,839]      [,840]     [,841]      [,842]      [,843]     [,844] #> [1,] -0.1826878 -0.03460256 -0.3463645 -0.07953516 -0.03003341 -0.1993324 #>          [,845]     [,846]    [,847]     [,848]     [,849]     [,850]   [,851] #> [1,] -0.1864547 -0.2083227 0.1860126 -0.3195379 -0.3477955 -0.1078396 -0.12543 #>          [,852]       [,853]    [,854]    [,855]    [,856]    [,857]    [,858] #> [1,] -0.3468127 -0.009439461 0.3766244 -0.223063 0.1170129 0.2395046 0.1978428 #>           [,859]     [,860]    [,861]    [,862]     [,863]      [,864] #> [1,] -0.08939192 -0.1426248 0.4925448 0.3377952 0.02990547 -0.09146724 #>          [,865]     [,866]     [,867]     [,868]     [,869]     [,870] #> [1,] 0.06141073 -0.2546843 -0.2466668 -0.1881698 -0.3190721 -0.0449439 #>           [,871]     [,872]    [,873]     [,874]     [,875]    [,876] #> [1,] -0.06335078 -0.2529198 0.2668462 -0.3972131 -0.1182915 0.1914461 #>          [,877]    [,878]    [,879]     [,880]     [,881]    [,882]      [,883] #> [1,] -0.5433719 0.1026743 -0.105274 -0.2687384 -0.1969461 0.0546344 -0.01309353 #>          [,884]    [,885]       [,886]      [,887]     [,888]     [,889] #> [1,] -0.2804392 -0.318382 -0.004926658 -0.09833425 0.05294239 -0.3683008 #>           [,890]    [,891]   [,892]     [,893]     [,894]    [,895]     [,896] #> [1,] -0.01384355 -0.816933 -0.20476 -0.4893052 -0.3206975 0.2203092 -0.3021173 #>         [,897]     [,898]   [,899]     [,900]      [,901]    [,902]      [,903] #> [1,] 0.1858873 -0.3735952 0.216157 0.09123833 -0.06491627 0.3466977 -0.04046137 #>           [,904]    [,905]        [,906]    [,907]    [,908]      [,909] #> [1,] -0.09444391 0.3333367 -0.0003034637 0.1647969 0.1935994 -0.06218358 #>          [,910]    [,911]     [,912]   [,913]     [,914]    [,915]    [,916] #> [1,] -0.5562261 0.3704474 -0.2549301 -0.14057 -0.2930621 0.2391672 0.3103669 #>          [,917]     [,918]     [,919]     [,920]      [,921]    [,922] #> [1,] -0.1242969 -0.2004274 -0.3298092 -0.2482526 -0.05944793 -0.284769 #>          [,923]     [,924]     [,925]     [,926]      [,927]     [,928] #> [1,] -0.1063062 0.01492112 0.03322459 -0.2193134 -0.01384355 -0.1193469 #>        [,929]     [,930]      [,931]     [,932]     [,933]     [,934] #> [1,] 0.258443 -0.1204176 -0.05114222 0.03101896 -0.1563813 -0.3191907 #>          [,935]     [,936]     [,937]     [,938]     [,939]     [,940] #> [1,] -0.3297476 -0.2736732 -0.5083928 -0.3834844 -0.3199916 -0.3078353 #>          [,941]    [,942]     [,943]     [,944]     [,945]     [,946] #> [1,] -0.2062286 0.0701877 -0.1838459 -0.2389242 -0.2052408 -0.3948592 #>           [,947]     [,948]     [,949]     [,950]     [,951]    [,952] #> [1,] -0.06673494 -0.1217342 -0.2832354 -0.3533454 -0.4151558 0.1822749 #>         [,953]     [,954]     [,955]     [,956]     [,957]    [,958]     [,959] #> [1,] 0.2323507 -0.4495321 -0.2549392 0.04301289 -0.3557352 0.2860543 -0.2505856 #>          [,960]     [,961]    [,962]      [,963]    [,964]     [,965] #> [1,] -0.4789629 -0.1671581 0.3386547 -0.07827653 -0.194432 -0.3082319 #>          [,966]    [,967]   [,968]     [,969]    [,970]    [,971]     [,972] #> [1,] -0.2155315 -0.416432 -0.36484 -0.2460611 0.2573478 0.2909196 -0.5137246 #>         [,973]     [,974]     [,975]     [,976]     [,977]    [,978]     [,979] #> [1,] 0.3798783 -0.5653336 -0.4115204 -0.2224651 -0.2340517 -0.586507 -0.3776039 #>          [,980]    [,981]    [,982]     [,983]     [,984]      [,985] #> [1,] -0.2287705 0.4620871 -0.329394 -0.1586614 -0.3266606 -0.01886708 #>          [,986]   [,987]      [,988]     [,989]       [,990]      [,991] #> [1,] -0.3067608 0.284159 -0.08381118 -0.3002116 -0.006712491 -0.05177388 #>          [,992]      [,993]     [,994]     [,995]     [,996]     [,997] #> [1,] -0.2511211 -0.03069241 -0.1030409 0.06338656 -0.4074188 -0.1973316 #>          [,998]    [,999]    [,1000]     [,1001]    [,1002]      [,1003] #> [1,] -0.5234511 0.3782009 -0.2445732 -0.06768609 -0.2830644 -0.005144948 #>         [,1004]    [,1005]    [,1006]    [,1007]     [,1008]     [,1009] #> [1,] -0.1836103 -0.1317463 -0.2393967 -0.1321762 -0.07402775 -0.02067302 #>          [,1010]    [,1011]    [,1012]     [,1013]    [,1014]    [,1015] #> [1,] 0.002135615 -0.2541991 -0.0948553 -0.04159188 -0.2663133 0.01085475 #>        [,1016]    [,1017]      [,1018]    [,1019]     [,1020]     [,1021] #> [1,] 0.2025259 -0.3673929 -0.007048384 -0.4042927 -0.08943667 -0.03751363 #>        [,1022]  [,1023]  [,1024]    [,1025]    [,1026]    [,1027]    [,1028] #> [1,] -0.428525 0.194096 0.537752 0.05171368 0.02198198 -0.5599492 0.01191854 #>        [,1029]     [,1030]     [,1031]   [,1032]    [,1033]    [,1034] #> [1,] 0.1544413 -0.06159442 -0.06816296 0.4315456 -0.5025121 0.08409521 #>        [,1035]    [,1036]     [,1037]     [,1038]     [,1039]     [,1040] #> [1,] -0.012435 -0.2205847 -0.06875667 -0.02803175 -0.03131824 -0.06091762 #>         [,1041]  [,1042]    [,1043]   [,1044]    [,1045]    [,1046]   [,1047] #> [1,] -0.5041127 -0.13506 -0.4216912 0.1007789 -0.3369744 -0.2387254 0.3870983 #>          [,1048]     [,1049]   [,1050]   [,1051]    [,1052]    [,1053] #> [1,] 0.006303314 -0.05487209 0.3676431 0.2518642 -0.2265889 0.02794003 #>         [,1054]     [,1055]     [,1056]    [,1057]    [,1058]    [,1059] #> [1,] -0.2494569 -0.03099677 -0.06845117 -0.2564527 -0.6322498 -0.2323445 #>         [,1060]   [,1061]  [,1062]   [,1063]   [,1064]    [,1065]    [,1066] #> [1,] -0.4418852 0.1925085 0.132433 0.1989617 -0.462825 -0.3217199 -0.1620995 #>        [,1067]    [,1068]   [,1069]   [,1070]   [,1071]    [,1072]   [,1073] #> [1,] 0.4494124 0.08830877 0.1071193 0.2467675 0.1249866 -0.3675636 -0.329033 #>         [,1074]    [,1075]     [,1076]   [,1077]    [,1078]    [,1079] #> [1,] -0.4555063 0.04949756 -0.07879233 0.2343511 -0.1073139 0.04218398 #>         [,1080]    [,1081]     [,1082]   [,1083]    [,1084]    [,1085] #> [1,] -0.2786279 -0.1141671 -0.05141468 0.4119067 -0.5060092 -0.1121509 #>          [,1086]   [,1087]    [,1088]   [,1089]    [,1090]    [,1091] #> [1,] -0.03683572 0.1223926 -0.1820285 0.1742303 -0.1490783 -0.0694409 #>          [,1092]    [,1093]     [,1094]     [,1095]    [,1096]    [,1097] #> [1,] -0.09419142 -0.1700893 -0.08010653 -0.07276684 -0.2612565 0.01501872 #>        [,1098]    [,1099]   [,1100]     [,1101]    [,1102]    [,1103] #> [1,] -0.380325 -0.0518395 -0.245031 -0.03549658 0.01765962 0.05583912 #>         [,1104]   [,1105]     [,1106]     [,1107]   [,1108]    [,1109] #> [1,] 0.09394002 0.2448219 -0.03997271 -0.02327107 -0.055208 -0.5310471 #>        [,1110]   [,1111]    [,1112]   [,1113]    [,1114]   [,1115]   [,1116] #> [1,] 0.1419092 0.1217695 -0.1478267 0.2844339 0.01574441 0.1791065 -0.554693 #>         [,1117]    [,1118]   [,1119]     [,1120]    [,1121]    [,1122] #> [1,] 0.06187125 -0.3674476 0.2454436 -0.01307841 -0.3197801 -0.4943754 #>        [,1123]   [,1124]    [,1125]      [,1126]    [,1127]   [,1128] #> [1,] 0.0241864 0.1807285 -0.3948834 -0.004347381 -0.2459622 0.7754348 #>         [,1129]   [,1130]   [,1131]    [,1132]    [,1133]    [,1134]    [,1135] #> [1,] -0.3102741 0.1334098 0.1507206 -0.7078417 -0.1317785 -0.1222899 -0.6890196 #>        [,1136]   [,1137]     [,1138]    [,1139]    [,1140]     [,1141] #> [1,] -0.160113 0.1830186 -0.08209517 0.05673235 -0.2706445 -0.09240808 #>         [,1142]    [,1143]   [,1144]    [,1145]     [,1146]     [,1147] #> [1,] -0.1901262 -0.2589237 0.1313658 -0.4620777 -0.04149677 -0.04212648 #>        [,1148]    [,1149]    [,1150]     [,1151]    [,1152]    [,1153] #> [1,] 0.4839323 -0.2611813 -0.2382319 0.006609617 -0.2439409 -0.2570793 #>         [,1154]   [,1155]   [,1156]    [,1157]   [,1158]     [,1159]    [,1160] #> [1,] -0.5356185 0.1721086 0.2409282 0.05373914 0.1816048 0.003049227 -0.3124326 #>         [,1161]    [,1162]   [,1163]    [,1164]  [,1165]     [,1166]   [,1167] #> [1,] -0.4655254 -0.5441072 0.2944825 -0.3969827 -0.13935 -0.09011769 -0.620483 #>      [,1168]   [,1169]   [,1170]   [,1171]    [,1172]    [,1173]   [,1174] #> [1,] 0.18929 -0.267461 0.1192162 0.3487757 -0.1097123 -0.2495165 -0.442449 #>        [,1175]     [,1176]     [,1177]   [,1178]     [,1179]   [,1180] #> [1,] 0.1208388 -0.07596177 -0.06452563 0.1193601 -0.08801641 0.2958341 #>          [,1181]   [,1182]    [,1183]     [,1184]    [,1185]    [,1186] #> [1,] 0.008167418 0.1470869 0.09106239 -0.05218543 0.02577704 0.02498688 #>         [,1187]    [,1188]    [,1189]     [,1190]   [,1191]   [,1192] #> [1,] -0.1339604 -0.4999511 -0.1857425 -0.01296622 0.1475382 0.1057743 #>          [,1193]    [,1194]    [,1195]    [,1196]    [,1197]     [,1198] #> [1,] -0.03804042 -0.1941541 -0.1759209 -0.2598326 0.05223325 -0.04591938 #>        [,1199]   [,1200]    [,1201]    [,1202]    [,1203]    [,1204] #> [1,] 0.3637176 0.4188481 -0.2100391 0.02929582 -0.2155944 -0.6228547 #>          [,1205]     [,1206]    [,1207]   [,1208]    [,1209]    [,1210] #> [1,] -0.04134467 -0.05297394 -0.2746641 0.3551032 -0.4587731 -0.3060967 #>          [,1211]     [,1212]    [,1213]    [,1214]   [,1215]    [,1216] #> [1,] -0.03492345 -0.01781652 -0.1200291 -0.3541347 0.1614002 -0.1772863 #>        [,1217]    [,1218]   [,1219]   [,1220]   [,1221]     [,1222]    [,1223] #> [1,] 0.1067352 -0.1337463 -0.129894 0.3159747 0.1451579 -0.01277906 -0.4139036 #>         [,1224]    [,1225]    [,1226]    [,1227]     [,1228]     [,1229] #> [1,] -0.6049228 -0.1255614 -0.2757644 -0.6435468 -0.05875849 -0.07751833 #>         [,1230]   [,1231]     [,1232]   [,1233]    [,1234]   [,1235]   [,1236] #> [1,] -0.2761421 0.1189812 -0.03011046 0.2410627 -0.3080765 0.3002039 0.1962562 #>       [,1237]    [,1238]    [,1239]    [,1240]    [,1241]    [,1242]   [,1243] #> [1,] -0.16258 -0.2796955 -0.3159044 0.07799633 0.02529514 0.05679177 0.4448351 #>         [,1244]   [,1245]   [,1246]    [,1247]    [,1248]   [,1249]    [,1250] #> [1,] -0.1973528 0.2532123 0.1186719 0.04417418 -0.1131965 -0.220491 -0.2885172 #>       [,1251]    [,1252]    [,1253]   [,1254]    [,1255]    [,1256]    [,1257] #> [1,] 0.133419 -0.3131312 -0.4955907 0.4417214 -0.1061996 0.09422555 -0.1172905 #>         [,1258]    [,1259]    [,1260]    [,1261]    [,1262]   [,1263]  [,1264] #> [1,] -0.5508751 -0.4111799 -0.1921207 -0.2086289 0.06572594 -0.233376 0.280341 #>          [,1265]   [,1266]     [,1267]   [,1268] [,1269]    [,1270]   [,1271] #> [1,] -0.01787973 0.1476471 -0.09195966 0.2684063 0.22675 -0.3394167 0.1236726 #>        [,1272]    [,1273]    [,1274]     [,1275]    [,1276]    [,1277] #> [1,] 0.1615841 -0.6084574 -0.2642179 -0.09612828 -0.1130045 -0.5379045 #>         [,1278]    [,1279]    [,1280]    [,1281]    [,1282]    [,1283] #> [1,] -0.2905334 -0.1182662 -0.4864372 -0.1857627 -0.7675321 -0.1790646 #>        [,1284]    [,1285]   [,1286]    [,1287]    [,1288]    [,1289]    [,1290] #> [1,] -0.555574 0.07974468 0.2413512 0.08112637 -0.2462209 -0.1344845 -0.4804319 #>         [,1291]  [,1292]   [,1293]     [,1294]    [,1295]    [,1296]   [,1297] #> [1,] -0.3017831 0.252114 0.2191135 -0.07198872 -0.5523876 0.09397099 0.1667156 #>      [,1298]   [,1299]    [,1300]    [,1301]    [,1302]    [,1303]   [,1304] #> [1,] 0.13843 0.3795612 -0.3118105 -0.1194214 -0.3774934 0.07334228 0.2197984 #>          [,1305]   [,1306]     [,1307]    [,1308]  [,1309]    [,1310] #> [1,] -0.08680994 -0.606721 -0.01914615 -0.4329256 0.565186 -0.2018069 #>         [,1311]    [,1312]    [,1313]    [,1314]   [,1315]    [,1316]   [,1317] #> [1,] -0.1111851 -0.3534893 -0.2661367 0.02893531 0.1052412 -0.6100491 -0.601099 #>       [,1318]    [,1319]  [,1320]    [,1321]    [,1322]    [,1323]   [,1324] #> [1,] 0.497756 0.06844534 0.330994 -0.2738549 -0.1068526 -0.2561689 0.2503494 #>          [,1325]   [,1326]     [,1327]    [,1328]    [,1329]     [,1330] #> [1,] -0.09074257 0.2895744 -0.09176815 -0.1564811 -0.2124238 -0.09930437 #>        [,1331]    [,1332]    [,1333]   [,1334]    [,1335]   [,1336]   [,1337] #> [1,] 0.1415774 -0.1731131 0.02693831 0.2251879 0.01818599 0.3873059 0.4306876 #>         [,1338]   [,1339]    [,1340]   [,1341]     [,1342]    [,1343] #> [1,] -0.5249346 0.3354252 -0.1052073 0.3392237 -0.08298405 0.01695875 #>          [,1344]    [,1345]    [,1346]     [,1347]    [,1348]    [,1349] #> [1,] -0.07842014 -0.9335428 -0.7467718 0.009767979 -0.1703612 0.01173588 #>        [,1350]    [,1351]    [,1352]     [,1353]   [,1354]   [,1355]    [,1356] #> [1,] 0.1593415 0.02618679 -0.1876014 -0.04607496 0.4502777 0.3649407 -0.1884489 #>        [,1357]   [,1358]   [,1359]    [,1360]    [,1361]   [,1362]   [,1363] #> [1,] 0.2205986 0.4987864 0.3687801 -0.3853494 -0.2017922 0.1829998 -0.170947 #>        [,1364]    [,1365]   [,1366]   [,1367]    [,1368]    [,1369]    [,1370] #> [1,] 0.3655941 0.00422568 0.0666122 0.4893683 -0.1421753 -0.2170394 -0.2911899 #>          [,1371]   [,1372]    [,1373]     [,1374]    [,1375]   [,1376] #> [1,] -0.08589441 0.0144985 -0.4603214 -0.09799466 -0.2138246 0.1274837 #>         [,1377]    [,1378]     [,1379]   [,1380]   [,1381]    [,1382] #> [1,] -0.1673875 0.09175983 -0.08238893 0.5223037 0.3299693 -0.4222077 #>         [,1383]   [,1384]    [,1385]    [,1386]    [,1387]    [,1388] #> [1,] 0.04488779 0.1120419 -0.2408644 -0.1068518 -0.3474426 -0.4381344 #>         [,1389]    [,1390]    [,1391]    [,1392]    [,1393]    [,1394] #> [1,] -0.2927195 -0.5678462 -0.2373996 -0.1203265 0.04295085 -0.5854794 #>        [,1395]    [,1396]   [,1397]   [,1398]    [,1399]    [,1400]    [,1401] #> [1,] -0.117682 -0.3926747 -0.239006 -0.273643 -0.1037903 -0.8677075 -0.2199965 #>         [,1402]    [,1403]    [,1404]    [,1405]    [,1406]    [,1407] #> [1,] -0.1768933 0.04825386 0.03105905 -0.3374059 -0.2661877 -0.4375153 #>          [,1408]    [,1409]    [,1410]   [,1411]   [,1412]    [,1413] #> [1,] -0.04215258 0.04345176 -0.4286953 0.3260634 0.1086631 -0.1525219 #>          [,1414]   [,1415]     [,1416]    [,1417]    [,1418]    [,1419] #> [1,] -0.05212759 0.2039257 -0.03375399 -0.3329503 -0.2736153 -0.2922409 #>        [,1420]    [,1421]    [,1422]     [,1423]    [,1424]   [,1425] #> [1,] 0.1201057 -0.1995806 0.09544617 -0.04266466 -0.1250584 0.0366995 #>          [,1426]     [,1427]     [,1428]    [,1429]  [,1430]    [,1431] #> [1,] -0.02223081 -0.05355533 -0.02091787 -0.2424583 -0.63624 -0.8202956 #>        [,1432]   [,1433]    [,1434]    [,1435]    [,1436]  [,1437]    [,1438] #> [1,] 0.1591564 0.2529035 -0.2458787 -0.1056808 -0.3237657 0.443281 -0.1063104 #>          [,1439]  [,1440]      [,1441]   [,1442]  [,1443]     [,1444] #> [1,] -0.04147448 -0.17382 -0.009913989 0.0383253 0.176902 -0.03279453 #>         [,1445]    [,1446]    [,1447]   [,1448]   [,1449]    [,1450] #> [1,] 0.05449167 -0.1143639 -0.3724648 0.4111159 0.1182633 -0.1425346 #>           [,1451]   [,1452]    [,1453]     [,1454]    [,1455]    [,1456] #> [1,] -0.008104444 0.1206615 -0.1321438 -0.07458732 -0.4005492 -0.2384967 #>        [,1457]   [,1458]    [,1459]    [,1460]    [,1461]    [,1462]   [,1463] #> [1,] 0.2251671 0.6233571 -0.0391049 -0.1599626 -0.5268687 -0.4438335 0.1146581 #>         [,1464]     [,1465]    [,1466]   [,1467]    [,1468]   [,1469]   [,1470] #> [1,] -0.4424346 -0.04730901 -0.1073083 -0.026075 -0.4089322 -0.146348 0.3244945 #>        [,1471]    [,1472]     [,1473]      [,1474]    [,1475]    [,1476] #> [1,] 0.2859927 -0.6044366 -0.01121278 -0.002343049 -0.6393073 0.02841687 #>         [,1477]     [,1478]    [,1479]     [,1480]      [,1481]  [,1482] #> [1,] -0.2520105 -0.06181965 -0.6413419 -0.02862102 -0.002540172 0.144392 #>         [,1483]    [,1484]    [,1485]    [,1486]    [,1487]    [,1488] #> [1,] -0.3469904 -0.1705445 -0.3468027 -0.4961154 -0.2801094 0.03807615 #>         [,1489]    [,1490]    [,1491]     [,1492]   [,1493]    [,1494] #> [1,] 0.03064216 -0.4296421 0.06263446 -0.01765672 0.2539357 -0.1514676 #>        [,1495]     [,1496]   [,1497]     [,1498]     [,1499]    [,1500] #> [1,] 0.3340954 -0.02382624 -0.468833 -0.00227388 -0.07983439 -0.1371597 #>         [,1501]     [,1502]    [,1503]  [,1504]    [,1505]  [,1506]     [,1507] #> [1,] 0.09574873 -0.00597588 -0.1213528 0.222588 -0.3365645 0.238234 -0.07836118 #>          [,1508]     [,1509]    [,1510]     [,1511]    [,1512]    [,1513] #> [1,] -0.01487117 -0.03866451 -0.2140993 -0.00141277 0.04503423 -0.2171518 #>          [,1514]      [,1515]      [,1516]   [,1517]    [,1518]    [,1519] #> [1,] 0.003734846 -0.001837928 -0.007413794 0.4240929 0.04364188 -0.6065651 #>         [,1520]    [,1521]    [,1522]    [,1523]    [,1524]   [,1525]   [,1526] #> [1,] -0.2853581 -0.2171506 -0.2409086 0.01590403 -0.1756461 0.2023425 0.1162377 #>          [,1527]    [,1528]    [,1529]    [,1530]   [,1531]    [,1532] #> [1,] -0.02973719 -0.2407053 -0.4052655 -0.4230994 0.1858789 -0.2790288 #>         [,1533]    [,1534]   [,1535]   [,1536]    [,1537]   [,1538]   [,1539] #> [1,] -0.5761845 -0.5464863 0.1002705 -0.226333 -0.4345705 -0.469542 0.1245389 #>          [,1540]   [,1541]    [,1542]   [,1543]    [,1544]    [,1545] #> [1,] -0.05930429 0.1074715 -0.3816217 0.2381344 -0.1232986 -0.3599482 #>         [,1546]    [,1547]    [,1548]    [,1549]    [,1550]   [,1551] #> [1,] -0.2541175 -0.2871667 -0.1533743 -0.4550426 -0.2965127 0.1936477 #>         [,1552]    [,1553]    [,1554]    [,1555]   [,1556]    [,1557] #> [1,] -0.4119754 -0.1306608 -0.1669536 0.06607218 0.4607822 -0.6398287 #>         [,1558]    [,1559]    [,1560]     [,1561]     [,1562]    [,1563] #> [1,] -0.3300387 -0.4588158 -0.2379979 -0.04881785 -0.06974159 0.07679446 #>           [,1564]    [,1565]   [,1566]   [,1567]    [,1568]    [,1569] #> [1,] -0.001811013 0.03361632 -0.526232 0.2075725 -0.2154211 0.08071263 #>         [,1570]   [,1571]   [,1572]    [,1573]      [,1574]     [,1575] #> [1,] -0.2997814 0.0444749 0.2713497 0.09984221 -0.008287142 -0.00898166 #>        [,1576]    [,1577]    [,1578]    [,1579]     [,1580]    [,1581] #> [1,] 0.4306193 0.03216015 -0.3467362 -0.3983869 -0.09490909 -0.3307317 #>        [,1582]   [,1583]   [,1584]     [,1585]    [,1586]   [,1587]    [,1588] #> [1,] 0.2513844 0.2711909 -0.419821 -0.04888339 -0.4080672 0.2249371 -0.5142269 #>         [,1589]      [,1590]    [,1591]   [,1592]    [,1593]    [,1594] #> [1,] -0.1949677 -0.004320235 -0.0868804 -0.344265 -0.1353119 -0.1080435 #>         [,1595]  [,1596]    [,1597]    [,1598]    [,1599]   [,1600]    [,1601] #> [1,] -0.1896629 0.151091 -0.1464122 -0.6620803 -0.1563662 0.1946629 -0.3692412 #>         [,1602]    [,1603]    [,1604]    [,1605]   [,1606] [,1607]    [,1608] #> [1,] 0.01461113 -0.1346477 -0.2352966 -0.1665821 0.1744612 -0.1888 0.05157882 #>         [,1609]    [,1610]    [,1611]    [,1612]    [,1613]    [,1614] #> [1,] -0.3475456 -0.1863188 -0.3806551 -0.4692396 -0.2768657 -0.2232384 #>         [,1615]    [,1616]    [,1617]    [,1618]   [,1619]   [,1620]    [,1621] #> [1,] -0.3736441 0.02780107 -0.1618293 0.06916124 0.5075384 0.2158325 -0.3801333 #>         [,1622]    [,1623]   [,1624]    [,1625]    [,1626]   [,1627]   [,1628] #> [1,] -0.0602243 -0.1445616 0.2136879 -0.3733172 -0.1852038 0.2054213 0.3190678 #>        [,1629]   [,1630]   [,1631]    [,1632]    [,1633]    [,1634]   [,1635] #> [1,] 0.2420965 0.2294213 0.1350823 -0.2473487 -0.2838932 -0.4093739 0.3103015 #>          [,1636]   [,1637]    [,1638]    [,1639]    [,1640]   [,1641] #> [1,] -0.09849446 -0.208377 -0.4808117 -0.5170619 -0.2653081 0.2391778 #>         [,1642]     [,1643]   [,1644]     [,1645]    [,1646]    [,1647] #> [1,] -0.1791209 -0.04689444 0.2352678 -0.04509954 0.05761304 -0.1858782 #>         [,1648]    [,1649]    [,1650]    [,1651]     [,1652]      [,1653] #> [1,] -0.5670138 0.07397288 -0.2528053 -0.1569336 -0.03276609 -0.007839208 #>         [,1654]    [,1655]  [,1656]     [,1657]    [,1658]    [,1659]   [,1660] #> [1,] -0.2349552 -0.2597225 0.223468 -0.08278119 -0.1475507 -0.2642494 0.2359843 #>          [,1661]     [,1662]    [,1663]    [,1664]     [,1665]    [,1666] #> [1,] -0.09081449 -0.03935397 -0.2297049 -0.3324966 -0.04944801 -0.3715209 #>         [,1667]    [,1668]   [,1669]   [,1670]   [,1671]    [,1672]   [,1673] #> [1,] -0.3381214 -0.2540362 0.2665039 0.1331454 -0.183555 -0.4046088 0.3208206 #>         [,1674]   [,1675]    [,1676]    [,1677]  [,1678]     [,1679] #> [1,] -0.2266276 -0.443205 -0.2659301 -0.5782042 0.146442 -0.02550761 #>          [,1680]    [,1681]   [,1682]    [,1683]  [,1684]   [,1685]    [,1686] #> [1,] -0.04024843 -0.1512236 0.1620185 0.06089278 -0.31389 0.6278136 -0.1549094 #>         [,1687]    [,1688]    [,1689]    [,1690]    [,1691]   [,1692] #> [1,] -0.1732689 -0.2624318 -0.1953404 -0.1171132 -0.4064433 0.4025754 #>          [,1693]    [,1694]     [,1695]    [,1696]   [,1697]   [,1698] #> [1,] -0.05620641 -0.3688355 -0.04207422 -0.4154244 0.3111142 -0.129352 #>          [,1699]    [,1700]    [,1701]    [,1702]    [,1703]   [,1704] #> [1,] -0.07159943 -0.3167388 -0.1273003 -0.1494369 -0.5202778 0.3173855 #>          [,1705]      [,1706]    [,1707]    [,1708]    [,1709]    [,1710] #> [1,] 0.008670056 -0.001854725 0.07223931 -0.2170706 -0.2200007 -0.4094176 #>         [,1711]    [,1712]   [,1713]    [,1714]   [,1715]   [,1716]    [,1717] #> [1,] -0.2756714 0.00243248 0.1396398 -0.4151381 0.1562568 0.3172139 -0.6672762 #>         [,1718]    [,1719]    [,1720]     [,1721]   [,1722]    [,1723] #> [1,] 0.07114295 0.05771833 -0.1027553 -0.00657947 0.1492693 -0.2269933 #>        [,1724]    [,1725]    [,1726]    [,1727]   [,1728]    [,1729]   [,1730] #> [1,] 0.2504833 -0.1042784 -0.1520529 0.06882384 0.3140304 -0.1014511 0.1291467 #>         [,1731]    [,1732] [,1733]   [,1734]    [,1735]    [,1736]    [,1737] #> [1,] -0.1353251 -0.2592105 0.37665 0.3424711 -0.8352403 -0.2648439 -0.7397619 #>        [,1738]   [,1739]    [,1740]    [,1741]   [,1742]      [,1743]   [,1744] #> [1,] -0.151365 0.2245934 -0.5224031 -0.1327126 0.1117198 -0.002239142 -0.755734 #>        [,1745]   [,1746]    [,1747]    [,1748]    [,1749]     [,1750] #> [1,] -0.456718 0.2298321 -0.4839442 -0.0724393 -0.5172269 -0.02224556 #>         [,1751]   [,1752]   [,1753]    [,1754]    [,1755]    [,1756]    [,1757] #> [1,] -0.6856318 0.1425371 0.1589208 -0.5228451 -0.4136033 -0.1395925 -0.1630017 #>         [,1758]    [,1759]   [,1760]   [,1761]    [,1762]     [,1763] #> [1,] -0.3125407 0.02547131 0.3416683 0.3497817 0.04326354 -0.04798276 #>         [,1764]   [,1765]   [,1766]    [,1767]    [,1768]  [,1769]    [,1770] #> [1,] -0.1646419 0.3992582 0.5561965 -0.2671677 -0.6423063 -0.18376 -0.3278088 #>         [,1771]     [,1772]    [,1773]    [,1774]     [,1775]     [,1776] #> [1,] -0.3176298 -0.04086644 -0.1076701 -0.1495624 -0.04653105 -0.06378498 #>        [,1777]    [,1778]   [,1779]    [,1780]  [,1781]    [,1782]   [,1783] #> [1,] 0.1836798 -0.2338672 0.4003554 0.02714662 -0.16836 -0.5254944 0.1151389 #>         [,1784]   [,1785]    [,1786]    [,1787]   [,1788]     [,1789]   [,1790] #> [1,] 0.07446412 0.2511789 -0.0507661 -0.0545903 0.4565724 -0.01559759 0.4206077 #>        [,1791]     [,1792]    [,1793]   [,1794]   [,1795]     [,1796]   [,1797] #> [1,] 0.1730913 -0.03912329 -0.4781271 0.5367836 -0.180365 -0.03519586 0.4838387 #>          [,1798]   [,1799]    [,1800]   [,1801]    [,1802]    [,1803]   [,1804] #> [1,] -0.04544332 0.3127981 -0.1080971 0.2020843 0.08259725 -0.1350477 0.1719274 #>        [,1805]   [,1806]   [,1807]    [,1808]   [,1809]    [,1810]  [,1811] #> [1,] 0.2960673 0.1838102 0.1107018 -0.3073777 0.2423422 -0.3415222 0.154201 #>         [,1812]    [,1813]     [,1814]    [,1815]     [,1816]    [,1817] #> [1,] -0.2767369 -0.0432514 -0.01151054 -0.1026899 -0.08315214 -0.3245204 #>        [,1818]   [,1819]    [,1820]    [,1821]    [,1822]     [,1823]   [,1824] #> [1,] 0.7104256 0.1199472 -0.1786852 -0.4243324 -0.1889041 -0.08825392 0.3034299 #>        [,1825]    [,1826]     [,1827]    [,1828]   [,1829]   [,1830]   [,1831] #> [1,] 0.1784025 0.06817356 -0.06508751 -0.2498775 0.3245377 0.2948653 0.0639877 #>         [,1832]    [,1833]     [,1834]     [,1835]    [,1836]    [,1837] #> [1,] 0.03648186 -0.2089414 -0.09096214 0.009386708 -0.8755092 -0.4101425 #>          [,1838]  [,1839]    [,1840]  [,1841]   [,1842]    [,1843]    [,1844] #> [1,] -0.06883834 -0.11997 -0.3234139 0.263097 -0.269402 0.06635623 -0.3008321 #>         [,1845]    [,1846]    [,1847]    [,1848]     [,1849]   [,1850] #> [1,] -0.3174056 0.01972078 -0.1361468 -0.4857729 -0.08941591 0.2941019 #>         [,1851]    [,1852]   [,1853]    [,1854]     [,1855]    [,1856] #> [1,] 0.06058971 -0.3456744 0.1896407 0.05772884 -0.09257257 -0.0149161 #>         [,1857]     [,1858]    [,1859]    [,1860]   [,1861]    [,1862] #> [1,] 0.05420783 -0.02136234 -0.3106426 -0.1566455 0.1124325 -0.4363386 #>         [,1863]    [,1864]     [,1865]   [,1866]    [,1867]    [,1868] #> [1,] -0.5487209 -0.2775796 -0.03398508 0.2261773 -0.2366255 -0.5218613 #>        [,1869]    [,1870]   [,1871]    [,1872]    [,1873]    [,1874] #> [1,] -0.115262 -0.1071983 0.1193937 -0.0839269 -0.2454943 -0.1303847 #>           [,1875]    [,1876]    [,1877]     [,1878]   [,1879]    [,1880] #> [1,] -0.004941195 -0.2275766 -0.5008228 -0.03370829 0.4430978 0.02838587 #>         [,1881]    [,1882]    [,1883]     [,1884]   [,1885]    [,1886] #> [1,] -0.4214653 -0.2754392 -0.5242577 -0.04756349 0.2095338 0.08988867 #>        [,1887]    [,1888]     [,1889]   [,1890]    [,1891]    [,1892]   [,1893] #> [1,] 0.1320827 -0.3486181 -0.05114802 0.2812049 -0.5135709 -0.1565727 0.3129428 #>         [,1894]   [,1895]    [,1896]   [,1897]     [,1898]    [,1899] #> [1,] -0.5599624 0.2186545 -0.2697268 0.1994771 -0.01359246 0.01022907 #>         [,1900]     [,1901]     [,1902]    [,1903]    [,1904]    [,1905] #> [1,] -0.1643174 -0.01898189 -0.05883088 -0.1885965 -0.5609004 0.02005968 #>        [,1906]    [,1907]   [,1908]   [,1909]  [,1910]    [,1911]    [,1912] #> [1,] 0.1314949 0.02929733 0.1176139 0.3029043 0.350465 -0.1210933 -0.1518937 #>         [,1913]    [,1914]   [,1915]    [,1916]    [,1917]    [,1918] #> [1,] -0.4595199 -0.1135174 0.2425413 -0.3387629 -0.0178221 0.04306722 #>         [,1919]    [,1920]    [,1921]   [,1922]   [,1923]   [,1924]    [,1925] #> [1,] -0.1153626 -0.1590155 -0.4317647 0.1326606 0.2100725 0.0100473 -0.1821668 #>         [,1926]    [,1927]    [,1928]    [,1929]     [,1930]    [,1931] #> [1,] -0.1440068 -0.3134643 -0.2044069 -0.1711417 -0.09596508 0.04571089 #>         [,1932]    [,1933]   [,1934]   [,1935]    [,1936]     [,1937]   [,1938] #> [1,] -0.1160274 -0.1987488 -0.497762 0.3461413 -0.5349675 0.001510329 0.1437931 #>         [,1939]    [,1940]   [,1941]     [,1942]    [,1943]  [,1944]    [,1945] #> [1,] -0.1017908 0.04625749 0.3333467 -0.01082019 -0.4910595 0.360734 -0.2538705 #>         [,1946]    [,1947]   [,1948]    [,1949]   [,1950]   [,1951]   [,1952] #> [1,] -0.4837715 -0.4126663 -0.309993 -0.4133715 -0.117525 0.0293571 0.1631918 #>        [,1953]    [,1954]    [,1955]     [,1956]   [,1957]    [,1958] #> [1,] 0.0217026 -0.6828381 -0.3504601 -0.09557241 -0.571983 -0.1634055 #>          [,1959]    [,1960]     [,1961]   [,1962]   [,1963]    [,1964] #> [1,] -0.03007782 -0.1045227 -0.07501515 -0.115989 0.2745841 0.04441399 #>        [,1965]    [,1966]   [,1967]     [,1968]   [,1969]    [,1970]    [,1971] #> [1,] 0.1005526 -0.3408627 0.3817646 -0.02802839 0.1852893 -0.2514227 -0.3723831 #>          [,1972]    [,1973]    [,1974]    [,1975]    [,1976]   [,1977] #> [1,] -0.02919245 -0.4602853 -0.3261178 0.08882516 0.01108956 -0.141746 #>         [,1978]  [,1979]    [,1980]    [,1981]    [,1982]    [,1983]    [,1984] #> [1,] -0.1646286 0.191901 -0.7154758 0.04543721 -0.5301113 -0.2524561 -0.4030149 #>        [,1985]    [,1986]    [,1987]    [,1988]    [,1989]    [,1990] #> [1,] 0.1844283 0.02878581 -0.7745652 -0.3885425 -0.1384582 -0.1645988 #>         [,1991]  [,1992]    [,1993]   [,1994]   [,1995]    [,1996]    [,1997] #> [1,] -0.1038631 -0.11164 -0.4296882 0.4666086 0.1323992 -0.3537419 -0.2648388 #>        [,1998]    [,1999]    [,2000]    [,2001]    [,2002]    [,2003] #> [1,] 0.1103193 -0.1686799 -0.6882291 -0.1051709 -0.2961204 -0.1242407 #>         [,2004]    [,2005]     [,2006]    [,2007]   [,2008]    [,2009] #> [1,] -0.5665282 -0.2063924 -0.01472636 -0.1750409 0.2857709 -0.3779533 #>         [,2010]   [,2011]     [,2012]     [,2013]    [,2014]   [,2015] #> [1,] -0.1647227 0.3608618 -0.02311794 -0.02770725 -0.6237955 0.3465769 #>         [,2016]    [,2017]   [,2018]    [,2019]    [,2020]    [,2021]   [,2022] #> [1,] -0.1875435 -0.0118974 0.2177058 -0.1272907 -0.4075701 -0.1731066 -0.120793 #>        [,2023]    [,2024]  [,2025]    [,2026]   [,2027]   [,2028]   [,2029] #> [1,] 0.3553124 0.07115258 0.450594 -0.7163918 -0.351134 0.2695056 0.2321598 #>       [,2030]    [,2031]    [,2032]   [,2033]    [,2034]    [,2035]    [,2036] #> [1,] 0.154746 0.09645848 -0.3609781 0.5207958 -0.0480537 -0.2204743 -0.2926276 #>          [,2037]    [,2038]   [,2039]    [,2040]    [,2041]    [,2042] #> [1,] -0.07669062 -0.2777508 0.7110134 -0.0739109 0.05532977 0.02139817 #>         [,2043]    [,2044]   [,2045]    [,2046]    [,2047]    [,2048] #> [1,] -0.2102955 -0.2244634 0.2372022 -0.3082635 -0.3095241 0.06146308 #>         [,2049]    [,2050]  [,2051]   [,2052]   [,2053]    [,2054]    [,2055] #> [1,] -0.1742141 0.06617843 -0.38098 0.5313444 0.1307655 -0.1358256 -0.5768945 #>         [,2056]    [,2057]    [,2058]    [,2059]  [,2060]   [,2061]    [,2062] #> [1,] -0.4153803 -0.2932198 -0.1532256 -0.2780833 0.239316 0.5832267 -0.3861909 #>         [,2063]   [,2064]    [,2065]    [,2066]      [,2067]    [,2068] #> [1,] -0.1909476 0.1475197 -0.5268777 -0.4538742 -0.005059236 -0.1446604 #>       [,2069]   [,2070]    [,2071]   [,2072]   [,2073]    [,2074]    [,2075] #> [1,] 0.175956 0.2826127 -0.7573228 0.5042009 0.1111159 -0.0778774 -0.3181887 #>        [,2076]   [,2077]    [,2078]    [,2079]    [,2080]     [,2081]   [,2082] #> [1,] 0.1416142 -0.521904 -0.3231154 -0.4144599 -0.3136331 -0.08107241 0.3115024 #>         [,2083]    [,2084]     [,2085]  [,2086]    [,2087]    [,2088] #> [1,] -0.2254718 -0.1051072 -0.05276358 0.472875 -0.5040521 -0.4069604 #>         [,2089]    [,2090]    [,2091]    [,2092]   [,2093]    [,2094] #> [1,] 0.04407465 -0.3115971 -0.5088708 0.03468069 0.1415059 -0.2702003 #>            [,2095]    [,2096]    [,2097]    [,2098]    [,2099]     [,2100] #> [1,] -0.0002691226 -0.2335964 -0.5529304 -0.4557432 0.02387093 -0.06375948 #>        [,2101]    [,2102]    [,2103]     [,2104]   [,2105]    [,2106] #> [1,] -0.631964 -0.1761532 -0.2534986 -0.09655671 0.0187553 -0.5471633 #>         [,2107]    [,2108]     [,2109]    [,2110]    [,2111]    [,2112] #> [1,] -0.4669288 -0.4073235 -0.04724113 -0.3264156 0.06968174 -0.2225886 #>       [,2113]   [,2114]   [,2115]   [,2116]    [,2117]    [,2118]   [,2119] #> [1,] -0.16754 0.4721801 0.4118298 0.2874396 -0.4493739 -0.4329347 0.4206846 #>        [,2120]   [,2121]   [,2122]   [,2123]   [,2124]    [,2125]     [,2126] #> [1,] 0.5688767 0.4916299 0.1169471 0.2108829 0.1407547 -0.1962896 -0.07171381 #>         [,2127]   [,2128]   [,2129]    [,2130]    [,2131]   [,2132]    [,2133] #> [1,] -0.1941477 -0.310855 0.4050739 0.07977144 -0.1665971 -0.134949 -0.3812274 #>         [,2134]    [,2135]    [,2136]    [,2137]   [,2138]   [,2139]    [,2140] #> [1,] 0.03312347 0.03285714 -0.2076281 -0.4334435 0.2100291 0.2394142 0.09914092 #>         [,2141]    [,2142]    [,2143]    [,2144]    [,2145]    [,2146] #> [1,] 0.04511239 0.05746192 0.09588054 -0.2590294 -0.4248026 -0.2229275 #>          [,2147]    [,2148]    [,2149]   [,2150]    [,2151]    [,2152] #> [1,] -0.08384994 -0.1634553 -0.6050882 0.1920003 -0.5548053 -0.3648563 #>         [,2153]  [,2154]     [,2155]   [,2156]    [,2157]    [,2158]    [,2159] #> [1,] -0.8025907 0.215752 -0.04814811 0.1660554 -0.2274694 -0.1456831 -0.1165734 #>         [,2160]    [,2161]    [,2162]     [,2163]   [,2164]   [,2165] #> [1,] -0.3198008 -0.1652135 -0.1848998 -0.02960751 -0.313555 0.1235805 #>         [,2166]     [,2167]    [,2168]     [,2169]    [,2170]     [,2171] #> [1,] -0.1014116 -0.08352341 0.01366678 -0.06235688 -0.7549725 -0.01302372 #>         [,2172]    [,2173]    [,2174]    [,2175]   [,2176]    [,2177]   [,2178] #> [1,] -0.2503223 -0.6306175 0.04723451 -0.3285596 0.2975391 -0.1425247 0.1540486 #>        [,2179]    [,2180]   [,2181] [,2182]    [,2183]    [,2184]    [,2185] #> [1,] 0.3399073 -0.4768955 0.2799166 0.35768 -0.6083346 -0.5746681 0.05816916 #>         [,2186]   [,2187]    [,2188]   [,2189]    [,2190]     [,2191] #> [1,] -0.1826104 0.3071477 -0.3316725 -0.270653 -0.1092772 -0.02385111 #>         [,2192]    [,2193]   [,2194]    [,2195]    [,2196]    [,2197] #> [1,] -0.3345907 -0.1247743 0.3195312 -0.1072448 -0.6856354 0.06294346 #>          [,2198]  [,2199]    [,2200]   [,2201]    [,2202]    [,2203] #> [1,] -0.03693285 0.251403 -0.3746934 0.4349701 -0.5402059 -0.1061014 #>          [,2204]    [,2205]    [,2206]   [,2207]    [,2208]    [,2209] #> [1,] -0.04481942 -0.6377047 -0.4509497 0.2166346 0.06319505 -0.5603928 #>         [,2210]    [,2211]    [,2212]   [,2213]     [,2214]    [,2215] #> [1,] -0.5159942 0.05900494 -0.0490331 0.4677426 -0.08723912 -0.1986189 #>        [,2216]    [,2217]      [,2218]    [,2219]    [,2220]    [,2221] #> [1,] 0.3672866 -0.2911747 -0.001092843 -0.1021641 -0.1172776 -0.3884413 #>         [,2222]   [,2223]    [,2224]    [,2225]     [,2226]     [,2227] #> [1,] -0.1616262 0.1003165 -0.1096262 -0.6384149 -0.07054798 -0.07528266 #>        [,2228]    [,2229]   [,2230]     [,2231]      [,2232]    [,2233] #> [1,] 0.1417178 0.05889973 0.3672526 -0.05958802 -0.004734665 -0.2530693 #>          [,2234]   [,2235]   [,2236]  [,2237]   [,2238]    [,2239]     [,2240] #> [1,] 0.006657362 0.3222096 0.4635616 0.076221 -0.273258 -0.1361366 -0.09933199 #>         [,2241]   [,2242]   [,2243]   [,2244]    [,2245]    [,2246]     [,2247] #> [1,] -0.4041524 0.1298934 0.2098825 0.4127842 -0.3760058 0.05706521 -0.03790462 #>         [,2248]   [,2249]   [,2250]    [,2251]    [,2252]   [,2253]   [,2254] #> [1,] -0.2721147 0.5249312 0.1473592 -0.2033665 -0.1083197 -0.100957 0.5297803 #>         [,2255]    [,2256]    [,2257]   [,2258]    [,2259]   [,2260]    [,2261] #> [1,] -0.1126742 -0.1987744 -0.4008223 0.3389342 -0.2126319 0.1278034 -0.1929371 #>          [,2262]    [,2263]    [,2264]   [,2265]    [,2266]     [,2267] #> [1,] -0.03409155 -0.2169075 -0.2524941 0.3808215 -0.3670641 -0.07401732 #>         [,2268]    [,2269]   [,2270]   [,2271]   [,2272]    [,2273]     [,2274] #> [1,] -0.5339903 0.03437886 0.1125797 0.1475181 0.1495452 -0.2372264 -0.03539499 #>         [,2275]    [,2276]   [,2277]     [,2278]     [,2279]    [,2280] #> [1,] 0.03191647 -0.3374313 0.1151186 -0.04537925 -0.09396388 -0.5247127 #>         [,2281]   [,2282]    [,2283]   [,2284]     [,2285]    [,2286] #> [1,] 0.04157156 0.1064876 0.02731675 0.2323414 -0.06854349 0.05236627 #>          [,2287]     [,2288]    [,2289]     [,2290]    [,2291]     [,2292] #> [1,] -0.02668329 -0.02567244 -0.2417684 -0.02319585 -0.2968953 -0.07001209 #>        [,2293]    [,2294]     [,2295]    [,2296]   [,2297]    [,2298] #> [1,] 0.2604656 -0.4444491 0.001992639 0.04408056 0.2321814 -0.6404502 #>          [,2299]    [,2300]    [,2301]   [,2302]    [,2303]    [,2304] #> [1,] -0.07781455 -0.1609033 -0.1397123 0.2681693 -0.1658951 -0.2165988 #>         [,2305]    [,2306]  [,2307]    [,2308]    [,2309]     [,2310] #> [1,] -0.3356031 -0.1822891 0.011079 -0.5151795 -0.1128701 -0.04845043 #>           [,2311]    [,2312]     [,2313]    [,2314]    [,2315]     [,2316] #> [1,] 8.077404e-05 0.00654821 0.004879689 0.02326966 -0.4916919 -0.06491008 #>         [,2317]    [,2318]    [,2319]    [,2320]     [,2321]    [,2322] #> [1,] -0.2431135 -0.4464554 0.08478394 -0.2093357 -0.01710576 -0.3665933 #>         [,2323]   [,2324]     [,2325]    [,2326]    [,2327]    [,2328] #> [1,] -0.2178944 0.2975589 -0.06769947 0.05091013 -0.4390274 -0.1281278 #>          [,2329]   [,2330]   [,2331]    [,2332]   [,2333]    [,2334]   [,2335] #> [1,] -0.09083497 0.2001132 0.1394318 -0.4314107 0.1532961 -0.1288607 0.5803994 #>         [,2336]   [,2337]    [,2338]     [,2339]    [,2340]    [,2341] #> [1,] -0.4086511 0.1780635 -0.0565707 -0.06606741 0.06583607 -0.1532982 #>         [,2342]   [,2343]   [,2344]    [,2345]  [,2346]    [,2347]    [,2348] #> [1,] -0.5272085 0.4201814 0.3664895 -0.2289649 0.117224 -0.1124788 -0.1683239 #>         [,2349]   [,2350]  [,2351]    [,2352]    [,2353]     [,2354]    [,2355] #> [1,] -0.2450522 0.4763111 0.269085 -0.4144384 -0.1278133 0.002867506 -0.5713328 #>         [,2356]   [,2357]    [,2358]    [,2359]    [,2360]     [,2361] #> [1,] -0.3561275 0.1233391 0.00827133 -0.2303896 -0.2518827 -0.01757912 #>        [,2362]    [,2363]   [,2364]     [,2365]   [,2366]    [,2367]    [,2368] #> [1,] -0.170307 -0.6308355 0.2645771 -0.06159393 0.3175409 -0.3190332 -0.3333365 #>        [,2369]     [,2370]   [,2371]   [,2372]    [,2373]    [,2374]    [,2375] #> [1,] 0.2683587 -0.01708396 0.0672962 0.1087081 -0.2926298 0.06270838 -0.3943884 #>          [,2376]   [,2377]   [,2378]    [,2379]   [,2380]  [,2381]    [,2382] #> [1,] -0.06442701 0.5944649 0.3191274 0.06888507 0.2856623 0.415845 0.04680821 #>         [,2383]   [,2384]  [,2385]   [,2386]    [,2387]   [,2388]   [,2389] #> [1,] -0.5875995 0.0631257 -0.25665 0.2208708 -0.3820477 0.4397752 0.1476325 #>        [,2390]   [,2391]    [,2392]   [,2393]    [,2394]    [,2395] [,2396] #> [1,] 0.5270978 0.3573418 0.04740687 -0.208712 -0.0342077 0.08195398  0.1332 #>         [,2397]   [,2398]    [,2399]    [,2400]  [,2401]   [,2402]   [,2403] #> [1,] -0.4606499 0.1584615 -0.3437584 -0.1698704 -0.50217 0.3316368 0.5359651 #>          [,2404]   [,2405]     [,2406]     [,2407]     [,2408]    [,2409] #> [1,] -0.06291178 0.7311062 0.002884079 -0.03956107 -0.05081782 -0.4463567 #>       [,2410]      [,2411]    [,2412]    [,2413]   [,2414]    [,2415]  [,2416] #> [1,] 0.109035 -0.005869953 -0.1819475 0.05739364 0.4067154 -0.6631049 0.232172 #>       [,2417]    [,2418]    [,2419]    [,2420]    [,2421]   [,2422]   [,2423] #> [1,] 0.124843 -0.2689401 -0.5292832 0.08561513 -0.1704906 -0.226117 0.1971021 #>         [,2424]      [,2425]    [,2426]    [,2427]    [,2428]    [,2429] #> [1,] -0.2272561 0.0008613876 0.05255091 -0.5202502 -0.2671289 -0.1100002 #>         [,2430]  [,2431]     [,2432]     [,2433]   [,2434]  [,2435]    [,2436] #> [1,] -0.1596779 -0.14523 0.008674687 -0.01821829 -0.278979 0.196975 -0.3783587 #>         [,2437]     [,2438]   [,2439]    [,2440]     [,2441]    [,2442] #> [1,] -0.7023473 -0.05084723 0.3267499 0.08521463 -0.03925579 -0.5711275 #>          [,2443]    [,2444]     [,2445]   [,2446]   [,2447]    [,2448] #> [1,] -0.09000458 -0.1342032 -0.06943757 0.1567049 0.3720634 -0.1297665 #>         [,2449]      [,2450]    [,2451]  [,2452]   [,2453]    [,2454] #> [1,] -0.0978863 -0.002765639 -0.1300312 0.297685 0.2095569 -0.1579974 #>         [,2455]     [,2456]      [,2457] [,2458]    [,2459]    [,2460]  [,2461] #> [1,] -0.3316566 -0.05543503 -0.005410515  -0.186 -0.3445283 -0.2539255 0.302763 #>        [,2462]    [,2463]    [,2464]   [,2465]   [,2466]    [,2467]     [,2468] #> [1,] 0.4291451 -0.1198951 -0.1733323 0.1262259 0.3379927 0.07571546 -0.03627386 #>         [,2469]    [,2470]   [,2471]   [,2472]   [,2473]     [,2474]    [,2475] #> [1,] -0.5100156 -0.4232828 0.3313496 0.1337221 -0.161967 -0.05126205 -0.3491742 #>          [,2476]    [,2477]    [,2478]     [,2479]    [,2480]    [,2481] #> [1,] -0.07379834 -0.1022286 0.02678757 -0.08748857 -0.2445678 -0.2188193 #>         [,2482]     [,2483]    [,2484]   [,2485]   [,2486]    [,2487]   [,2488] #> [1,] -0.5261207 0.008916635 -0.1275429 0.1932058 0.1789397 0.02885606 0.1270508 #>         [,2489]   [,2490]    [,2491]    [,2492]     [,2493]    [,2494] #> [1,] -0.5479625 0.0760206 0.05818597 -0.1418898 -0.08378455 -0.2483653 #>         [,2495]    [,2496]    [,2497]   [,2498]   [,2499]   [,2500]    [,2501] #> [1,] -0.0587681 -0.2217404 -0.2924659 0.2918773 -0.033166 0.2558864 -0.2704798 #>        [,2502]    [,2503]    [,2504]    [,2505]    [,2506]    [,2507] #> [1,] 0.1368749 -0.1735375 -0.1661755 -0.2308612 0.08613495 -0.5162005 #>         [,2508]   [,2509]    [,2510]   [,2511]    [,2512]    [,2513]    [,2514] #> [1,] 0.00188889 -0.181211 -0.6527645 0.1118417 -0.3535903 0.06704512 0.02410125 #>        [,2515]    [,2516]    [,2517]    [,2518]    [,2519]    [,2520] #> [1,] -0.116282 -0.4388491 0.01880198 -0.1068736 -0.3202886 -0.1053271 #>         [,2521]   [,2522]    [,2523]   [,2524]    [,2525]    [,2526]    [,2527] #> [1,] -0.3927914 0.1058892 0.04857832 -0.262011 -0.3075314 -0.6130298 -0.3310658 #>         [,2528]    [,2529]   [,2530]    [,2531]    [,2532]    [,2533] #> [1,] -0.3607833 0.06803619 0.1735179 -0.1459892 -0.2054628 0.07318727 #>         [,2534]  [,2535]     [,2536]    [,2537]    [,2538]   [,2539]    [,2540] #> [1,] -0.4594133 0.228406 -0.03437952 -0.2112045 -0.1933078 0.2203509 -0.5505191 #>        [,2541]   [,2542]    [,2543]    [,2544]   [,2545]   [,2546]   [,2547] #> [1,] 0.2589445 0.1773896 -0.3616887 -0.2075779 0.1736176 0.1847781 0.1092115 #>         [,2548]   [,2549]   [,2550]   [,2551]    [,2552]    [,2553]   [,2554] #> [1,] -0.5333953 0.1783507 0.3485637 0.1882627 -0.3196704 -0.1345148 -0.364334 #>       [,2555]   [,2556]     [,2557]   [,2558]    [,2559]    [,2560]   [,2561] #> [1,] 0.148253 -0.348077 -0.01180662 0.1009579 -0.7383419 -0.1499636 0.5611223 #>        [,2562]    [,2563]   [,2564]    [,2565]   [,2566]    [,2567]     [,2568] #> [1,] 0.2546509 -0.0431402 0.2189841 -0.2862869 0.1851064 -0.3690816 -0.02392506 #>         [,2569]      [,2570]     [,2571]   [,2572]   [,2573]   [,2574] #> [1,] 0.03831048 -0.009694758 -0.05716163 0.3239942 0.1377448 0.1132719 #>         [,2575]     [,2576]   [,2577]    [,2578]    [,2579]    [,2580] #> [1,] 0.03842513 -0.06175665 0.5574423 -0.5547252 -0.5418845 -0.3986379 #>         [,2581]    [,2582]   [,2583]    [,2584]     [,2585]    [,2586] #> [1,] -0.3704798 -0.1615351 0.2271407 -0.4955216 -0.06676549 -0.1159118 #>        [,2587]    [,2588]   [,2589]     [,2590]    [,2591]   [,2592]    [,2593] #> [1,] -0.378394 0.02370134 0.4272309 -0.07448844 -0.1004518 -0.413117 -0.2155323 #>          [,2594]     [,2595]      [,2596]    [,2597]      [,2598]   [,2599] #> [1,] -0.06874788 -0.06243795 0.0005596639 -0.2146289 -0.001066836 0.1430567 #>        [,2600]  [,2601]      [,2602]    [,2603]    [,2604]    [,2605] #> [1,] 0.1679987 -0.23047 -0.004471151 -0.1415816 0.03915988 -0.2491561 #>          [,2606]      [,2607]    [,2608]     [,2609]     [,2610]     [,2611] #> [1,] -0.04399432 -0.007525679 -0.2229483 -0.01477509 0.003334111 -0.07827602 #>        [,2612]   [,2613]    [,2614]    [,2615]    [,2616]     [,2617] #> [1,] 0.2481369 0.2418847 -0.1566601 -0.2264631 -0.2944981 -0.05232654 #>         [,2618]    [,2619] [,2620]    [,2621]    [,2622]   [,2623]    [,2624] #> [1,] -0.4058147 -0.1326592 0.18957 -0.4669793 0.05212355 0.1544694 -0.3393703 #>        [,2625]    [,2626]    [,2627]   [,2628]    [,2629]   [,2630]   [,2631] #> [1,] 0.1206556 -0.0754054 -0.2392894 -0.354586 -0.1755517 0.2099382 0.1975927 #>        [,2632]    [,2633]     [,2634]    [,2635]    [,2636]    [,2637] #> [1,] 0.3594486 -0.2775014 -0.06256939 -0.4488959 -0.5967604 -0.2842339 #>         [,2638]   [,2639]     [,2640]    [,2641]    [,2642]    [,2643] #> [1,] 0.01942834 0.1675593 -0.05225616 -0.1686875 0.09387266 -0.4391432 #>         [,2644]    [,2645]    [,2646]    [,2647]    [,2648]    [,2649] #> [1,] -0.1284523 -0.1962019 -0.2527249 -0.5565098 -0.2314643 -0.1987684 #>         [,2650]     [,2651]     [,2652]    [,2653]     [,2654]   [,2655] #> [1,] 0.03297138 -0.04551779 0.003514145 -0.1929634 -0.02598256 0.3757571 #>         [,2656]     [,2657]   [,2658]    [,2659]    [,2660]    [,2661] #> [1,] -0.2744248 -0.05905094 0.3242187 -0.6486561 -0.2577211 -0.1609268 #>         [,2662]     [,2663]    [,2664]    [,2665]    [,2666]    [,2667] #> [1,] -0.5814531 -0.09214045 -0.3460805 -0.8286966 -0.2420964 -0.3732796 #>        [,2668]   [,2669]   [,2670]   [,2671]    [,2672]    [,2673]     [,2674] #> [1,] 0.3184193 -0.449736 0.3117947 0.3369335 -0.4035727 -0.2818536 -0.04112111 #>         [,2675]    [,2676]   [,2677]    [,2678]   [,2679]     [,2680] #> [1,] -0.6023478 -0.1370458 0.1127783 -0.1026983 0.3353492 -0.06858958 #>         [,2681]     [,2682]    [,2683]    [,2684]     [,2685]     [,2686] #> [1,] -0.1620476 -0.02170893 -0.1654268 -0.3919356 -0.02296911 -0.04258789 #>          [,2687]   [,2688]     [,2689]     [,2690]     [,2691]    [,2692] #> [1,] -0.03721576 0.3758115 -0.05166649 -0.05157553 -0.08589518 -0.6698712 #>         [,2693]    [,2694]    [,2695]   [,2696]   [,2697]  [,2698]    [,2699] #> [1,] -0.1706415 -0.3040385 -0.4028526 0.2630677 0.3044272 0.207321 -0.3233513 #>         [,2700]   [,2701]    [,2702]   [,2703]    [,2704]    [,2705]   [,2706] #> [1,] -0.5680161 0.1079495 -0.2293727 0.3718886 -0.2170023 -0.4206372 0.4503054 #>         [,2707]    [,2708]    [,2709]     [,2710]    [,2711]    [,2712] #> [1,] -0.3502426 -0.2923395 -0.2881349 -0.07285869 -0.1417989 -0.1028065 #>         [,2713]    [,2714]    [,2715]   [,2716]     [,2717]    [,2718] #> [1,] -0.2639212 0.09592429 -0.4164019 0.2801055 -0.09861805 -0.2349228 #>         [,2719]    [,2720]   [,2721]    [,2722]   [,2723]    [,2724]   [,2725] #> [1,] -0.2869499 -0.4575851 0.3397718 0.07794991 0.1781526 -0.1463701 0.3988647 #>         [,2726]    [,2727]    [,2728]   [,2729]   [,2730]    [,2731]    [,2732] #> [1,] 0.07085778 -0.0504223 -0.2476227 0.1572491 -0.301788 -0.2738477 -0.1345722 #>         [,2733]      [,2734]    [,2735]     [,2736]   [,2737]    [,2738] #> [1,] -0.2818643 -0.001815153 0.05744599 -0.06674523 0.2520108 -0.1536625 #>           [,2739]   [,2740]   [,2741]    [,2742]     [,2743]    [,2744] #> [1,] -0.004340764 0.2736033 0.4720438 0.09749235 -0.07990597 -0.2648245 #>         [,2745]   [,2746]  [,2747]   [,2748]   [,2749]    [,2750]   [,2751] #> [1,] -0.3102394 0.2006588 0.393191 0.1870615 -0.530302 -0.5660461 0.3663436 #>        [,2752]    [,2753]   [,2754]   [,2755]    [,2756]    [,2757]    [,2758] #> [1,] 0.2798624 -0.4540566 -0.315578 0.1037103 -0.3570502 -0.1094295 0.04777028 #>         [,2759]    [,2760]   [,2761]   [,2762]    [,2763]    [,2764]    [,2765] #> [1,] -0.2093408 0.07278002 0.2630459 0.3442452 -0.4093702 -0.1673892 0.02028729 #>        [,2766]   [,2767]   [,2768]    [,2769]   [,2770]   [,2771]     [,2772] #> [1,] 0.3739544 0.1910136 0.2797711 -0.1132569 0.2438405 0.1640517 -0.01980973 #>         [,2773]    [,2774]    [,2775]    [,2776]     [,2777]     [,2778] #> [1,] -0.1924579 0.09836781 -0.5310511 -0.4754966 -0.04166251 -0.09009469 #>        [,2779]   [,2780]   [,2781]    [,2782]   [,2783]    [,2784]    [,2785] #> [1,] 0.2122401 -0.367952 0.1683992 -0.1744907 0.2862876 -0.2710958 -0.2633505 #>         [,2786]    [,2787]    [,2788]     [,2789]    [,2790]     [,2791] #> [1,] 0.04658373 -0.1702907 0.05155963 -0.02770663 -0.5399799 -0.07672766 #>        [,2792]     [,2793]    [,2794]    [,2795]    [,2796]  [,2797]   [,2798] #> [1,] 0.0713478 -0.06019943 0.01175781 -0.2304286 -0.6922112 0.500069 0.1678343 #>        [,2799]      [,2800]    [,2801]    [,2802]     [,2803]      [,2804] #> [1,] 0.1048693 -0.003368177 -0.3987412 0.09373574 -0.07219955 -0.002690746 #>         [,2805]    [,2806]    [,2807]    [,2808]    [,2809]    [,2810] #> [1,] -0.7433142 -0.3598894 -0.4298937 -0.5936037 -0.5341605 0.08803343 #>         [,2811]   [,2812]   [,2813]    [,2814]    [,2815]    [,2816] #> [1,] -0.2603208 0.1081801 0.5591395 -0.1001838 -0.5110715 -0.0149912 #>          [,2817]    [,2818]   [,2819]   [,2820]    [,2821]    [,2822] #> [1,] -0.02548589 -0.4612162 0.2143246 0.1105681 -0.3642097 -0.1718557 #>         [,2823]    [,2824]   [,2825]    [,2826]    [,2827]   [,2828]    [,2829] #> [1,] -0.2869751 -0.2383285 0.0629387 -0.7006376 -0.3923389 0.1687726 -0.4423284 #>         [,2830]    [,2831]    [,2832]    [,2833]    [,2834]    [,2835] #> [1,] -0.1233593 -0.4297243 -0.1238711 -0.1179842 0.08045341 -0.4115819 #>         [,2836]    [,2837]    [,2838]    [,2839]    [,2840]    [,2841] #> [1,] -0.5659527 -0.4783666 -0.1324954 -0.1792607 -0.1976748 -0.2596613 #>         [,2842]    [,2843]     [,2844]   [,2845]  [,2846]   [,2847]     [,2848] #> [1,] -0.5008695 -0.0725987 -0.03395217 0.1882095 0.659044 0.1191159 -0.04504167 #>         [,2849]    [,2850]    [,2851]     [,2852]    [,2853]     [,2854] #> [1,] -0.3654415 0.01826958 -0.1714117 -0.04820242 -0.3590447 0.005425519 #>        [,2855]   [,2856]    [,2857]   [,2858]    [,2859]   [,2860]    [,2861] #> [1,] 0.1653508 0.2893504 0.09072663 0.2345381 0.00578475 0.0265264 -0.2128159 #>         [,2862]     [,2863]     [,2864]    [,2865]    [,2866]   [,2867] #> [1,] 0.02482407 -0.08684686 -0.03548885 -0.4491653 -0.3023233 0.0676678 #>         [,2868]    [,2869]    [,2870]     [,2871]    [,2872]    [,2873] #> [1,] 0.03712088 -0.1640424 -0.1789221 -0.01901957 -0.4236679 -0.2196714 #>        [,2874]   [,2875]    [,2876]   [,2877]  [,2878]    [,2879]   [,2880] #> [1,] 0.1206986 0.1073824 0.07471693 0.1427306 0.197617 0.06533344 0.2028922 #>        [,2881]    [,2882]    [,2883]    [,2884]    [,2885]   [,2886]    [,2887] #> [1,] 0.2824252 -0.4614926 -0.1617479 -0.1717433 -0.6303219 -0.372613 -0.2409995 #>         [,2888]     [,2889]   [,2890]    [,2891]    [,2892]    [,2893] #> [1,] -0.3846098 -0.05561289 0.1178268 0.06546424 -0.4720176 0.04682202 #>         [,2894]   [,2895]    [,2896]    [,2897]      [,2898]   [,2899] #> [1,] -0.3432521 0.1344454 -0.3760759 -0.1181473 -0.005232301 0.1667104 #>         [,2900]    [,2901]    [,2902]    [,2903]    [,2904]    [,2905] #> [1,] 0.06746704 -0.4129433 -0.1798515 -0.2343732 -0.3708925 -0.1487778 #>        [,2906]    [,2907]    [,2908]   [,2909]   [,2910]    [,2911]   [,2912] #> [1,] 0.3831711 -0.3885424 -0.3497704 0.2172677 0.2277515 -0.2337672 -0.519511 #>        [,2913]  [,2914]   [,2915]    [,2916]    [,2917]  [,2918]     [,2919] #> [1,] 0.2965209 0.213661 0.2055085 -0.5021134 -0.4451401 0.138498 -0.07597182 #>         [,2920]    [,2921]   [,2922]    [,2923]    [,2924]     [,2925] #> [1,] -0.2818556 0.07018282 0.1280671 0.05061305 0.06716816 -0.07898755 #>           [,2926]   [,2927]      [,2928]    [,2929]     [,2930]    [,2931] #> [1,] -0.005213754 0.0811533 -0.009084928 -0.1152923 0.004872109 -0.5257067 #>          [,2932]    [,2933]    [,2934]    [,2935]    [,2936]    [,2937] #> [1,] -0.03868615 -0.5924187 -0.1040911 -0.1536699 -0.3807975 -0.5594099 #>         [,2938]    [,2939]    [,2940]    [,2941]    [,2942]    [,2943] #> [1,] -0.4736345 0.09153999 -0.2165327 -0.2492498 0.02824865 0.09888248 #>          [,2944]   [,2945]    [,2946]   [,2947]    [,2948]    [,2949] #> [1,] -0.03246108 0.2179227 -0.2192388 0.3615792 -0.3330451 0.04730891 #>         [,2950]    [,2951]    [,2952]   [,2953]    [,2954]    [,2955] #> [1,] -0.2381091 -0.6349195 -0.1127373 0.2087841 0.05905895 -0.3187902 #>         [,2956]    [,2957]   [,2958]     [,2959]   [,2960]    [,2961] #> [1,] -0.2669945 -0.9093631 0.0565266 -0.01567391 0.0194349 -0.4804274 #>         [,2962]    [,2963]    [,2964]    [,2965]    [,2966]    [,2967] #> [1,] -0.1721682 -0.3066804 -0.2944981 -0.1839695 -0.2498194 -0.8553948 #>        [,2968]  [,2969]    [,2970]    [,2971]   [,2972]    [,2973]     [,2974] #> [1,] 0.3581263 0.213661 -0.6587632 -0.2766453 0.2499166 -0.2472521 -0.04753651 #>         [,2975]    [,2976]   [,2977]   [,2978]    [,2979]     [,2980] #> [1,] 0.03288228 0.05233446 0.1868682 0.0147377 -0.1876235 0.008767658 #>          [,2981]    [,2982]    [,2983]    [,2984]   [,2985]    [,2986] #> [1,] -0.08824109 0.05698038 0.06922474 -0.5314113 0.3012605 -0.5422542 #>         [,2987]   [,2988]    [,2989]    [,2990]    [,2991]    [,2992]   [,2993] #> [1,] 0.03265118 0.1113843 -0.2014465 0.07829615 -0.7205712 -0.4568041 0.1558964 #>         [,2994]     [,2995]     [,2996]   [,2997]    [,2998]   [,2999] #> [1,] -0.1593346 -0.08112462 -0.01865908 0.2772071 -0.5952881 0.2239068 #>         [,3000]     [,3001]   [,3002]    [,3003]    [,3004]      [,3005] #> [1,] -0.2515539 -0.07227014 0.1709155 -0.1136538 0.07477793 -0.007232363 #>        [,3006]    [,3007]    [,3008]    [,3009]    [,3010]    [,3011] #> [1,] 0.0113898 -0.1791063 -0.4133146 -0.6959939 -0.3790027 -0.4896744 #>         [,3012]   [,3013]   [,3014]    [,3015]    [,3016]     [,3017]   [,3018] #> [1,] -0.5739371 0.1918445 0.3603918 0.01090722 -0.1917872 -0.03885663 0.1898616 #>          [,3019]     [,3020]     [,3021]    [,3022]    [,3023]    [,3024] #> [1,] -0.01054191 -0.04240696 -0.05307474 -0.1408204 -0.0205475 -0.3481154 #>         [,3025]   [,3026]    [,3027]   [,3028]     [,3029]     [,3030] #> [1,] -0.4165987 0.2915577 -0.4553137 0.2278575 -0.07045133 -0.02749334 #>         [,3031]     [,3032]   [,3033]    [,3034]    [,3035]    [,3036] #> [1,] -0.1137545 -0.01323826 0.2634479 -0.1825973 0.09538288 -0.5696078 #>         [,3037]   [,3038]    [,3039]   [,3040]    [,3041]   [,3042]   [,3043] #> [1,] -0.3533914 -0.137694 -0.3670826 0.3928083 -0.1225059 -0.214259 0.1094879 #>         [,3044]   [,3045]   [,3046]    [,3047]   [,3048]    [,3049]    [,3050] #> [1,] -0.1595896 0.3527597 0.1454457 -0.3720108 -0.219632 -0.1433336 -0.3547429 #>        [,3051]     [,3052]    [,3053]   [,3054]    [,3055]   [,3056]   [,3057] #> [1,] -0.142974 -0.09519047 0.08274051 0.3611914 -0.3368605 -0.519603 -0.252794 #>         [,3058]   [,3059]   [,3060]     [,3061]    [,3062]    [,3063] #> [1,] 0.03371739 0.4460117 0.1204274 0.007868417 -0.1723878 -0.1409563 #>          [,3064]     [,3065]   [,3066]     [,3067]   [,3068]    [,3069] #> [1,] -0.06687485 -0.03852905 0.1999033 -0.07569766 0.2126536 0.05500715 #>         [,3070]    [,3071]    [,3072]   [,3073]   [,3074]    [,3075]    [,3076] #> [1,] -0.5072371 -0.1698893 -0.2961267 -0.492224 -0.566833 -0.3100085 -0.1928978 #>        [,3077]    [,3078]    [,3079]  [,3080]     [,3081]     [,3082]   [,3083] #> [1,] 0.1813768 -0.3781372 -0.1174214 0.133229 -0.01018654 -0.07743988 0.0696545 #>        [,3084]   [,3085]    [,3086]      [,3087]   [,3088]   [,3089] #> [1,] 0.3113569 0.1173575 0.04440051 -0.007342868 0.1028019 0.3016041 #>          [,3090]    [,3091]    [,3092]     [,3093]    [,3094]   [,3095] #> [1,] -0.03957045 -0.1241424 -0.2339478 -0.01603206 -0.1391611 0.1463643 #>         [,3096]    [,3097]     [,3098]   [,3099]    [,3100]    [,3101]  [,3102] #> [1,] -0.2947002 -0.1288951 -0.03686126 0.3686869 -0.3033556 0.02493485 0.286876 #>          [,3103]   [,3104]   [,3105]    [,3106]    [,3107]    [,3108]   [,3109] #> [1,] -0.02544905 0.2908851 0.1161861 0.03132799 -0.3730534 0.02215591 0.2517926 #>         [,3110]    [,3111]    [,3112]     [,3113]   [,3114]    [,3115] #> [1,] -0.3597445 -0.1584017 0.04699611 -0.01207257 -0.150108 -0.3494748 #>         [,3116]    [,3117]    [,3118]    [,3119]   [,3120]    [,3121] #> [1,] -0.2961018 -0.4653032 -0.3216499 -0.1545963 0.2123484 -0.5400434 #>         [,3122]   [,3123]    [,3124]    [,3125]   [,3126]    [,3127]   [,3128] #> [1,] -0.4879293 0.0297763 -0.4233773 -0.3083956 0.1481541 -0.3238133 0.2584975 #>         [,3129]    [,3130]    [,3131]   [,3132]    [,3133]   [,3134]   [,3135] #> [1,] 0.03469175 -0.1305722 -0.0473243 0.1410587 0.01331587 -0.348282 0.1327458 #>          [,3136]    [,3137]    [,3138]   [,3139]    [,3140]    [,3141] #> [1,] -0.08517476 -0.2461655 -0.7989426 0.6196643 -0.3148048 -0.2928297 #>         [,3142]   [,3143]    [,3144]     [,3145]     [,3146]    [,3147] #> [1,] 0.00256749 0.1495105 -0.2539936 -0.04708679 -0.09467633 -0.4036433 #>         [,3148]    [,3149]     [,3150]    [,3151]    [,3152]    [,3153] #> [1,] -0.3572509 -0.1151495 -0.05978415 0.02924952 -0.4861716 -0.1630338 #>        [,3154]   [,3155]    [,3156]    [,3157]    [,3158]    [,3159]    [,3160] #> [1,] 0.1483639 0.3335251 0.02858002 0.06487694 -0.3048703 -0.6787903 -0.2011118 #>        [,3161]    [,3162]    [,3163]   [,3164]    [,3165]    [,3166]    [,3167] #> [1,] -0.394002 -0.7011611 -0.5104874 0.3594859 0.04277256 0.07343896 -0.5780263 #>         [,3168]   [,3169]     [,3170]    [,3171]   [,3172]   [,3173] #> [1,] -0.2483564 0.1324294 -0.03046696 0.04030378 0.2162302 -0.362373 #>          [,3174]    [,3175]    [,3176]   [,3177]   [,3178]    [,3179] #> [1,] -0.06302809 0.04168541 0.02178521 0.1007065 0.5137835 -0.4446551 #>         [,3180]   [,3181]    [,3182]    [,3183]    [,3184]   [,3185]   [,3186] #> [1,] -0.3893449 0.2310569 -0.1501885 0.08755974 -0.5697478 0.4267481 0.1168789 #>        [,3187]    [,3188]  [,3189]    [,3190]    [,3191]    [,3192]     [,3193] #> [1,] 0.1293435 -0.2419358 0.127754 -0.4200742 -0.2708045 -0.2763174 -0.05078405 #>        [,3194]    [,3195]     [,3196]     [,3197]     [,3198]    [,3199] #> [1,] 0.2118254 -0.0232481 -0.07686206 -0.07311047 -0.09616521 0.08151358 #>          [,3200]     [,3201]   [,3202]    [,3203]    [,3204]    [,3205] #> [1,] -0.01817414 -0.07471163 0.2165754 -0.1634213 -0.0541477 -0.4481268 #>         [,3206]    [,3207]    [,3208]    [,3209]   [,3210]   [,3211]   [,3212] #> [1,] -0.3713824 -0.1610908 -0.2157679 -0.1114445 0.2543366 0.1814809 0.4170173 #>          [,3213]    [,3214]     [,3215]    [,3216]   [,3217]    [,3218] #> [1,] -0.08243926 0.02344906 -0.02718464 -0.2166089 0.1224431 0.07572291 #>       [,3219]    [,3220]    [,3221]   [,3222]    [,3223]    [,3224]    [,3225] #> [1,] 0.276666 0.03107491 0.02461411 0.2920155 -0.1028341 -0.4006904 -0.2113859 #>         [,3226]    [,3227]    [,3228]    [,3229]    [,3230]   [,3231]   [,3232] #> [1,] 0.07557966 -0.3955023 0.09146083 -0.6966459 -0.3970354 0.4803404 0.1797167 #>        [,3233]   [,3234]    [,3235]  [,3236]   [,3237]    [,3238]    [,3239] #> [1,] 0.5225645 0.3820184 -0.2811736 0.120138 -0.159301 -0.0837853 -0.0843254 #>         [,3240]    [,3241]     [,3242]    [,3243]   [,3244]      [,3245] #> [1,] -0.2455074 -0.2430549 -0.03888163 -0.2446891 -0.252379 -0.004085969 #>         [,3246]  [,3247]    [,3248]   [,3249]    [,3250]    [,3251]    [,3252] #> [1,] -0.1277223 0.026178 -0.4120088 0.1368295 -0.1330192 -0.1085067 -0.2756359 #>        [,3253]    [,3254]    [,3255]    [,3256]    [,3257]    [,3258] #> [1,] 0.1338019 -0.2827782 -0.3138117 -0.1088195 -0.4131245 -0.1065419 #>         [,3259]    [,3260] [,3261]    [,3262]   [,3263]    [,3264]    [,3265] #> [1,] -0.5533978 -0.3852154 0.20685 -0.1291509 0.2908965 -0.2072718 0.01963663 #>         [,3266]    [,3267]  [,3268]      [,3269]      [,3270]    [,3271] #> [1,] -0.2389853 0.09774106 0.110461 -0.006741171 -0.005187067 -0.4836654 #>         [,3272]    [,3273]    [,3274]    [,3275]    [,3276]    [,3277] #> [1,] -0.1589391 -0.2150654 -0.1070573 0.06352106 -0.3595016 -0.2413606 #>         [,3278]   [,3279]   [,3280]   [,3281]   [,3282]     [,3283]    [,3284] #> [1,] 0.06678114 -0.148055 0.1964792 0.2068017 0.3050525 -0.06318811 -0.6915199 #>        [,3285]    [,3286]    [,3287]    [,3288]  [,3289]    [,3290]    [,3291] #> [1,] 0.5136433 -0.1476351 0.01275136 -0.1456498 0.300006 -0.2233213 0.05490077 #>         [,3292]  [,3293]    [,3294]    [,3295]     [,3296]   [,3297]    [,3298] #> [1,] -0.5798864 0.180239 -0.1864489 -0.2291466 0.006650167 0.1151922 -0.1428827 #>        [,3299]    [,3300]    [,3301]    [,3302]    [,3303]   [,3304]    [,3305] #> [1,] 0.1138601 -0.3221562 -0.2379808 -0.4079957 -0.1666044 0.1889444 -0.1059532 #>         [,3306]    [,3307]  [,3308]    [,3309]     [,3310]    [,3311] #> [1,] -0.1662833 -0.3140899 0.121062 -0.1395652 -0.03283945 0.02069291 #>         [,3312]    [,3313]    [,3314]   [,3315]   [,3316]    [,3317]    [,3318] #> [1,] -0.5169118 -0.1409379 -0.7499169 0.1170229 0.1220768 -0.4696951 -0.2419619 #>       [,3319]    [,3320]   [,3321]   [,3322]  [,3323]   [,3324]  [,3325] #> [1,] 0.312404 -0.2766208 0.3141906 -0.256978 -0.33185 0.2165751 0.158899 #>         [,3326]    [,3327]  [,3328]     [,3329]    [,3330]    [,3331] #> [1,] -0.3117233 -0.1213188 0.284646 -0.09474759 -0.2281086 -0.1933628 #>         [,3332]    [,3333]    [,3334]    [,3335]   [,3336]   [,3337]    [,3338] #> [1,] -0.3992184 -0.6462555 -0.2577272 0.09582713 -0.397075 0.1516487 -0.0171385 #>         [,3339]   [,3340]   [,3341]   [,3342]    [,3343]    [,3344]    [,3345] #> [1,] -0.3772769 0.5265887 0.1742616 0.1208115 -0.1571063 -0.1026206 -0.2893373 #>        [,3346]    [,3347]     [,3348]    [,3349]   [,3350]     [,3351] #> [1,] 0.2927647 -0.4334694 -0.01372896 -0.3339753 0.1146774 -0.05633681 #>          [,3352]      [,3353]    [,3354]    [,3355]    [,3356]    [,3357] #> [1,] -0.06744643 -0.006438865 -0.1108774 -0.3824515 -0.1366086 -0.1382351 #>         [,3358]    [,3359]   [,3360]  [,3361]     [,3362]    [,3363] #> [1,] -0.1008363 -0.3411372 0.1931527 0.411144 -0.07643184 -0.4057707 #>          [,3364]    [,3365]    [,3366]    [,3367]    [,3368]    [,3369] #> [1,] -0.06340563 -0.5007711 -0.2708164 -0.6059957 -0.3494493 0.09665941 #>         [,3370]   [,3371]    [,3372]     [,3373]    [,3374]   [,3375] #> [1,] 0.05638331 -0.407614 -0.3995264 -0.01067832 -0.2306827 0.2561294 #>         [,3376]    [,3377]   [,3378]      [,3379]     [,3380]   [,3381] #> [1,] 0.07116342 -0.1044468 0.1141902 -0.005701848 -0.02841935 0.2012128 #>         [,3382]    [,3383]    [,3384]    [,3385]    [,3386]     [,3387] #> [1,] -0.6754587 -0.2997962 -0.2888409 -0.2959571 0.02954422 -0.06698448 #>        [,3388]   [,3389]    [,3390]    [,3391]   [,3392]    [,3393]   [,3394] #> [1,] 0.1804673 -0.104853 -0.5031345 -0.4606415 0.1673993 0.05003828 -0.427833 #>         [,3395]    [,3396]      [,3397]    [,3398]    [,3399]    [,3400] #> [1,] -0.2139587 -0.1428342 -0.007586482 -0.1123918 -0.4233256 -0.4796962 #>         [,3401]     [,3402]    [,3403]    [,3404]    [,3405]    [,3406] #> [1,] -0.2241459 -0.04256792 -0.1529971 -0.5922005 -0.1235267 -0.2691092 #>         [,3407]    [,3408]  [,3409]    [,3410]     [,3411]    [,3412]   [,3413] #> [1,] -0.5201876 0.04748553 0.136353 -0.3145706 -0.02736883 -0.4771976 0.3537918 #>         [,3414]     [,3415]     [,3416]    [,3417]   [,3418]     [,3419] #> [1,] -0.1343868 -0.05433768 -0.07372032 -0.3894247 0.1868395 -0.06300834 #>         [,3420]    [,3421]    [,3422]    [,3423]    [,3424]    [,3425] #> [1,] -0.4866873 -0.1113277 -0.5958794 -0.2572194 -0.5734085 -0.2674711 #>        [,3426]   [,3427]   [,3428]   [,3429]    [,3430]    [,3431]    [,3432] #> [1,] 0.1126131 0.3062862 0.1355613 0.1195274 -0.2387774 -0.5489881 -0.3546741 #>         [,3433]    [,3434]    [,3435]    [,3436]   [,3437]    [,3438] #> [1,] -0.8769993 -0.3066502 -0.4558464 -0.2577446 0.2131864 -0.2707375 #>         [,3439]    [,3440]    [,3441]   [,3442]   [,3443]    [,3444]   [,3445] #> [1,] -0.4944741 -0.2969958 -0.2041547 0.2300122 0.2186373 -0.2487277 0.2375333 #>        [,3446]   [,3447]   [,3448]    [,3449]   [,3450]    [,3451]    [,3452] #> [1,] 0.2161634 0.1158638 0.0540468 -0.1136913 0.1719817 -0.5181041 -0.5631563 #>        [,3453]    [,3454]   [,3455]    [,3456]    [,3457]    [,3458]   [,3459] #> [1,] -0.581632 -0.1285647 0.2936524 -0.2024464 -0.1771935 -0.1451519 0.0253097 #>         [,3460]   [,3461]    [,3462]    [,3463]     [,3464]    [,3465] #> [1,] -0.5053504 -0.160625 -0.3264914 -0.3882611 -0.09351447 -0.3763278 #>          [,3466]      [,3467]   [,3468]   [,3469]    [,3470]   [,3471] #> [1,] -0.03659905 -0.009561015 0.1411719 0.1300126 -0.1401598 -0.166679 #>         [,3472]    [,3473]    [,3474]   [,3475]    [,3476]    [,3477]   [,3478] #> [1,] -0.2663293 -0.3090332 -0.0288459 0.2790399 -0.1796655 -0.3672334 0.2013889 #>         [,3479]    [,3480]    [,3481]    [,3482]  [,3483]   [,3484]   [,3485] #> [1,] -0.3857754 -0.3681502 -0.3297819 -0.2791065 -0.23768 0.1796657 0.1414827 #>           [,3486]   [,3487]    [,3488]    [,3489]    [,3490]    [,3491] #> [1,] -0.005845762 -0.442186 -0.2044571 -0.3357972 -0.6676895 -0.1158555 #>        [,3492]    [,3493]    [,3494]    [,3495]   [,3496]   [,3497]    [,3498] #> [1,] 0.2713619 -0.2662871 0.04199114 -0.0345268 0.3499053 0.0783327 -0.2707765 #>         [,3499]    [,3500]    [,3501]   [,3502]   [,3503]      [,3504] #> [1,] -0.2866308 -0.5752202 -0.2443802 -0.348875 0.5005175 -0.009977889 #>        [,3505]   [,3506]  [,3507]     [,3508]    [,3509]    [,3510]    [,3511] #> [1,] -0.268843 0.1370513 0.210264 -0.01510999 0.05958577 -0.4941635 -0.5034733 #>         [,3512]   [,3513]    [,3514]     [,3515]   [,3516]    [,3517] #> [1,] -0.3412269 0.2991541 -0.3145737 -0.04401383 0.0394779 -0.3935057 #>         [,3518]    [,3519]    [,3520]     [,3521]    [,3522]   [,3523] #> [1,] -0.9090528 0.09901335 0.01357223 -0.04216765 0.02615644 0.2576081 #>        [,3524]    [,3525]    [,3526]    [,3527]   [,3528]   [,3529]   [,3530] #> [1,] 0.0475464 -0.4622484 -0.2803665 -0.1441876 0.2065212 0.1392262 0.2919819 #>         [,3531]   [,3532]    [,3533]    [,3534]     [,3535]   [,3536] #> [1,] -0.2100435 -0.247562 -0.1828362 0.03324052 -0.02012752 -0.254647 #>         [,3537]   [,3538]    [,3539]    [,3540]     [,3541]    [,3542] #> [1,] -0.3479972 -0.434602 -0.4520979 -0.4300566 -0.07059399 0.01258204 #>         [,3543]    [,3544]   [,3545]    [,3546]    [,3547]     [,3548]  [,3549] #> [1,] 0.06435147 -0.5294586 0.0177627 -0.0467151 -0.3145607 -0.03888121 0.187989 #>         [,3550]   [,3551]   [,3552]   [,3553]    [,3554]    [,3555]   [,3556] #> [1,] -0.2513012 0.3586417 0.1193449 0.1167031 0.05625407 0.06229523 0.1187629 #>       [,3557]    [,3558]    [,3559]   [,3560]     [,3561]   [,3562]   [,3563] #> [1,] 0.147362 -0.6602659 -0.4238963 0.1645602 -0.04303779 0.0641239 0.1144795 #>         [,3564]    [,3565]    [,3566]  [,3567]    [,3568]   [,3569]   [,3570] #> [1,] -0.0936484 -0.5076144 -0.1046448 -0.32583 0.02520839 0.2455998 0.3482899 #>        [,3571]    [,3572]    [,3573]   [,3574]    [,3575]     [,3576] #> [1,] 0.2254005 -0.3625927 0.00820075 -0.107707 -0.5994697 -0.07165903 #>         [,3577]    [,3578]    [,3579]   [,3580]    [,3581]  [,3582]    [,3583] #> [1,] -0.0347485 -0.4389041 -0.1585789 0.1189177 -0.4394725 0.123032 -0.1769615 #>         [,3584]    [,3585]     [,3586]     [,3587]    [,3588]    [,3589] #> [1,] 0.08649297 -0.3095167 -0.03344298 -0.01115797 -0.1136037 -0.1521632 #>         [,3590]    [,3591]   [,3592]   [,3593]    [,3594]    [,3595]   [,3596] #> [1,] -0.3091137 -0.3193041 0.1275687 0.1677921 -0.2805146 -0.2722185 -0.113373 #>        [,3597]   [,3598]    [,3599]    [,3600]    [,3601]     [,3602] #> [1,] -0.595655 0.2523376 -0.4464437 -0.1065029 -0.2813876 -0.02867783 #>          [,3603]    [,3604]   [,3605]   [,3606]   [,3607]   [,3608]    [,3609] #> [1,] -0.02371534 -0.2498738 0.1647809 0.3229734 0.2140416 0.1624316 -0.3496453 #>         [,3610]  [,3611]   [,3612]    [,3613]    [,3614]    [,3615]    [,3616] #> [1,] -0.1931367 -0.18405 -0.488217 -0.1615442 0.01037856 -0.2869885 -0.0120985 #>         [,3617]    [,3618]   [,3619]    [,3620]     [,3621]   [,3622]   [,3623] #> [1,] -0.2030525 -0.3086676 0.1973618 -0.1795654 -0.07557057 0.2089354 0.4344257 #>        [,3624]    [,3625]     [,3626]   [,3627]   [,3628]    [,3629] #> [1,] 0.3042291 -0.2715047 -0.04833011 0.2361465 0.1306684 -0.5121483 #>          [,3630]    [,3631]    [,3632]     [,3633]     [,3634]   [,3635] #> [1,] 0.003447411 -0.6387007 0.02819098 -0.05962952 -0.03911098 0.3548805 #>          [,3636]   [,3637]   [,3638]    [,3639]     [,3640]     [,3641] #> [1,] 0.001622539 0.4792383 0.3209012 -0.1555159 0.002044951 -0.06433346 #>        [,3642]     [,3643]    [,3644]    [,3645]  [,3646]    [,3647]    [,3648] #> [1,] 0.2694043 -0.03427755 -0.2874598 -0.2590824 0.306569 0.06494501 0.02352644 #>         [,3649]     [,3650]    [,3651]   [,3652]  [,3653]    [,3654]   [,3655] #> [1,] 0.01197091 -0.04486528 -0.1908415 0.5151532 0.193361 0.02289814 -0.154066 #>         [,3656]   [,3657]   [,3658]   [,3659]   [,3660]   [,3661]   [,3662] #> [1,] -0.4198771 0.3791194 -0.147461 0.0112913 0.2348471 0.4524655 0.1443838 #>         [,3663]    [,3664]    [,3665]    [,3666]   [,3667]    [,3668] #> [1,] -0.2175651 -0.1117583 0.04596734 -0.1417109 -0.410342 -0.2266382 #>         [,3669]    [,3670]   [,3671]   [,3672]   [,3673]   [,3674]    [,3675] #> [1,] -0.4203042 -0.5484769 0.3048075 0.1924848 0.3773606 -0.269192 -0.1633218 #>        [,3676]    [,3677]   [,3678]    [,3679]    [,3680]    [,3681] #> [1,] 0.1422645 -0.0509412 0.1537739 -0.4860005 -0.2049448 -0.4818623 #>          [,3682]   [,3683]    [,3684]      [,3685]      [,3686]    [,3687] #> [1,] 0.006797353 0.3310544 0.08141241 -0.006764119 0.0004946926 -0.2695109 #>        [,3688]    [,3689]   [,3690]    [,3691]    [,3692]    [,3693]    [,3694] #> [1,] 0.2567048 -0.2348192 -0.495461 -0.1522607 -0.2933558 0.00766748 -0.2196229 #>          [,3695]     [,3696]    [,3697]   [,3698]    [,3699]    [,3700] #> [1,] -0.06375019 -0.02488322 -0.0273156 0.1577476 -0.3564676 0.04722688 #>         [,3701]    [,3702]     [,3703]    [,3704]    [,3705]    [,3706] #> [1,] 0.06138987 -0.1762942 -0.06861293 0.09199873 -0.1863477 -0.1009583 #>         [,3707]    [,3708]   [,3709]    [,3710]    [,3711]   [,3712] #> [1,] -0.1718259 -0.3793315 0.2379095 -0.1912654 -0.3767384 0.2771498 #>          [,3713]    [,3714]     [,3715]   [,3716]    [,3717]    [,3718] #> [1,] -0.05411499 -0.2322539 0.005686329 0.1044717 0.03532869 -0.1047557 #>         [,3719]    [,3720]     [,3721]    [,3722]  [,3723]   [,3724]   [,3725] #> [1,] -0.1813261 -0.1821175 -0.09597251 -0.3985803 0.209533 0.1944296 -0.275798 #>         [,3726]    [,3727]   [,3728]    [,3729]   [,3730]    [,3731]    [,3732] #> [1,] -0.2217368 -0.4153777 0.1036663 -0.4401908 0.1416325 -0.4552255 -0.2420753 #>         [,3733]     [,3734]    [,3735]    [,3736]    [,3737]  [,3738] #> [1,] -0.2167934 -0.03614158 0.05969028 -0.2418207 0.08265845 0.192877 #>         [,3739]    [,3740]    [,3741]    [,3742]     [,3743]   [,3744] #> [1,] -0.3071871 0.06095798 -0.5535338 -0.3638129 0.003256491 0.4621595 #>        [,3745]     [,3746]   [,3747]     [,3748]     [,3749]     [,3750] #> [1,] 0.3932632 -0.07974901 -0.263715 -0.01187531 -0.07036352 -0.04587029 #>         [,3751]    [,3752]    [,3753]    [,3754]     [,3755]   [,3756]  [,3757] #> [1,] -0.4926636 -0.6157405 -0.1468168 -0.1117097 -0.07419152 0.2185045 -0.15919 #>          [,3758]   [,3759]   [,3760]    [,3761]   [,3762]     [,3763]   [,3764] #> [1,] -0.07052332 0.1433533 0.1213892 -0.2622934 -0.151298 -0.08915402 0.3555558 #>          [,3765]    [,3766]   [,3767]    [,3768]   [,3769]    [,3770] #> [1,] 0.009038692 0.04432023 0.3849133 -0.2859647 -0.146428 -0.3588903 #>         [,3771]      [,3772]     [,3773]   [,3774]   [,3775]    [,3776] #> [1,] -0.3918958 -0.003104419 -0.06170065 0.3582157 0.1200867 -0.4650193 #>         [,3777]    [,3778]     [,3779]   [,3780]   [,3781]    [,3782] #> [1,] 0.08054428 -0.4191071 -0.06389173 0.4321853 0.1254905 -0.5187553 #>         [,3783]   [,3784]    [,3785]     [,3786]    [,3787]    [,3788] #> [1,] -0.3864844 0.2587946 -0.1401163 -0.08878996 -0.1144783 -0.2205425 #>        [,3789]    [,3790]     [,3791]    [,3792]   [,3793]    [,3794] #> [1,] 0.5037164 -0.1221382 -0.04594134 0.05809341 0.1875423 -0.1081984 #>         [,3795]    [,3796]    [,3797]    [,3798]   [,3799]    [,3800] #> [1,] -0.3788905 -0.2526483 0.02193135 -0.4647756 -0.131698 -0.1010325 #>         [,3801]    [,3802]      [,3803]   [,3804]   [,3805]    [,3806] #> [1,] -0.4028407 -0.1639799 -0.008545882 0.3708243 0.2340688 -0.6565575 #>          [,3807]   [,3808]   [,3809]    [,3810]    [,3811]    [,3812]   [,3813] #> [1,] -0.06535361 0.3640992 0.1887997 0.07517012 -0.1638933 -0.1099059 0.1601615 #>         [,3814]    [,3815]    [,3816]   [,3817]    [,3818]    [,3819] #> [1,] -0.1650575 -0.4946321 -0.3152353 0.1544268 -0.3676613 -0.6253502 #>         [,3820]    [,3821]     [,3822]    [,3823]    [,3824]    [,3825] #> [1,] -0.3928845 -0.5997836 -0.04285328 -0.1971558 -0.3148301 -0.2537342 #>         [,3826]   [,3827]    [,3828]    [,3829]    [,3830]    [,3831]   [,3832] #> [1,] 0.02571695 0.1398578 0.04866928 -0.4874131 -0.4611295 -0.3028173 0.1792249 #>            [,3833]   [,3834]    [,3835]   [,3836]    [,3837]     [,3838] #> [1,] -0.0006409092 0.2795118 -0.2851152 0.1533073 0.01858286 -0.01977485 #>         [,3839]    [,3840]    [,3841]    [,3842]    [,3843]   [,3844] #> [1,] -0.3468126 -0.1599173 -0.2257592 -0.1435366 0.09643061 0.3247656 #>         [,3845]   [,3846]    [,3847]     [,3848]    [,3849]    [,3850] #> [1,] -0.1891099 0.1067929 0.04624013 -0.06992488 -0.0380355 0.08836928 #>         [,3851]     [,3852]     [,3853]    [,3854]    [,3855]     [,3856] #> [1,] 0.09139246 -0.03134406 -0.09263415 -0.6061906 -0.8225112 -0.08660149 #>         [,3857]    [,3858]    [,3859]    [,3860]     [,3861]     [,3862] #> [1,] -0.4320362 -0.3301826 -0.4060687 -0.2137112 -0.07750347 -0.05841791 #>          [,3863]    [,3864]    [,3865]     [,3866]  [,3867]    [,3868] #> [1,] -0.06766255 -0.1555448 -0.3467134 -0.05821681 -0.15677 -0.3172432 #>        [,3869]    [,3870]    [,3871]    [,3872]   [,3873]    [,3874]    [,3875] #> [1,] 0.1887568 -0.1610032 -0.1050786 0.07798528 0.1613455 0.02953226 -0.3410535 #>         [,3876]   [,3877]     [,3878]   [,3879]    [,3880]    [,3881] #> [1,] -0.2675008 0.6510419 -0.05081644 0.1205811 -0.1917142 -0.4561689 #>         [,3882]    [,3883]    [,3884]   [,3885]    [,3886]   [,3887] #> [1,] -0.4134941 0.03408433 -0.2594508 0.3451917 -0.2078743 0.2463078 #>          [,3888]    [,3889]    [,3890]    [,3891]    [,3892]     [,3893] #> [1,] -0.02695756 -0.3665944 -0.6055127 -0.1014546 -0.1469821 0.004595985 #>        [,3894]   [,3895]    [,3896]    [,3897]     [,3898]    [,3899] #> [1,] 0.5723151 0.2313237 0.04542903 0.06723155 -0.04065384 -0.3190817 #>         [,3900]   [,3901]    [,3902]    [,3903]     [,3904]    [,3905] #> [1,] -0.4090165 0.1213087 0.07439667 -0.3348821 -0.01194332 -0.3417951 #>          [,3906]   [,3907]   [,3908]    [,3909]    [,3910]   [,3911]    [,3912] #> [1,] -0.04567088 0.0402381 0.1022283 -0.2531116 0.04763809 0.1906434 -0.2402151 #>        [,3913]    [,3914]    [,3915]    [,3916]   [,3917]     [,3918] #> [1,] 0.2058128 -0.3648613 -0.1001429 0.03784051 -0.113568 -0.03767619 #>         [,3919]     [,3920]   [,3921]    [,3922]   [,3923]    [,3924] #> [1,] -0.4804108 -0.05285305 0.1051256 -0.5025808 0.2564552 -0.1790828 #>         [,3925]    [,3926]    [,3927]    [,3928]     [,3929]    [,3930] [,3931] #> [1,] -0.6142554 -0.2812891 -0.0206941 -0.3115547 -0.09091101 -0.1253268 0.33481 #>         [,3932]     [,3933]    [,3934]     [,3935]    [,3936]    [,3937] #> [1,] -0.3990543 0.004768401 -0.6481313 -0.03280727 -0.1892557 -0.1188277 #>         [,3938]   [,3939]     [,3940]    [,3941]   [,3942]   [,3943]    [,3944] #> [1,] -0.6415606 0.3712072 -0.03396157 -0.1990215 0.3368491 0.1232822 -0.4964264 #>         [,3945]     [,3946]     [,3947]   [,3948]    [,3949]     [,3950] #> [1,] -0.4283127 -0.06354643 -0.01100725 0.2225701 -0.2699482 -0.03744097 #>         [,3951]    [,3952]    [,3953]    [,3954]  [,3955]    [,3956]    [,3957] #> [1,] -0.1119297 -0.4120304 -0.2614322 -0.1199117 0.074193 -0.1141286 -0.4832961 #>         [,3958]    [,3959]   [,3960]   [,3961]     [,3962]    [,3963] #> [1,] -0.3971025 0.07217752 0.1670159 0.2301305 -0.08625766 -0.1282563 #>         [,3964]    [,3965]    [,3966]    [,3967]    [,3968]    [,3969] #> [1,] -0.3998376 -0.2173531 -0.3737829 0.04651275 -0.2524228 -0.3588921 #>        [,3970]   [,3971]    [,3972]   [,3973]    [,3974]   [,3975]     [,3976] #> [1,] 0.0203483 0.1939135 -0.2112701 -0.106092 -0.6245187 0.1111461 -0.06569896 #>         [,3977]   [,3978]    [,3979]    [,3980]    [,3981]     [,3982] #> [1,] -0.5115648 0.3551329 -0.6556992 -0.7956697 -0.1607308 -0.09569475 #>         [,3983]     [,3984]    [,3985] [,3986]   [,3987]    [,3988]    [,3989] #> [1,] 0.09546397 0.001817251 -0.1706689 0.14101 0.1757014 -0.2940325 0.08630111 #>        [,3990]    [,3991]    [,3992]   [,3993]      [,3994]    [,3995] #> [1,] 0.2028819 -0.1282296 -0.1837128 0.2510335 -0.001573071 0.06252318 #>         [,3996]    [,3997]    [,3998]    [,3999]      [,4000] #> [1,] -0.3106905 -0.2207905 -0.2883388 -0.4833691 -0.007698623 # }"},{"path":"/reference/query_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate estimands dataframe — query_model","title":"Generate estimands dataframe — query_model","text":"Calculated parameter vector, prior posterior distribution","code":""},{"path":"/reference/query_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate estimands dataframe — query_model","text":"","code":"query_model(   model,   queries = NULL,   given = NULL,   using = list(\"parameters\"),   parameters = NULL,   stats = NULL,   n_draws = 4000,   expand_grid = FALSE,   case_level = FALSE,   query = NULL )"},{"path":"/reference/query_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate estimands dataframe — query_model","text":"model causal_model. model object generated make_model. queries vector characters. Query potential outcomes \"Y[X=1] - Y[X=0]\". given character. quoted expression evaluates logical statement. Allows estimand conditioned *observational* (counterfactual) distribution. using character. Whether use priors, posteriors parameters. parameters vector real numbers [0,1]. Values parameters specify (optional). default, parameters drawn model$parameters_df. stats Functions applied estimand distribution. NULL, defaults mean, standard deviation, 95% confidence interval. n_draws integer. Number draws. expand_grid Logical. TRUE combinations provided lists examined. list cycled separately. Defaults FALSE. case_level Logical. TRUE estimates probability query case. query alias queries","code":""},{"path":"/reference/query_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate estimands dataframe — query_model","text":"data.frame columns Query, Given Using defined corresponding input values. columns generated specified stats.","code":""},{"path":"/reference/query_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate estimands dataframe — query_model","text":"","code":"model <- make_model(\"X -> Y\") %>% set_prior_distribution(n_draws = 10000)  # \\donttest{ estimands_df <-query_model(                model,                query = list(ATE = \"Y[X=1] - Y[X=0]\", Share_positive = \"Y[X=1] > Y[X=0]\"),                using = c(\"parameters\", \"priors\"),                expand_grid = TRUE)  estimands_df <-query_model(                model,                query = list(ATE = \"Y[X=1] - Y[X=0]\", Share_positive = \"Y[X=1] > Y[X=0]\"),                using = c(\"parameters\", \"priors\"),                expand_grid = FALSE)  estimands_df <- query_model(                 model,                 using = list( \"parameters\", \"priors\"),                 query = list(ATE = \"Y[X=1] - Y[X=0]\", Is_B = \"Y[X=1] > Y[X=0]\"),                 given = list(TRUE,  \"Y==0 & X==1\"),                 expand_grid = TRUE)  # An example: a stat representing uncertainty of token causation token_var <- function(x) mean(x)*(1-mean(x)) estimands_df <- query_model(                 model,                 using = list( \"parameters\", \"priors\"),                 query = \"Y[X=1] > Y[X=0]\",                 stats = c(mean = mean, sd = sd, token_var = token_var)) # }"},{"path":"/reference/query_to_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to turn query into a data expression — query_to_expression","title":"Helper to turn query into a data expression — query_to_expression","text":"Helper turn query data expression","code":""},{"path":"/reference/query_to_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to turn query into a data expression — query_to_expression","text":"","code":"query_to_expression(query, node)"},{"path":"/reference/query_to_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to turn query into a data expression — query_to_expression","text":"query character string. expression defining nodal types interrogate realise_outcomes node character string. quoted name node.","code":""},{"path":"/reference/query_to_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to turn query into a data expression — query_to_expression","text":"cleaned query expression","code":""},{"path":"/reference/realise_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Realise outcomes — realise_outcomes","title":"Realise outcomes — realise_outcomes","text":"Realise outcomes causal types. Calculated sequentially calculating endogenous nodes. operator applied node takes given value descendants generated accordingly.","code":""},{"path":"/reference/realise_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Realise outcomes — realise_outcomes","text":"","code":"realise_outcomes(model, dos = NULL, node = NULL, add_rownames = TRUE)"},{"path":"/reference/realise_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Realise outcomes — realise_outcomes","text":"model causal_model. model object generated make_model. dos named list. actions defining node values, e.g., list(X = 0, M = 1). node character. optional quoted name node whose outcome revealed. specified values parents need specified via dos. add_rownames logical indicating whether add causal types rownmaes ouput","code":""},{"path":"/reference/realise_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Realise outcomes — realise_outcomes","text":"data.frame object revealed data node (columns) given causal / nodal type (rows) .","code":""},{"path":"/reference/realise_outcomes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Realise outcomes — realise_outcomes","text":"realise_outcomes starts creating types (via get_nodal_types). takes types endogenous reveals outcome based value parents took. Exogenous nodes outcomes correspond type.","code":""},{"path":"/reference/realise_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Realise outcomes — realise_outcomes","text":"","code":"# \\donttest{ model <- make_model(\"X -> Y\") realise_outcomes(model) #>      X Y #> 0.00 0 0 #> 1.00 1 0 #> 0.10 0 1 #> 1.10 1 0 #> 0.01 0 0 #> 1.01 1 1 #> 0.11 0 1 #> 1.11 1 1  model <- make_model(\"X1->Y;X2->M;M->Y\") realise_outcomes(model, dos = list(X1 = 1, M = 0)) #>             X1 X2 M Y #> 0.0.00.0000  1  0 0 0 #> 1.0.00.0000  1  0 0 0 #> 0.1.00.0000  1  1 0 0 #> 1.1.00.0000  1  1 0 0 #> 0.0.10.0000  1  0 0 0 #> 1.0.10.0000  1  0 0 0 #> 0.1.10.0000  1  1 0 0 #> 1.1.10.0000  1  1 0 0 #> 0.0.01.0000  1  0 0 0 #> 1.0.01.0000  1  0 0 0 #> 0.1.01.0000  1  1 0 0 #> 1.1.01.0000  1  1 0 0 #> 0.0.11.0000  1  0 0 0 #> 1.0.11.0000  1  0 0 0 #> 0.1.11.0000  1  1 0 0 #> 1.1.11.0000  1  1 0 0 #> 0.0.00.1000  1  0 0 0 #> 1.0.00.1000  1  0 0 0 #> 0.1.00.1000  1  1 0 0 #> 1.1.00.1000  1  1 0 0 #> 0.0.10.1000  1  0 0 0 #> 1.0.10.1000  1  0 0 0 #> 0.1.10.1000  1  1 0 0 #> 1.1.10.1000  1  1 0 0 #> 0.0.01.1000  1  0 0 0 #> 1.0.01.1000  1  0 0 0 #> 0.1.01.1000  1  1 0 0 #> 1.1.01.1000  1  1 0 0 #> 0.0.11.1000  1  0 0 0 #> 1.0.11.1000  1  0 0 0 #> 0.1.11.1000  1  1 0 0 #> 1.1.11.1000  1  1 0 0 #> 0.0.00.0100  1  0 0 1 #> 1.0.00.0100  1  0 0 1 #> 0.1.00.0100  1  1 0 1 #> 1.1.00.0100  1  1 0 1 #> 0.0.10.0100  1  0 0 1 #> 1.0.10.0100  1  0 0 1 #> 0.1.10.0100  1  1 0 1 #> 1.1.10.0100  1  1 0 1 #> 0.0.01.0100  1  0 0 1 #> 1.0.01.0100  1  0 0 1 #> 0.1.01.0100  1  1 0 1 #> 1.1.01.0100  1  1 0 1 #> 0.0.11.0100  1  0 0 1 #> 1.0.11.0100  1  0 0 1 #> 0.1.11.0100  1  1 0 1 #> 1.1.11.0100  1  1 0 1 #> 0.0.00.1100  1  0 0 1 #> 1.0.00.1100  1  0 0 1 #> 0.1.00.1100  1  1 0 1 #> 1.1.00.1100  1  1 0 1 #> 0.0.10.1100  1  0 0 1 #> 1.0.10.1100  1  0 0 1 #> 0.1.10.1100  1  1 0 1 #> 1.1.10.1100  1  1 0 1 #> 0.0.01.1100  1  0 0 1 #> 1.0.01.1100  1  0 0 1 #> 0.1.01.1100  1  1 0 1 #> 1.1.01.1100  1  1 0 1 #> 0.0.11.1100  1  0 0 1 #> 1.0.11.1100  1  0 0 1 #> 0.1.11.1100  1  1 0 1 #> 1.1.11.1100  1  1 0 1 #> 0.0.00.0010  1  0 0 0 #> 1.0.00.0010  1  0 0 0 #> 0.1.00.0010  1  1 0 0 #> 1.1.00.0010  1  1 0 0 #> 0.0.10.0010  1  0 0 0 #> 1.0.10.0010  1  0 0 0 #> 0.1.10.0010  1  1 0 0 #> 1.1.10.0010  1  1 0 0 #> 0.0.01.0010  1  0 0 0 #> 1.0.01.0010  1  0 0 0 #> 0.1.01.0010  1  1 0 0 #> 1.1.01.0010  1  1 0 0 #> 0.0.11.0010  1  0 0 0 #> 1.0.11.0010  1  0 0 0 #> 0.1.11.0010  1  1 0 0 #> 1.1.11.0010  1  1 0 0 #> 0.0.00.1010  1  0 0 0 #> 1.0.00.1010  1  0 0 0 #> 0.1.00.1010  1  1 0 0 #> 1.1.00.1010  1  1 0 0 #> 0.0.10.1010  1  0 0 0 #> 1.0.10.1010  1  0 0 0 #> 0.1.10.1010  1  1 0 0 #> 1.1.10.1010  1  1 0 0 #> 0.0.01.1010  1  0 0 0 #> 1.0.01.1010  1  0 0 0 #> 0.1.01.1010  1  1 0 0 #> 1.1.01.1010  1  1 0 0 #> 0.0.11.1010  1  0 0 0 #> 1.0.11.1010  1  0 0 0 #> 0.1.11.1010  1  1 0 0 #> 1.1.11.1010  1  1 0 0 #> 0.0.00.0110  1  0 0 1 #> 1.0.00.0110  1  0 0 1 #> 0.1.00.0110  1  1 0 1 #> 1.1.00.0110  1  1 0 1 #> 0.0.10.0110  1  0 0 1 #> 1.0.10.0110  1  0 0 1 #> 0.1.10.0110  1  1 0 1 #> 1.1.10.0110  1  1 0 1 #> 0.0.01.0110  1  0 0 1 #> 1.0.01.0110  1  0 0 1 #> 0.1.01.0110  1  1 0 1 #> 1.1.01.0110  1  1 0 1 #> 0.0.11.0110  1  0 0 1 #> 1.0.11.0110  1  0 0 1 #> 0.1.11.0110  1  1 0 1 #> 1.1.11.0110  1  1 0 1 #> 0.0.00.1110  1  0 0 1 #> 1.0.00.1110  1  0 0 1 #> 0.1.00.1110  1  1 0 1 #> 1.1.00.1110  1  1 0 1 #> 0.0.10.1110  1  0 0 1 #> 1.0.10.1110  1  0 0 1 #> 0.1.10.1110  1  1 0 1 #> 1.1.10.1110  1  1 0 1 #> 0.0.01.1110  1  0 0 1 #> 1.0.01.1110  1  0 0 1 #> 0.1.01.1110  1  1 0 1 #> 1.1.01.1110  1  1 0 1 #> 0.0.11.1110  1  0 0 1 #> 1.0.11.1110  1  0 0 1 #> 0.1.11.1110  1  1 0 1 #> 1.1.11.1110  1  1 0 1 #> 0.0.00.0001  1  0 0 0 #> 1.0.00.0001  1  0 0 0 #> 0.1.00.0001  1  1 0 0 #> 1.1.00.0001  1  1 0 0 #> 0.0.10.0001  1  0 0 0 #> 1.0.10.0001  1  0 0 0 #> 0.1.10.0001  1  1 0 0 #> 1.1.10.0001  1  1 0 0 #> 0.0.01.0001  1  0 0 0 #> 1.0.01.0001  1  0 0 0 #> 0.1.01.0001  1  1 0 0 #> 1.1.01.0001  1  1 0 0 #> 0.0.11.0001  1  0 0 0 #> 1.0.11.0001  1  0 0 0 #> 0.1.11.0001  1  1 0 0 #> 1.1.11.0001  1  1 0 0 #> 0.0.00.1001  1  0 0 0 #> 1.0.00.1001  1  0 0 0 #> 0.1.00.1001  1  1 0 0 #> 1.1.00.1001  1  1 0 0 #> 0.0.10.1001  1  0 0 0 #> 1.0.10.1001  1  0 0 0 #> 0.1.10.1001  1  1 0 0 #> 1.1.10.1001  1  1 0 0 #> 0.0.01.1001  1  0 0 0 #> 1.0.01.1001  1  0 0 0 #> 0.1.01.1001  1  1 0 0 #> 1.1.01.1001  1  1 0 0 #> 0.0.11.1001  1  0 0 0 #> 1.0.11.1001  1  0 0 0 #> 0.1.11.1001  1  1 0 0 #> 1.1.11.1001  1  1 0 0 #> 0.0.00.0101  1  0 0 1 #> 1.0.00.0101  1  0 0 1 #> 0.1.00.0101  1  1 0 1 #> 1.1.00.0101  1  1 0 1 #> 0.0.10.0101  1  0 0 1 #> 1.0.10.0101  1  0 0 1 #> 0.1.10.0101  1  1 0 1 #> 1.1.10.0101  1  1 0 1 #> 0.0.01.0101  1  0 0 1 #> 1.0.01.0101  1  0 0 1 #> 0.1.01.0101  1  1 0 1 #> 1.1.01.0101  1  1 0 1 #> 0.0.11.0101  1  0 0 1 #> 1.0.11.0101  1  0 0 1 #> 0.1.11.0101  1  1 0 1 #> 1.1.11.0101  1  1 0 1 #> 0.0.00.1101  1  0 0 1 #> 1.0.00.1101  1  0 0 1 #> 0.1.00.1101  1  1 0 1 #> 1.1.00.1101  1  1 0 1 #> 0.0.10.1101  1  0 0 1 #> 1.0.10.1101  1  0 0 1 #> 0.1.10.1101  1  1 0 1 #> 1.1.10.1101  1  1 0 1 #> 0.0.01.1101  1  0 0 1 #> 1.0.01.1101  1  0 0 1 #> 0.1.01.1101  1  1 0 1 #> 1.1.01.1101  1  1 0 1 #> 0.0.11.1101  1  0 0 1 #> 1.0.11.1101  1  0 0 1 #> 0.1.11.1101  1  1 0 1 #> 1.1.11.1101  1  1 0 1 #> 0.0.00.0011  1  0 0 0 #> 1.0.00.0011  1  0 0 0 #> 0.1.00.0011  1  1 0 0 #> 1.1.00.0011  1  1 0 0 #> 0.0.10.0011  1  0 0 0 #> 1.0.10.0011  1  0 0 0 #> 0.1.10.0011  1  1 0 0 #> 1.1.10.0011  1  1 0 0 #> 0.0.01.0011  1  0 0 0 #> 1.0.01.0011  1  0 0 0 #> 0.1.01.0011  1  1 0 0 #> 1.1.01.0011  1  1 0 0 #> 0.0.11.0011  1  0 0 0 #> 1.0.11.0011  1  0 0 0 #> 0.1.11.0011  1  1 0 0 #> 1.1.11.0011  1  1 0 0 #> 0.0.00.1011  1  0 0 0 #> 1.0.00.1011  1  0 0 0 #> 0.1.00.1011  1  1 0 0 #> 1.1.00.1011  1  1 0 0 #> 0.0.10.1011  1  0 0 0 #> 1.0.10.1011  1  0 0 0 #> 0.1.10.1011  1  1 0 0 #> 1.1.10.1011  1  1 0 0 #> 0.0.01.1011  1  0 0 0 #> 1.0.01.1011  1  0 0 0 #> 0.1.01.1011  1  1 0 0 #> 1.1.01.1011  1  1 0 0 #> 0.0.11.1011  1  0 0 0 #> 1.0.11.1011  1  0 0 0 #> 0.1.11.1011  1  1 0 0 #> 1.1.11.1011  1  1 0 0 #> 0.0.00.0111  1  0 0 1 #> 1.0.00.0111  1  0 0 1 #> 0.1.00.0111  1  1 0 1 #> 1.1.00.0111  1  1 0 1 #> 0.0.10.0111  1  0 0 1 #> 1.0.10.0111  1  0 0 1 #> 0.1.10.0111  1  1 0 1 #> 1.1.10.0111  1  1 0 1 #> 0.0.01.0111  1  0 0 1 #> 1.0.01.0111  1  0 0 1 #> 0.1.01.0111  1  1 0 1 #> 1.1.01.0111  1  1 0 1 #> 0.0.11.0111  1  0 0 1 #> 1.0.11.0111  1  0 0 1 #> 0.1.11.0111  1  1 0 1 #> 1.1.11.0111  1  1 0 1 #> 0.0.00.1111  1  0 0 1 #> 1.0.00.1111  1  0 0 1 #> 0.1.00.1111  1  1 0 1 #> 1.1.00.1111  1  1 0 1 #> 0.0.10.1111  1  0 0 1 #> 1.0.10.1111  1  0 0 1 #> 0.1.10.1111  1  1 0 1 #> 1.1.10.1111  1  1 0 1 #> 0.0.01.1111  1  0 0 1 #> 1.0.01.1111  1  0 0 1 #> 0.1.01.1111  1  1 0 1 #> 1.1.01.1111  1  1 0 1 #> 0.0.11.1111  1  0 0 1 #> 1.0.11.1111  1  0 0 1 #> 0.1.11.1111  1  1 0 1 #> 1.1.11.1111  1  1 0 1  model <- make_model(\"X->M->Y\") realise_outcomes(model, dos = list(M = 1), node = \"Y\") #>    M Y #> 00 1 0 #> 10 1 0 #> 01 1 1 #> 11 1 1 # }"},{"path":"/reference/realise_outcome_c.html","id":null,"dir":"Reference","previous_headings":"","what":"generates realized outcomes for all causal types by sequentially calculating endogenous nodes. — realise_outcome_c","title":"generates realized outcomes for all causal types by sequentially calculating endogenous nodes. — realise_outcome_c","text":"generates realized outcomes causal types sequentially calculating endogenous nodes.","code":""},{"path":"/reference/realise_outcome_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generates realized outcomes for all causal types by sequentially calculating endogenous nodes. — realise_outcome_c","text":"","code":"realise_outcome_c(   d,   endogenous_nodes,   parents_list,   nodal_types_collapsed,   nodal_types )"},{"path":"/reference/realise_outcome_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generates realized outcomes for all causal types by sequentially calculating endogenous nodes. — realise_outcome_c","text":"d data.frame causal types passed within realise_outcomes endogenous_nodes character vector names endogenous nodes parents_list list parents nodes node nodal_types_collapsed list collapsed nodal types nodal_types list uncolpased nodal types","code":""},{"path":"/reference/realise_outcome_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generates realized outcomes for all causal types by sequentially calculating endogenous nodes. — realise_outcome_c","text":"data.frame realized outcomes causal type","code":""},{"path":"/reference/restrict_by_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce nodal types using labels — restrict_by_labels","title":"Reduce nodal types using labels — restrict_by_labels","text":"Reduce nodal types using labels","code":""},{"path":"/reference/restrict_by_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce nodal types using labels — restrict_by_labels","text":"","code":"restrict_by_labels(model, labels, given = NULL, keep = FALSE, wildcard = FALSE)"},{"path":"/reference/restrict_by_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce nodal types using labels — restrict_by_labels","text":"model causal_model. model object generated make_model. labels list character vectors specifying nodal types kept removed model. given character vector list character vectors specifying nodes parameter set restricted depends. mixing labels restricted given ones , labels without given restrictions given specified one NULL, NA, \"\" \" \". keep Logical. `FALSE`, removes `TRUE` keeps causal types specified restriction.","code":""},{"path":"/reference/restrict_by_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce nodal types using labels — restrict_by_labels","text":"list two components: 1. vector parameters names parameters implicated restrictions, 2. vector subsetting instructions used identify implicated causal types","code":""},{"path":[]},{"path":"/reference/restrict_by_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce nodal types using statement — restrict_by_query","title":"Reduce nodal types using statement — restrict_by_query","text":"Reduce nodal types using statement","code":""},{"path":"/reference/restrict_by_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce nodal types using statement — restrict_by_query","text":"","code":"restrict_by_query(model, statement, join_by = \"|\", given = NULL, keep = FALSE)"},{"path":"/reference/restrict_by_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce nodal types using statement — restrict_by_query","text":"model model created make_model() statement list character vectors specifying nodal types removed model. Use get_nodal_types see syntax. join_by string list strings. logical operator joining expanded types statement contains wildcard (.). Can take values '&' (logical ) '|' (logical ). restriction contains wildcard (.) join_by specified, defaults '|', otherwise defaults NULL. given character vector list character vectors specifying nodes parameter set restricted depends. given must either NULL length statement. mixing statements restricted given ones , statements without given restrictions given specified one NULL, NA, \"\" \" \". keep Logical. `FALSE`, removes `TRUE` keeps causal types specified restriction.","code":""},{"path":"/reference/restrict_by_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce nodal types using statement — restrict_by_query","text":"list two components: 1. vector parameters names parameters implicated restrictions, 2. vector subsetting instructions used identify implicated causal types","code":""},{"path":[]},{"path":"/reference/reveal_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Reveal outcomes — reveal_outcomes","title":"Reveal outcomes — reveal_outcomes","text":"`r lifecycle::badge(\"deprecated\")` function deprecated name causes clashes DeclareDesign. Use realise_outcomes instead.","code":""},{"path":"/reference/reveal_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reveal outcomes — reveal_outcomes","text":"","code":"reveal_outcomes(model, dos = NULL, node = NULL)"},{"path":"/reference/set_ambiguities_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Set ambiguity matrix — set_ambiguities_matrix","title":"Set ambiguity matrix — set_ambiguities_matrix","text":"Add ambiguities matrix model","code":""},{"path":"/reference/set_ambiguities_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set ambiguity matrix — set_ambiguities_matrix","text":"","code":"set_ambiguities_matrix(model, A = NULL)"},{"path":"/reference/set_ambiguities_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set ambiguity matrix — set_ambiguities_matrix","text":"model causal_model. model object generated make_model. data.frame. Ambiguity matrix. required may provided avoid repeated computation simulations.","code":""},{"path":"/reference/set_ambiguities_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set ambiguity matrix — set_ambiguities_matrix","text":"object type causal_model ambiguities matrix attached","code":""},{"path":"/reference/set_ambiguities_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set ambiguity matrix — set_ambiguities_matrix","text":"","code":"model <- make_model('X -> Y') %>%          set_ambiguities_matrix() model$A #>       X0Y0 X1Y0 X0Y1 X1Y1 #> X0Y00    1    0    0    0 #> X1Y00    0    1    0    0 #> X0Y10    0    0    1    0 #> X1Y10    0    1    0    0 #> X0Y01    1    0    0    0 #> X1Y01    0    0    0    1 #> X0Y11    0    0    1    0 #> X1Y11    0    0    0    1 #> attr(,\"class\") #> [1] \"ambiguities_matrix\""},{"path":"/reference/set_confound.html","id":null,"dir":"Reference","previous_headings":"","what":"Set confound — set_confound","title":"Set confound — set_confound","text":"Adjust parameter matrix allow confounding.","code":""},{"path":"/reference/set_confound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set confound — set_confound","text":"","code":"set_confound(model, confound = NULL)"},{"path":"/reference/set_confound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set confound — set_confound","text":"model causal_model. model object generated make_model. confound list statements indicating pairs nodes whose types jointly distributed (e.g. list(\"<-> B\", \"C <-> D\")).","code":""},{"path":"/reference/set_confound.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set confound — set_confound","text":"object class causal_model updated parameters_df parameter matrix.","code":""},{"path":"/reference/set_confound.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set confound — set_confound","text":"Confounding X Y arises nodal types X Y independently distributed. X -> Y graph, instance, 2 nodal types X 4 Y. thus 8 joint nodal types: table 8 interior elements unconstrained joint distribution 7 degrees freedom. confounding assumption means Pr(t^X | t^Y) = Pr(t^X),  Pr(t^X, t^Y) = Pr(t^X)Pr(t^Y). case 3 degrees freedom Y 1 X, totaling 4 rather 7. set_confounds lets relax assumption increasing number parameters characterizing joint distribution. Using fact P(,B) = P()P(B|) new parameters introduced capture P(B|=) rather simply P(B). instance two parameters (one degree freedom) govern distribution types X  four parameters (3 degrees freedom) govern  types Y given type X total 1+3+3 = 7 degress freedom.","code":"|          | t^X                |                    |           | |-----|----|--------------------|--------------------|-----------| |     |    | 0                  | 1                  | Sum       | |-----|----|--------------------|--------------------|-----------| | t^Y | 00 | Pr(t^X=0 & t^Y=00) | Pr(t^X=1 & t^Y=00) | Pr(t^Y=00)| |     | 10 | .                  | .                  | .         | |     | 01 | .                  | .                  | .         | |     | 11 | .                  | .                  | .         | |-----|----|--------------------|--------------------|-----------| |     |Sum | Pr(t^X=0)          | Pr(t^X=1)          | 1         |"},{"path":"/reference/set_confound.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set confound — set_confound","text":"","code":"make_model('X -> Y; X <-> Y') %>% get_parameters() #>      X.0      X.1 Y.00_X.0 Y.10_X.0 Y.01_X.0 Y.11_X.0 Y.00_X.1 Y.10_X.1  #>     0.50     0.50     0.25     0.25     0.25     0.25     0.25     0.25  #> Y.01_X.1 Y.11_X.1  #>     0.25     0.25   make_model('X -> M -> Y; X <-> Y') %>% get_parameters() #>      X.0      X.1     M.00     M.10     M.01     M.11 Y.00_X.0 Y.10_X.0  #>     0.50     0.50     0.25     0.25     0.25     0.25     0.25     0.25  #> Y.01_X.0 Y.11_X.0 Y.00_X.1 Y.10_X.1 Y.01_X.1 Y.11_X.1  #>     0.25     0.25     0.25     0.25     0.25     0.25   model <- make_model('X -> M -> Y; X <-> Y; M <-> Y') model$parameters_df #> # A tibble: 38 × 8 #>    param_names   node    gen param_set  nodal_type given      param_value priors #>    <chr>         <chr> <int> <chr>      <chr>      <chr>            <dbl>  <dbl> #>  1 X.0           X         1 X          0          \"\"                0.5       1 #>  2 X.1           X         1 X          1          \"\"                0.5       1 #>  3 M.00          M         2 M          00         \"\"                0.25      1 #>  4 M.10          M         2 M          10         \"\"                0.25      1 #>  5 M.01          M         2 M          01         \"\"                0.25      1 #>  6 M.11          M         2 M          11         \"\"                0.25      1 #>  7 Y.00_M.00_X.0 Y         3 Y.M.00.X.0 00         \"M.00, X.…        0.25      1 #>  8 Y.10_M.00_X.0 Y         3 Y.M.00.X.0 10         \"M.00, X.…        0.25      1 #>  9 Y.01_M.00_X.0 Y         3 Y.M.00.X.0 01         \"M.00, X.…        0.25      1 #> 10 Y.11_M.00_X.0 Y         3 Y.M.00.X.0 11         \"M.00, X.…        0.25      1 #> # ℹ 28 more rows  # Example where set_confound is implemented after restrictions make_model(\"A -> B -> C\") %>% set_restrictions(increasing(\"A\", \"B\")) %>% set_confound(\"B <-> C\") %>% get_parameters() #>       A.0       A.1      B.00      B.10      B.11 C.00_B.00 C.10_B.00 C.01_B.00  #> 0.5000000 0.5000000 0.3333333 0.3333333 0.3333333 0.2500000 0.2500000 0.2500000  #> C.11_B.00 C.00_B.10 C.10_B.10 C.01_B.10 C.11_B.10 C.00_B.11 C.10_B.11 C.01_B.11  #> 0.2500000 0.2500000 0.2500000 0.2500000 0.2500000 0.2500000 0.2500000 0.2500000  #> C.11_B.11  #> 0.2500000   # Example where two parents are confounded make_model('A -> B <- C; A <-> C') %>%   set_parameters(node = \"C\", c(0.05, .95, .95, 0.05)) %>%   make_data(n = 50) %>%   cor() #>            A          C          B #> A  1.0000000 -0.9607689 -0.2375268 #> C -0.9607689  1.0000000  0.2060214 #> B -0.2375268  0.2060214  1.0000000   # Example with two confounds, added sequentially model <- make_model('A -> B -> C') %>%   set_confound(list(\"A <-> B\", \"B <-> C\")) model$statement #> [1] \"A -> B -> C ; B <-> A ; C <-> B\" # plot(model)"},{"path":"/reference/set_parameter_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter matrix — set_parameter_matrix","title":"Set parameter matrix — set_parameter_matrix","text":"Add parameter matrix model","code":""},{"path":"/reference/set_parameter_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set parameter matrix — set_parameter_matrix","text":"","code":"set_parameter_matrix(model, P = NULL)"},{"path":"/reference/set_parameter_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter matrix — set_parameter_matrix","text":"model causal_model. model object generated make_model. P data.frame. Parameter matrix. required may provided avoid repeated computation simulations.","code":""},{"path":"/reference/set_parameter_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter matrix — set_parameter_matrix","text":"object class causal_model. essentially returns list containing elements comprising model (e.g. 'statement', 'nodal_types' 'DAG') parameter matrix attached .","code":""},{"path":"/reference/set_parameter_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter matrix — set_parameter_matrix","text":"","code":"model <- make_model('X -> Y') P <- diag(8) colnames(P) <- rownames(model$causal_types) model <- set_parameter_matrix(model, P = P)"},{"path":"/reference/set_parmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parmap: a matrix mapping from parameters to data types — set_parmap","title":"Set parmap: a matrix mapping from parameters to data types — set_parmap","text":"Generates adds parmap model","code":""},{"path":"/reference/set_parmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set parmap: a matrix mapping from parameters to data types — set_parmap","text":"","code":"set_parmap(model)"},{"path":"/reference/set_parmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parmap: a matrix mapping from parameters to data types — set_parmap","text":"model causal_model. model object generated make_model.","code":""},{"path":"/reference/set_parmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parmap: a matrix mapping from parameters to data types — set_parmap","text":"matrix","code":""},{"path":"/reference/set_parmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parmap: a matrix mapping from parameters to data types — set_parmap","text":"","code":"set_parmap(model = make_model('X->Y')) #>  #> Statement:  #> [1] \"X->Y\" #>  #> DAG:  #>   parent children #> 1      X        Y #>  #>  ------------------------------------------------------------------------------------------ #>  #> Nodal types:  #> $X #> 0  1 #>  #>   node position display interpretation #> 1    X       NA      X0          X = 0 #> 2    X       NA      X1          X = 1 #>  #> $Y #> 00  10  01  11 #>  #>   node position display interpretation #> 1    Y        1   Y[*]*      Y | X = 0 #> 2    Y        2   Y*[*]      Y | X = 1 #>  #>  #> Number of types by node #> X Y  #> 2 4  #>  #> Number of unit types:  8"},{"path":"/reference/set_prior_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Add prior distribution draws — set_prior_distribution","title":"Add prior distribution draws — set_prior_distribution","text":"Add `n_param x n_draws` database possible lambda draws model.","code":""},{"path":"/reference/set_prior_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add prior distribution draws — set_prior_distribution","text":"","code":"set_prior_distribution(model, n_draws = 4000)"},{"path":"/reference/set_prior_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add prior distribution draws — set_prior_distribution","text":"model causal_model. model object generated make_model. n_draws scalar. Number draws.","code":""},{"path":"/reference/set_prior_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add prior distribution draws — set_prior_distribution","text":"object class causal_model. essentially returns list containing elements comprising model (e.g. 'statement', 'nodal_types' 'DAG') `prior_distribution` attached .","code":""},{"path":[]},{"path":"/reference/set_prior_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add prior distribution draws — set_prior_distribution","text":"","code":"make_model('X -> Y') %>% set_prior_distribution(n_draws = 5) %>% get_prior_distribution() #>             X.0         X.1       Y.00       Y.10       Y.01       Y.11 #> [1,] 0.99844044 0.001559555 0.19398833 0.03052372 0.43130973 0.34417822 #> [2,] 0.05030982 0.949690179 0.38844364 0.39453321 0.15367779 0.06334537 #> [3,] 0.23453728 0.765462719 0.09856926 0.68550928 0.15639586 0.05952560 #> [4,] 0.42184655 0.578153454 0.06345822 0.83716112 0.05105262 0.04832804 #> [5,] 0.29318536 0.706814637 0.10734108 0.19776436 0.53741582 0.15747874"},{"path":"/reference/set_restrictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Restrict a model — set_restrictions","title":"Restrict a model — set_restrictions","text":"Restrict model's parameter space. reduces number nodal types consequence number unit causal types.","code":""},{"path":"/reference/set_restrictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restrict a model — set_restrictions","text":"","code":"set_restrictions(   model,   statement = NULL,   join_by = \"|\",   labels = NULL,   param_names = NULL,   given = NULL,   keep = FALSE,   wildcard = FALSE )"},{"path":"/reference/set_restrictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restrict a model — set_restrictions","text":"model causal_model. model object generated make_model. statement quoted expressions defining restriction. values parents specified, statements surrounded parentheses, instance (Y[= 1] > Y[=0]) interpreted combinations parents Y set possible levels might take. join_by string. logical operator joining expanded types statement contains wildcard (.). Can take values '&' (logical ) '|' (logical ). restriction contains wildcard (.) join_by specified, defaults '|', otherwise defaults NULL. Note join_by joins within statements, across statements. labels list character vectors specifying nodal types kept removed model. Use get_nodal_types see syntax. Note labels gets overwritten statement statement NULL. param_names character vector names parameters restrict . given character vector list character vectors specifying nodes parameter set restricted depends. restricting statement, given must either NULL length statement. mixing statements restricted given ones , statements without given restrictions given specified one NULL, NA, \"\" \" \". keep Logical. `FALSE`, removes `TRUE` keeps causal types specified statement labels. wildcard Logical. `TRUE` allows use wildcards restriction string. Default `FALSE`.","code":""},{"path":"/reference/set_restrictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restrict a model — set_restrictions","text":"object class model. causal types nodal types model reduced according stated restriction.","code":""},{"path":"/reference/set_restrictions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Restrict a model — set_restrictions","text":"Restrictions made nodal types, unit causal types. Thus instance model X -> M -> Y, one apply simple restriction Y nondecreasing  X, however one can restrict M nondecreasing X Y nondecreasing M. restriction Y nondecreasing X otherwise require restrictions causal types, nodal types, implies form undeclared confounding (.e. cases M decreasing X, Y decreasing M). Since restrictions nodal types, parents node implicitly fixed.  Thus model make_model(`X -> Y <- W`) request set_restrictions(`(Y[X=1] == 0)`) interpreted set_restrictions(`(Y[X=1, W=0] == 0 | Y[X=1, W=1] == 0)`). Statements implicitly controlled nodes surrounded parentheses, examples. Note prior probabilities redistributed remaining types.","code":""},{"path":[]},{"path":"/reference/set_restrictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restrict a model — set_restrictions","text":"","code":"# 1. Restrict parameter space using statements model <- make_model('X->Y') %>%   set_restrictions(statement = c('X[] == 0'))  model <- make_model('X->Y') %>%   set_restrictions(non_increasing('X', 'Y'))  model <- make_model('X -> Y <- W') %>%   set_restrictions(c(decreasing('X', 'Y'), substitutes('X', 'W', 'Y')))  model$parameters_df #> # A tibble: 11 × 8 #>    param_names node    gen param_set nodal_type given param_value priors #>    <chr>       <chr> <int> <chr>     <chr>      <chr>       <dbl>  <dbl> #>  1 W.0         W         1 W         0          \"\"          0.5        1 #>  2 W.1         W         1 W         1          \"\"          0.5        1 #>  3 X.0         X         2 X         0          \"\"          0.5        1 #>  4 X.1         X         2 X         1          \"\"          0.5        1 #>  5 Y.0000      Y         3 Y         0000       \"\"          0.143      1 #>  6 Y.1010      Y         3 Y         1010       \"\"          0.143      1 #>  7 Y.0001      Y         3 Y         0001       \"\"          0.143      1 #>  8 Y.0101      Y         3 Y         0101       \"\"          0.143      1 #>  9 Y.0011      Y         3 Y         0011       \"\"          0.143      1 #> 10 Y.1011      Y         3 Y         1011       \"\"          0.143      1 #> 11 Y.1111      Y         3 Y         1111       \"\"          0.143      1  model <- make_model('X-> Y <- W') %>%   set_restrictions(statement = decreasing('X', 'Y')) model$parameters_df #> # A tibble: 13 × 8 #>    param_names node    gen param_set nodal_type given param_value priors #>    <chr>       <chr> <int> <chr>     <chr>      <chr>       <dbl>  <dbl> #>  1 W.0         W         1 W         0          \"\"          0.5        1 #>  2 W.1         W         1 W         1          \"\"          0.5        1 #>  3 X.0         X         2 X         0          \"\"          0.5        1 #>  4 X.1         X         2 X         1          \"\"          0.5        1 #>  5 Y.0000      Y         3 Y         0000       \"\"          0.111      1 #>  6 Y.0010      Y         3 Y         0010       \"\"          0.111      1 #>  7 Y.1010      Y         3 Y         1010       \"\"          0.111      1 #>  8 Y.0001      Y         3 Y         0001       \"\"          0.111      1 #>  9 Y.0101      Y         3 Y         0101       \"\"          0.111      1 #> 10 Y.0011      Y         3 Y         0011       \"\"          0.111      1 #> 11 Y.1011      Y         3 Y         1011       \"\"          0.111      1 #> 12 Y.0111      Y         3 Y         0111       \"\"          0.111      1 #> 13 Y.1111      Y         3 Y         1111       \"\"          0.111      1  model <- make_model('X->Y') %>%   set_restrictions(decreasing('X', 'Y')) model$parameters_df #> # A tibble: 5 × 8 #>   param_names node    gen param_set nodal_type given param_value priors #>   <chr>       <chr> <int> <chr>     <chr>      <chr>       <dbl>  <dbl> #> 1 X.0         X         1 X         0          \"\"          0.5        1 #> 2 X.1         X         1 X         1          \"\"          0.5        1 #> 3 Y.00        Y         2 Y         00         \"\"          0.333      1 #> 4 Y.01        Y         2 Y         01         \"\"          0.333      1 #> 5 Y.11        Y         2 Y         11         \"\"          0.333      1  model <- make_model('X->Y') %>%   set_restrictions(c(increasing('X', 'Y'), decreasing('X', 'Y'))) model$parameters_df #> # A tibble: 4 × 8 #>   param_names node    gen param_set nodal_type given param_value priors #>   <chr>       <chr> <int> <chr>     <chr>      <chr>       <dbl>  <dbl> #> 1 X.0         X         1 X         0          \"\"            0.5      1 #> 2 X.1         X         1 X         1          \"\"            0.5      1 #> 3 Y.00        Y         2 Y         00         \"\"            0.5      1 #> 4 Y.11        Y         2 Y         11         \"\"            0.5      1 # \\donttest{ # Restrict to define a model with monotonicity model <- make_model('X->Y') %>% set_restrictions(statement = c('Y[X=1] < Y[X=0]')) get_parameter_matrix(model) #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>      X0.Y00 X1.Y00 X0.Y01 X1.Y01 X0.Y11 X1.Y11 #> X.0       1      0      1      0      1      0 #> X.1       0      1      0      1      0      1 #> Y.00      1      1      0      0      0      0 #> Y.01      0      0      1      1      0      0 #> Y.11      0      0      0      0      1      1 #>  #>   #>  param_set  (P) #>    # Restrict to a single type in endogenous node model <- make_model('X->Y') %>% set_restrictions(statement =  '(Y[X = 1] == 1)', join_by = '&', keep = TRUE) get_parameter_matrix(model) #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>      X0.Y01 X1.Y01 X0.Y11 X1.Y11 #> X.0       1      0      1      0 #> X.1       0      1      0      1 #> Y.01      1      1      0      0 #> Y.11      0      0      1      1 #>  #>   #>  param_set  (P) #>    #  Use of | and & # Keep node if *for some value of B* Y[A = 1] == 1 model <- make_model('A->Y<-B') %>% set_restrictions(statement =  '(Y[A = 1] == 1)', join_by = '|', keep = TRUE) dim(get_parameter_matrix(model)) #> [1] 16 48   # Keep node if *for all values of B* Y[A = 1] == 1 model <- make_model('A->Y<-B') %>% set_restrictions(statement =  '(Y[A = 1] == 1)', join_by = '&', keep = TRUE) dim(get_parameter_matrix(model)) #> [1]  8 16  # Restrict multiple nodes model <- make_model('X->Y<-M; X -> M' ) %>% set_restrictions(statement =  c('(Y[X = 1] == 1)', '(M[X = 1] == 1)'), join_by = '&', keep = TRUE) get_parameter_matrix(model) #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>        X0.M01.Y0101 X1.M01.Y0101 X0.M11.Y0101 X1.M11.Y0101 X0.M01.Y1101 #> X.0               1            0            1            0            1 #> X.1               0            1            0            1            0 #> M.01              1            1            0            0            1 #> M.11              0            0            1            1            0 #> Y.0101            1            1            1            1            0 #> Y.1101            0            0            0            0            1 #> Y.0111            0            0            0            0            0 #> Y.1111            0            0            0            0            0 #>        X1.M01.Y1101 X0.M11.Y1101 X1.M11.Y1101 X0.M01.Y0111 X1.M01.Y0111 #> X.0               0            1            0            1            0 #> X.1               1            0            1            0            1 #> M.01              1            0            0            1            1 #> M.11              0            1            1            0            0 #> Y.0101            0            0            0            0            0 #> Y.1101            1            1            1            0            0 #> Y.0111            0            0            0            1            1 #> Y.1111            0            0            0            0            0 #>        X0.M11.Y0111 X1.M11.Y0111 X0.M01.Y1111 X1.M01.Y1111 X0.M11.Y1111 #> X.0               1            0            1            0            1 #> X.1               0            1            0            1            0 #> M.01              0            0            1            1            0 #> M.11              1            1            0            0            1 #> Y.0101            0            0            0            0            0 #> Y.1101            0            0            0            0            0 #> Y.0111            1            1            0            0            0 #> Y.1111            0            0            1            1            1 #>        X1.M11.Y1111 #> X.0               0 #> X.1               1 #> M.01              0 #> M.11              1 #> Y.0101            0 #> Y.1101            0 #> Y.0111            0 #> Y.1111            1 #>  #>   #>  param_set  (P) #>    # Restrict using statements and given: model <- make_model(\"X -> Y -> Z; X <-> Z\") %>%  set_restrictions(list(decreasing('X','Y'), decreasing('Y','Z')), given = c(NA,'X.0')) get_parameter_matrix(model) #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>          X0.Y00.Z00 X1.Y00.Z00 X0.Y01.Z00 X1.Y01.Z00 X0.Y11.Z00 X1.Y11.Z00 #> X.0               1          0          1          0          1          0 #> X.1               0          1          0          1          0          1 #> Y.00              1          1          0          0          0          0 #> Y.01              0          0          1          1          0          0 #> Y.11              0          0          0          0          1          1 #> Z.00_X.0          1          0          1          0          1          0 #> Z.01_X.0          0          0          0          0          0          0 #> Z.11_X.0          0          0          0          0          0          0 #> Z.00_X.1          0          1          0          1          0          1 #> Z.10_X.1          0          0          0          0          0          0 #> Z.01_X.1          0          0          0          0          0          0 #> Z.11_X.1          0          0          0          0          0          0 #>          X1.Y00.Z10 X1.Y01.Z10 X1.Y11.Z10 X0.Y00.Z01 X1.Y00.Z01 X0.Y01.Z01 #> X.0               0          0          0          1          0          1 #> X.1               1          1          1          0          1          0 #> Y.00              1          0          0          1          1          0 #> Y.01              0          1          0          0          0          1 #> Y.11              0          0          1          0          0          0 #> Z.00_X.0          0          0          0          0          0          0 #> Z.01_X.0          0          0          0          1          0          1 #> Z.11_X.0          0          0          0          0          0          0 #> Z.00_X.1          0          0          0          0          0          0 #> Z.10_X.1          1          1          1          0          0          0 #> Z.01_X.1          0          0          0          0          1          0 #> Z.11_X.1          0          0          0          0          0          0 #>          X1.Y01.Z01 X0.Y11.Z01 X1.Y11.Z01 X0.Y00.Z11 X1.Y00.Z11 X0.Y01.Z11 #> X.0               0          1          0          1          0          1 #> X.1               1          0          1          0          1          0 #> Y.00              0          0          0          1          1          0 #> Y.01              1          0          0          0          0          1 #> Y.11              0          1          1          0          0          0 #> Z.00_X.0          0          0          0          0          0          0 #> Z.01_X.0          0          1          0          0          0          0 #> Z.11_X.0          0          0          0          1          0          1 #> Z.00_X.1          0          0          0          0          0          0 #> Z.10_X.1          0          0          0          0          0          0 #> Z.01_X.1          1          0          1          0          0          0 #> Z.11_X.1          0          0          0          0          1          0 #>          X1.Y01.Z11 X0.Y11.Z11 X1.Y11.Z11 #> X.0               0          1          0 #> X.1               1          0          1 #> Y.00              0          0          0 #> Y.01              1          0          0 #> Y.11              0          1          1 #> Z.00_X.0          0          0          0 #> Z.01_X.0          0          0          0 #> Z.11_X.0          0          1          0 #> Z.00_X.1          0          0          0 #> Z.10_X.1          0          0          0 #> Z.01_X.1          0          0          0 #> Z.11_X.1          1          0          1 #>  #>   #>  param_set  (P) #>    # Restrictions on levels for endogenous nodes aren't allowed if (FALSE) { model <- make_model('X->Y') %>% set_restrictions(statement =  '(Y == 1)') }  # 2. Restrict parameter space Using labels: model <- make_model('X->Y') %>% set_restrictions(labels = list(X = '0', Y = '00'))  # Restrictions can be  with wildcards model <- make_model('X->Y') %>% set_restrictions(labels = list(Y = '?0'), wildcard = TRUE) get_parameter_matrix(model) #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>      X0.Y01 X1.Y01 X0.Y11 X1.Y11 #> X.0       1      0      1      0 #> X.1       0      1      0      1 #> Y.01      1      1      0      0 #> Y.11      0      0      1      1 #>  #>   #>  param_set  (P) #>    # Deterministic model model <- make_model('S -> C -> Y <- R <- X; X -> C -> R') %>% set_restrictions(labels = list(C = '1000', R = '0001', Y = '0001'), keep = TRUE) get_parameter_matrix(model) #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>        S0.X0.C1000.R0001.Y0001 S1.X0.C1000.R0001.Y0001 S0.X1.C1000.R0001.Y0001 #> S.0                          1                       0                       1 #> S.1                          0                       1                       0 #> X.0                          1                       1                       0 #> X.1                          0                       0                       1 #> C.1000                       1                       1                       1 #> R.0001                       1                       1                       1 #> Y.0001                       1                       1                       1 #>        S1.X1.C1000.R0001.Y0001 #> S.0                          0 #> S.1                          1 #> X.0                          0 #> X.1                          1 #> C.1000                       1 #> R.0001                       1 #> Y.0001                       1 #>  #>   #>  param_set  (P) #>    # Restrict using labels and given: model <- make_model(\"X -> Y -> Z; X <-> Z\") %>%  set_restrictions(labels = list(X = '0', Z = '00'), given = c(NA,'X.0')) get_parameter_matrix(model) #>  #> Rows are parameters, grouped in parameter sets #>  #> Columns are causal types #>  #> Cell entries indicate whether a parameter probability is used #> in the calculation of causal type probability #>  #>          X1.Y00.Z00 X1.Y10.Z00 X1.Y01.Z00 X1.Y11.Z00 X1.Y00.Z10 X1.Y10.Z10 #> X.1               1          1          1          1          1          1 #> Y.00              1          0          0          0          1          0 #> Y.10              0          1          0          0          0          1 #> Y.01              0          0          1          0          0          0 #> Y.11              0          0          0          1          0          0 #> Z.00_X.1          1          1          1          1          0          0 #> Z.10_X.1          0          0          0          0          1          1 #> Z.01_X.1          0          0          0          0          0          0 #> Z.11_X.1          0          0          0          0          0          0 #>          X1.Y01.Z10 X1.Y11.Z10 X1.Y00.Z01 X1.Y10.Z01 X1.Y01.Z01 X1.Y11.Z01 #> X.1               1          1          1          1          1          1 #> Y.00              0          0          1          0          0          0 #> Y.10              0          0          0          1          0          0 #> Y.01              1          0          0          0          1          0 #> Y.11              0          1          0          0          0          1 #> Z.00_X.1          0          0          0          0          0          0 #> Z.10_X.1          1          1          0          0          0          0 #> Z.01_X.1          0          0          1          1          1          1 #> Z.11_X.1          0          0          0          0          0          0 #>          X1.Y00.Z11 X1.Y10.Z11 X1.Y01.Z11 X1.Y11.Z11 #> X.1               1          1          1          1 #> Y.00              1          0          0          0 #> Y.10              0          1          0          0 #> Y.01              0          0          1          0 #> Y.11              0          0          0          1 #> Z.00_X.1          0          0          0          0 #> Z.10_X.1          0          0          0          0 #> Z.01_X.1          0          0          0          0 #> Z.11_X.1          1          1          1          1 #>  #>   #>  param_set  (P) #>   # }"},{"path":"/reference/set_sampling_args.html","id":null,"dir":"Reference","previous_headings":"","what":"set_sampling_args\r\nFrom 'rstanarm' (November 1st, 2019) — set_sampling_args","title":"set_sampling_args\r\nFrom 'rstanarm' (November 1st, 2019) — set_sampling_args","text":"set_sampling_args 'rstanarm' (November 1st, 2019)","code":""},{"path":"/reference/set_sampling_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set_sampling_args\r\nFrom 'rstanarm' (November 1st, 2019) — set_sampling_args","text":"","code":"set_sampling_args(object, user_dots = list(), user_adapt_delta = NULL, ...)"},{"path":"/reference/set_sampling_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set_sampling_args\r\nFrom 'rstanarm' (November 1st, 2019) — set_sampling_args","text":"object stanfit object. user_dots list. User commands. user_adapt_delta double 0 1. Adapt delta passed user ... arguments passed 'stan'","code":""},{"path":"/reference/set_sampling_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set_sampling_args\r\nFrom 'rstanarm' (November 1st, 2019) — set_sampling_args","text":"list arguments passed stan","code":""},{"path":"/reference/set_sampling_args.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"set_sampling_args\r\nFrom 'rstanarm' (November 1st, 2019) — set_sampling_args","text":"Set sampling arguments","code":""},{"path":"/reference/simulate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate_data is an alias for make_data — simulate_data","title":"simulate_data is an alias for make_data — simulate_data","text":"simulate_data alias make_data","code":""},{"path":"/reference/simulate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate_data is an alias for make_data — simulate_data","text":"","code":"simulate_data(...)"},{"path":"/reference/simulate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate_data is an alias for make_data — simulate_data","text":"... arguments make_model","code":""},{"path":"/reference/simulate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simulate_data is an alias for make_data — simulate_data","text":"data.frame simulated data.","code":""},{"path":"/reference/simulate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"simulate_data is an alias for make_data — simulate_data","text":"","code":"simulate_data(make_model(\"X->Y\")) #>   X Y #> 1 0 1"},{"path":"/reference/strategy_statements.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate strategy statements given data — strategy_statements","title":"Generate strategy statements given data — strategy_statements","text":"Helper generate statements form \"X = 1 & Y = 0\" realized data one observation","code":""},{"path":"/reference/strategy_statements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate strategy statements given data — strategy_statements","text":"","code":"strategy_statements(data, strategies)"},{"path":"/reference/strategy_statements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate strategy statements given data — strategy_statements","text":"data data frame one row strategies list strategies strategy set nodes observed","code":""},{"path":"/reference/strategy_statements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate strategy statements given data — strategy_statements","text":"string","code":""},{"path":"/reference/strategy_statements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate strategy statements given data — strategy_statements","text":"","code":"data.frame(X = 1, M = 0, Y = NA) %>%  strategy_statements(list(c(\"X\", \"M\", \"Y\"), \"X\", \"Y\")) #> [[1]] #> [1] \"X == 1 & M == 0\" #>  #> [[2]] #> [1] \"X == 1\" #>  #> [[3]] #> [1] \"\" #>"},{"path":"/reference/st_within.html","id":null,"dir":"Reference","previous_headings":"","what":"Get string between two regular expression patterns — st_within","title":"Get string between two regular expression patterns — st_within","text":"Returns substring enclosed two regular expression patterns. default returns name arguments indexed squared brackets ([]) string containing expression.","code":""},{"path":"/reference/st_within.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get string between two regular expression patterns — st_within","text":"","code":"st_within(   x,   left = \"[^_[:^punct:]]|\\\\b\",   right = \"\\\\[\",   rm_left = 0,   rm_right = -1 )"},{"path":"/reference/st_within.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get string between two regular expression patterns — st_within","text":"x character string. left character string. Regular expression serve look ahead. right character string. Regular expression serve look behind. rm_left integer. Number bites left-side match remove result. Defaults -1. rm_right integer. Number bites right-side match remove result. Defaults 0.","code":""},{"path":"/reference/st_within.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get string between two regular expression patterns — st_within","text":"character vector.","code":""},{"path":"/reference/st_within.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get string between two regular expression patterns — st_within","text":"","code":"a <- '(XX[Y=0] == 1) > (XX[Y=1] == 0)' CausalQueries:::st_within(a) #> [1] \"XX\" \"XX\" b <- '(XXX[[Y=0]] == 1 + XXX[[Y=1]] == 0)' CausalQueries:::st_within(b) #> [1] \"XXX\" \"XXX\""},{"path":"/reference/substitutes.html","id":null,"dir":"Reference","previous_headings":"","what":"Make statement for substitutes — substitutes","title":"Make statement for substitutes — substitutes","text":"Generate statement X1, X1 substitute production Y","code":""},{"path":"/reference/substitutes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make statement for substitutes — substitutes","text":"","code":"substitutes(X1, X2, Y)"},{"path":"/reference/substitutes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make statement for substitutes — substitutes","text":"X1 character. quoted name input node 1. X2 character. quoted name input node 2. Y character. quoted name outcome node.","code":""},{"path":"/reference/substitutes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make statement for substitutes — substitutes","text":"character statement class statement","code":""},{"path":[]},{"path":"/reference/substitutes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make statement for substitutes — substitutes","text":"","code":"# \\donttest{ get_query_types(model = make_model('A -> B <- C'),          query = substitutes('A', 'C', 'B'),map = \"causal_type\") #>  #> Causal types satisfying query's condition(s)   #>  #>  query =  ((B[A = 1, C = 1]) - (B[A = 0, C = 1])) < ((B[A = 1, C = 0]) - (B[A = 0, C = 0]))  #>  #> A0.C0.B0100  A1.C0.B0100 #> A0.C1.B0100  A1.C1.B0100 #> A0.C0.B0010  A1.C0.B0010 #> A0.C1.B0010  A1.C1.B0010 #> A0.C0.B0110  A1.C0.B0110 #> A0.C1.B0110  A1.C1.B0110 #> A0.C0.B1110  A1.C0.B1110 #> A0.C1.B1110  A1.C1.B1110 #> A0.C0.B0111  A1.C0.B0111 #> A0.C1.B0111  A1.C1.B0111 #>  #>  #>  Number of causal types that meet condition(s) =  20 #>  Total number of causal types in model =  64  query_model(model = make_model('A -> B <- C'),          queries = substitutes('A', 'C', 'B'),          using = 'parameters') #>   Query Given      Using Case.estimand   mean #> 1   Q 1     - parameters         FALSE 0.3125 # }"},{"path":"/reference/te.html","id":null,"dir":"Reference","previous_headings":"","what":"Make treatment effect statement (positive) — te","title":"Make treatment effect statement (positive) — te","text":"Generate statement (Y(1) - Y(0)). statement applied model returns element (1,0,-1) set cases. useful purposes querying model, uses require list types, set_restrictions.","code":""},{"path":"/reference/te.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make treatment effect statement (positive) — te","text":"","code":"te(X, Y)"},{"path":"/reference/te.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make treatment effect statement (positive) — te","text":"X character. quoted name input node Y character. quoted name outcome node","code":""},{"path":"/reference/te.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make treatment effect statement (positive) — te","text":"character statement class statement","code":""},{"path":[]},{"path":"/reference/te.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make treatment effect statement (positive) — te","text":"","code":"# \\donttest{ te('A', 'B') #> [1] \"(B[A=1] - B[A=0])\" #> attr(,\"class\") #> [1] \"statement\"  model <- make_model('X->Y') %>% set_restrictions(increasing('X', 'Y')) query_model(model, list(ate = te('X', 'Y')),  using = 'parameters') #>   Query Given      Using Case.estimand       mean #> 1   ate     - parameters         FALSE -0.3333333  # set_restrictions  breaks with te because it requires a listing # of causal types, not numeric output. # } if (FALSE) { model <- make_model('X->Y') %>% set_restrictions(te('X', 'Y')) }"},{"path":"/reference/type_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate type matrix — type_matrix","title":"Generate type matrix — type_matrix","text":"Generate type matrix","code":""},{"path":"/reference/type_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate type matrix — type_matrix","text":"","code":"type_matrix(parent_n)"},{"path":"/reference/type_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate type matrix — type_matrix","text":"parent_n integer. Number parents given child.","code":""},{"path":"/reference/type_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate type matrix — type_matrix","text":"data.frame whose rows contain digits causal types model","code":""},{"path":"/reference/type_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate type matrix — type_matrix","text":"","code":"# \\donttest{ CausalQueries:::type_matrix(2) #>    00 10 01 11 #> 1   0  0  0  0 #> 2   1  0  0  0 #> 3   0  1  0  0 #> 4   1  1  0  0 #> 5   0  0  1  0 #> 6   1  0  1  0 #> 7   0  1  1  0 #> 8   1  1  1  0 #> 9   0  0  0  1 #> 10  1  0  0  1 #> 11  0  1  0  1 #> 12  1  1  0  1 #> 13  0  0  1  1 #> 14  1  0  1  1 #> 15  0  1  1  1 #> 16  1  1  1  1 # }"},{"path":"/reference/unpack_wildcard.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack a wild card — unpack_wildcard","title":"Unpack a wild card — unpack_wildcard","text":"Unpack wild card","code":""},{"path":"/reference/unpack_wildcard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack a wild card — unpack_wildcard","text":"","code":"unpack_wildcard(x)"},{"path":"/reference/unpack_wildcard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unpack a wild card — unpack_wildcard","text":"x character. nodal type containing one wildcard characters '?' unpacked.","code":""},{"path":"/reference/unpack_wildcard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unpack a wild card — unpack_wildcard","text":"type label wildcard characters '?' substituted 0 1.","code":""},{"path":"/reference/update_causal_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Update causal types based on nodal types — update_causal_types","title":"Update causal types based on nodal types — update_causal_types","text":"Update causal types based nodal types","code":""},{"path":"/reference/update_causal_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update causal types based on nodal types — update_causal_types","text":"","code":"update_causal_types(model, restrict_given = NULL)"},{"path":"/reference/update_causal_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update causal types based on nodal types — update_causal_types","text":"model causal_model. model object generated make_model. restrict_given character vector subsetting instructions rows dropped causal types data.frame.","code":""},{"path":"/reference/update_causal_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update causal types based on nodal types — update_causal_types","text":"data.frame containing updated causal types model","code":""},{"path":"/reference/update_causal_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update causal types based on nodal types — update_causal_types","text":"","code":"CausalQueries:::update_causal_types(make_model('X->Y')) #>        X  Y #> X0.Y00 0 00 #> X1.Y00 1 00 #> X0.Y10 0 10 #> X1.Y10 1 10 #> X0.Y01 0 01 #> X1.Y01 1 01 #> X0.Y11 0 11 #> X1.Y11 1 11"},{"path":"/reference/update_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit causal model using 'stan' — update_model","title":"Fit causal model using 'stan' — update_model","text":"Takes model data returns model object data attached posterior model","code":""},{"path":"/reference/update_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit causal model using 'stan' — update_model","text":"","code":"update_model(   model,   data = NULL,   data_type = \"long\",   keep_fit = FALSE,   keep_transformed = TRUE,   censored_types = NULL,   ... )"},{"path":"/reference/update_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit causal model using 'stan' — update_model","text":"model causal_model. model object generated make_model. data data.frame.  Data nodes can take three values: 0, 1, NA. long form generated make_events data_type Either 'long' (made  simulate_data) 'compact' (made collapse_data). Compact data must entries member strategy family produce valid simplex. keep_fit Logical. Whether append  stanfit object model. Defaults `FALSE` keep_transformed Logical. Whether keep transformed parameters, prob_of_types, P_lambdas, w, w_full censored_types vector data types selected data, eg c(\"X0Y0\") ... Options passed onto stan call.","code":""},{"path":"/reference/update_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit causal model using 'stan' — update_model","text":"object class causal_model. essentially returns list containing elements comprising model (e.g. 'statement', 'nodal_types' 'DAG') `posterior_distribution` returned stan attached .","code":""},{"path":"/reference/update_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit causal model using 'stan' — update_model","text":"","code":"model <- make_model('X->Y') data_long   <- simulate_data(model, n = 4) data_short  <- collapse_data(data_long, model) # \\donttest{ model_1 <- update_model(model, data_long) #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 2.7e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.27 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.202 seconds (Warm-up) #> Chain 1:                0.254 seconds (Sampling) #> Chain 1:                0.456 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.7e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.17 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.124 seconds (Warm-up) #> Chain 2:                0.226 seconds (Sampling) #> Chain 2:                0.35 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 2.3e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.23 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.194 seconds (Warm-up) #> Chain 3:                0.239 seconds (Sampling) #> Chain 3:                0.433 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 3e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.3 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.196 seconds (Warm-up) #> Chain 4:                0.219 seconds (Sampling) #> Chain 4:                0.415 seconds (Total) #> Chain 4:  # } # \\donttest{ model_2 <- update_model(model, data_long, keep_transformed = FALSE) #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 3.6e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.36 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.194 seconds (Warm-up) #> Chain 1:                0.172 seconds (Sampling) #> Chain 1:                0.366 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.9e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.19 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.094 seconds (Warm-up) #> Chain 2:                0.199 seconds (Sampling) #> Chain 2:                0.293 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 4.9e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.49 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.153 seconds (Warm-up) #> Chain 3:                0.161 seconds (Sampling) #> Chain 3:                0.314 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 2.2e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.22 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.185 seconds (Warm-up) #> Chain 4:                0.184 seconds (Sampling) #> Chain 4:                0.369 seconds (Total) #> Chain 4:  # } if (FALSE) { # Throws error unless compact data indicated:  model_3 <- update_model(model, data_short) } # \\donttest{ model_4 <- update_model(model, data_short, data_type = 'compact') #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.7e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.17 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.178 seconds (Warm-up) #> Chain 1:                0.214 seconds (Sampling) #> Chain 1:                0.392 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.9e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.19 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.211 seconds (Warm-up) #> Chain 2:                0.176 seconds (Sampling) #> Chain 2:                0.387 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 3.3e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.33 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.163 seconds (Warm-up) #> Chain 3:                0.211 seconds (Sampling) #> Chain 3:                0.374 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 4.2e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.42 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.231 seconds (Warm-up) #> Chain 4:                0.187 seconds (Sampling) #> Chain 4:                0.418 seconds (Total) #> Chain 4:   # It is possible to implement updating without data, in which case the posterior # is a stan object that reflects the prior model_5 <- update_model(model) #> No data provided #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 5.1e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.51 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.121 seconds (Warm-up) #> Chain 1:                0.172 seconds (Sampling) #> Chain 1:                0.293 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 5.2e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.52 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.14 seconds (Warm-up) #> Chain 2:                0.15 seconds (Sampling) #> Chain 2:                0.29 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 3.1e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.31 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.202 seconds (Warm-up) #> Chain 3:                0.175 seconds (Sampling) #> Chain 3:                0.377 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 3.1e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.31 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.164 seconds (Warm-up) #> Chain 4:                0.183 seconds (Sampling) #> Chain 4:                0.347 seconds (Total) #> Chain 4:    # Censored data types make_model(\"X->Y\") %>%   update_model(data.frame(X=c(1,1), Y=c(1,1)), censored_types = c(\"X1Y0\")) %>%   query_model(te(\"X\", \"Y\"), using = \"posteriors\") #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 1). #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1:  #> Chain 1: Initialization between (-2, 2) failed after 100 attempts.  #> Chain 1:  Try specifying initial values, reducing ranges of constrained values, or reparameterizing the model. #> Error : Initialization failed. #> [1] \"In addition: Warning messages:\"                      #> [2] \"1: package 'dplyr' was built under R version 4.2.3 \" #> [3] \"2: package 'Rcpp' was built under R version 4.2.3 \"  #> [1] \"error occurred during calling the sampler; sampling not done\" #> Stan model 'simplexes' does not contain samples. #> Error in `colnames<-`(`*tmp*`, value = get_parameter_names(model)): attempt to set 'colnames' on an object with less than two dimensions  # Censored data: Learning nothing make_model(\"X->Y\") %>%   update_model(data.frame(X=c(1,1), Y=c(1,1)), censored_types = c(\"X1Y0\", \"X0Y0\", \"X0Y1\")) %>%   query_model(te(\"X\", \"Y\"), using = \"posteriors\") #>  #> SAMPLING FOR MODEL 'simplexes' NOW (CHAIN 1). #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1: Rejecting initial value: #> Chain 1:   Gradient evaluated at the initial value is not finite. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1:  #> Chain 1: Initialization between (-2, 2) failed after 100 attempts.  #> Chain 1:  Try specifying initial values, reducing ranges of constrained values, or reparameterizing the model. #> Error : Initialization failed. #> character(0) #> [1] \"error occurred during calling the sampler; sampling not done\" #> Stan model 'simplexes' does not contain samples. #> Error in `colnames<-`(`*tmp*`, value = get_parameter_names(model)): attempt to set 'colnames' on an object with less than two dimensions   # }"},{"path":"/reference/var_in_query.html","id":null,"dir":"Reference","previous_headings":"","what":"List of nodes contained in query — var_in_query","title":"List of nodes contained in query — var_in_query","text":"List nodes contained query","code":""},{"path":"/reference/var_in_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of nodes contained in query — var_in_query","text":"","code":"var_in_query(model, query)"},{"path":"/reference/var_in_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of nodes contained in query — var_in_query","text":"model causal_model. model object generated make_model. query character string. expression defining nodal types interrogate realise_outcomes","code":""},{"path":"/reference/var_in_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of nodes contained in query — var_in_query","text":"vector indicating variables included query","code":""},{"path":"/news/index.html","id":"causalqueries-010","dir":"Changelog","previous_headings":"","what":"CausalQueries 0.1.0","title":"CausalQueries 0.1.0","text":"CRAN release: 2022-06-27 minor release introducing new simplified functionality.","code":""},{"path":"/news/index.html","id":"new-functionality-0-1-0","dir":"Changelog","previous_headings":"","what":"New functionality","title":"CausalQueries 0.1.0","text":"plot_dag(): improved ggplot2 based plotting model DAGs set_priors(), set_parameters(): parameter sets can now specified via node, nodal_type, label, param_set, given, statement logical alter_at statement. set_restrictions(): nodal types can now restricted using given statements.","code":""},{"path":"/news/index.html","id":"changed-functionality-0-1-0","dir":"Changelog","previous_headings":"","what":"Changed functionality","title":"CausalQueries 0.1.0","text":"setting confounds using lists statements discontinued. Confounding now specified via <-> make_model() set_confounds()","code":""}]
